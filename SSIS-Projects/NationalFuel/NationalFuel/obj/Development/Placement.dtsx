<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/10/2020 8:51:29 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="DFW2-APPDEV-006"
  DTS:CreatorName="CORP\nokeke"
  DTS:DTSID="{68BC8082-7DA3-4D6C-A02A-44ABD02900A6}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Placement"
  DTS:PackageType="5"
  DTS:VersionBuild="58"
  DTS:VersionGUID="{F42D6A9D-26E1-4D21-8740-3497CABCC08F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ARTIVA]"
      DTS:CreationName="ADO.NET:System.Data.Odbc.OdbcConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{21D9CA10-3555-4DE5-A9A3-50BD3E310AE7}"
      DTS:ObjectName="ARTIVA">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"DSN="+  @[$Project::Namespace]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="DSN=FIRSTPROD;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[artiva_import_file]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{3BAC4D6D-20C3-4295-BCAE-B36337814684}"
      DTS:ObjectName="artiva_import_file">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::FullOutboundDirectory] + "ArtivaNB-" + @[$Project::Namespace] + "-"  + @[$Project::ClientName] + "-" +  @[User::currentFile] + ".csv"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\NationalFuel\Outbound\ArtivaNB-FIRSTPROD-National Fuel-0.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="2000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="RowData"
              DTS:DTSID="{DCBD1454-6EF8-4BAD-83F7-1338503EC79A}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Close_MT]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{a4364b9d-798c-468c-8ee3-58714302bfed}"
      DTS:ObjectName="Close_MT">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::FullOutboundDirectory] + "ArtivaMT-" + @[$Project::Namespace] + "-"  + @[$Project::ClientName] + "-CloseAccount-" +  @[User::currentFile] + ".csv"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\NationalFuel\Outbound\ArtivaMT-FIRSTPROD-National Fuel-CloseAccount-0.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="2000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="RowData"
              DTS:DTSID="{DCBD1454-6EF8-4BAD-83F7-1338503EC79A}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Exceptions]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{20B9716C-E9DD-4633-ACDF-04582C42FC9F}"
      DTS:ObjectName="Exceptions">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExceptionReportFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\NationalFuel\Outbound\0-ExceptionReport.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{59AEB98B-4D94-4D39-9B1F-EBC67663393C}"
      DTS:ObjectName="InboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Inbound\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{25EEC2D9-E8D7-4BA9-AAA9-75288819B5D2}"
      DTS:ObjectName="InboundFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*NationalFuel_Call_Campaigns*.txt</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{91AE4DF9-A361-43A2-B3E1-815EEE9088F9}"
      DTS:ObjectName="OutboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Outbound\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A91B266A-24F9-4DFA-8E1A-DC62C72BE2E4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="currentFile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E622C601-7637-439A-B6EE-B0B8ED6342DD}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]  + @[User::currentFile]  + &quot;-ExceptionReport.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExceptionReportFile">
      <DTS:VariableValue
        DTS:DataType="8">M:\NationalFuel\Outbound\0-ExceptionReport.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CEB85938-B22A-4428-B174-B152B311A9EB}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath]+ @[$Package::InboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullInboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">M:\NationalFuel\Inbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{40BE7A8D-F493-435F-B9FE-22846FEC3CD0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] + @[$Package::OutboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullOutboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">M:\NationalFuel\Outbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{25CBB36F-FB04-4CEE-915B-3C36B8164E50}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailSubject]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Subject">
      <DTS:VariableValue
        DTS:DataType="8">National Fuel First Party Placements</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D53C1CC0-1B27-42B3-8CA6-265E04A57352}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::EmailTo]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="To">
      <DTS:VariableValue
        DTS:DataType="8">nnaemeka.okeke@radiusgs.com</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create_CSVs"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{f4256e88-82f2-42f6-b0d0-b4f7d59a5299}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create_CSVs">
      <DTS:ForEachEnumerator
        DTS:CreationName="DTS.ForEachFileEnumerator.3"
        DTS:DTSID="{ae20b8b7-42d3-4b33-a360-ad6328cab350}"
        DTS:ObjectName="{0D7FC3F8-DE02-4DD6-890A-832702336AE8}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::FullInboundDirectory]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[$Package::InboundFileMask]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="M:\NationalFuel\Inbound\" />
            <FEFEProperty
              FileSpec="*NationalFuel_Call_Campaigns*.txt" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Create_CSVs\Process_Files"
          DTS:CreationName="SSIS.Pipeline.3"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{0fb6602c-715b-45eb-ac62-509d740c2ffa}"
          DTS:ExecutableType="SSIS.Pipeline.3"
          DTS:LocaleID="-1"
          DTS:ObjectName="Process_Files"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Artiva_Placement_File">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[artiva_import_file]"
                      connectionManagerRefId="Package.ConnectionManagers[artiva_import_file]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          codePage="1252"
                          dataType="str"
                          length="2000"
                          name="RowData" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Create_CSVs\Process_Files\Close_MT"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Close_MT">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Close_MT.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Close_MT]"
                      connectionManagerRefId="Package.ConnectionManagers[Close_MT]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Create_CSVs\Process_Files\Close_MT.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Create_CSVs\Process_Files\Close_MT.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Create_CSVs\Process_Files\Close_MT.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Create_CSVs\Process_Files\Close_MT.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          codePage="1252"
                          dataType="str"
                          length="2000"
                          name="RowData" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Create_CSVs\Process_Files\Exceptions"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Exceptions">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Exceptions.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Message" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Create_CSVs\Process_Files\Script Component"
                  componentClassID="DTS.ManagedComponentWrapper.3"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="8">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using RGS.ArtivaGeneralPurpose.Data.Records;
using System.Collections.Generic;
using FileHelpers;
using System.IO;
using System.Linq;
using System.Globalization;
using System.Data.Odbc;
using System.Text;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

    private bool _exceptionReportCreated;
    OdbcConnection conn;

    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        _exceptionReportCreated = false;
        conn = new OdbcConnection(Connections.ARTIVA.ConnectionString);
        conn.Open();

        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        if (!_exceptionReportCreated)
            System.IO.File.Delete(Connections.ExceptionConnection.ConnectionString);
        if (conn != null)
        {
            conn.Close();
            conn.Dispose();
        }

        string bd = "Client File Name: " + Variables.currentFile + "\n" +
"File Totals: " + FileTotals.ToString() + " and " + sFileTotals.ToString("C") + "\n" +
"New Inventory: " + NewInventory.ToString() + " and " + sNewInventory.ToString("C") + "\n" +
"Existing Inventory: " + ExistingInventory.ToString() + " and " + sExistingInventory.ToString("C") + "\n" +
"Closed Inventory: " + ClosedInventory.ToString() + ".";


       new CommonClasses.EmailSender().SendMail(Variables.To, "", null, Variables.Subject, bd);
    }
    private int FileTotals;
    private int NewInventory;
    private int ExistingInventory;
    private int ClosedInventory;

    private decimal sFileTotals;
    private decimal sNewInventory;
    private decimal sExistingInventory;


    public override void CreateNewOutputRows()
    {
            IEnumerable<string> allLines = null;
            string filePath = Variables.FullInboundDirectory + Variables.currentFile;
            if (File.Exists(filePath))
            {

                allLines = File.ReadLines(filePath);
            }


            // Header
            //IEnumerable<string> headerRecord = allLines.Where(d => d.StartsWith("HDR"));

            IEnumerable<string> placementRecord = allLines.Where(d => !d.StartsWith("HDR") && !d.StartsWith("END"));

            string FirstPhoneNumber = "";
            string CustomerName = "";
            string ThirdPartyName = "";
            string ThirdPartyPhoneNumber = "";
            string NationalFuelGasAccountNumber = "";
            string CallCampaignIndicator = "";
            string CountofTimesSent = "";
            string SecondPhoneNumber = "";
            string ServiceAddress1 = "";
            string ServiceAddress2 = "";
            string ServiceAddress3 = "";
            string ServiceAddress4 = "";
            string MailingAddress1 = "";
            string MailingAddress2 = "";
            string CustomerServicePhoneNumber = "";
            string ServiceType = "";
            string ServiceClass = "";
            string CreditPoints = "";
            string AmountofPastDue = "";
            string AmountofCurrentBill = "";
            string AccountBalance = "";
            string LastPaymentAmount = "";
            string LastPaymentDate = "";
            string CustomerServiceLocationName = "";
            string ProposedTerminationDate = "";
            string CurrentBillDueDate = "";
            string AgreementDefaultAmount = "";
            string NoCheckIndicator = "";
            string LiveAgentIndicator = "";
            string CurrentBillDueDate1 = "";
            string AgreementDefaultAmount1 = "";
            string PartialPaymentIndicator = "";
            string NextBusinessday = "";
            string NoCheckIndicator1 = "";
            string LiveAgentIndicator1 = "";

            string clientid = "";
            string query = "";


            Dictionary<string, AccountInformation_10> Record10s = new Dictionary<string, AccountInformation_10>();
            Dictionary<string, PartyInformation_20> Record20s = new Dictionary<string, PartyInformation_20>();
            Dictionary<string, PlacementInformation_100> Record100s = new Dictionary<string, PlacementInformation_100>();
            Dictionary<string, CableCellUtilityInformation_809> Record809s = new Dictionary<string, CableCellUtilityInformation_809>();
            HashSet<string> fileaccs = new HashSet<string>();
            HashSet<string> placed = new HashSet<string>();
            HashSet<string> closed = new HashSet<string>();
            HashSet<string> aktive = new HashSet<string>();

        var ids = new StringBuilder();

        foreach (string line in placementRecord)
        {
            var Record10 = new AccountInformation_10();
            var Record20 = new PartyInformation_20();
            var Record100 = new PlacementInformation_100();
            var Record809 = new CableCellUtilityInformation_809();

            NationalFuelGasAccountNumber = line.Substring(80, 7).Trim();

            if (!Record10s.ContainsKey(NationalFuelGasAccountNumber)) { 

            CallCampaignIndicator = line.Substring(87, 1).Trim();
            ServiceAddress3 = line.Substring(160, 2).Trim();

            if (CallCampaignIndicator == "1" && ServiceAddress3 == "PA")
                clientid = "NFPAPT";
            else if (CallCampaignIndicator == "1" && ServiceAddress3 == "NY")
                clientid = "NFNYPT";
            else if (CallCampaignIndicator == "5" && ServiceAddress3 == "PA")
                clientid = "NFPABA";
            else if (CallCampaignIndicator == "5" && ServiceAddress3 == "NY")
                clientid = "NFNYBA";
            else
            {
                    clientid = "NFNOST";
                    _exceptionReportCreated = true;
                ExceptionBuffer.AddRow();
                ExceptionBuffer.Data = string.Format("Unmapped Call Campaign Indicator or Service Address 3. Call Campaign Indicator: {0}; Service Address 3: {1}; National Fuel Gas AccountNumber: {2}",
                    CallCampaignIndicator, ServiceAddress3, NationalFuelGasAccountNumber);
                //continue;
            }


            FirstPhoneNumber = line.Substring(0, 10).Trim();
            CustomerName = line.Substring(10, 40).Trim();
            ThirdPartyName = line.Substring(50, 20).Trim();
            ThirdPartyPhoneNumber = line.Substring(70, 10).Trim();
            CountofTimesSent = line.Substring(88, 2).Trim();
            SecondPhoneNumber = line.Substring(90, 10).Trim();
            ServiceAddress1 = line.Substring(100, 40).Trim();
            ServiceAddress2 = line.Substring(140, 20).Trim();
            ServiceAddress4 = line.Substring(162, 9).Trim();
            MailingAddress1 = line.Substring(171, 36).Trim();
            MailingAddress2 = line.Substring(207, 35).Trim();
            CustomerServicePhoneNumber = line.Substring(242, 10).Trim();
            ServiceType = line.Substring(252, 1).Trim();
            ServiceClass = line.Substring(253, 3).Trim();
            CreditPoints = line.Substring(256, 3).Trim();
            AmountofPastDue = line.Substring(259, 8).Trim();
            AmountofCurrentBill = line.Substring(267, 8).Trim();
            AccountBalance = line.Substring(275, 8).Trim();
            LastPaymentAmount = line.Substring(283, 8).Trim();
            LastPaymentDate = line.Substring(291, 8).Trim();
            CustomerServiceLocationName = line.Substring(299, 15).Trim();

            ProposedTerminationDate = line.Substring(314, 8).Trim();
            CurrentBillDueDate = line.Substring(322, 8).Trim();
            AgreementDefaultAmount = line.Substring(330, 8).Trim();
            NoCheckIndicator = line.Substring(343, 7).Trim();
            LiveAgentIndicator = line.Substring(350, 1).Trim();

            CurrentBillDueDate1 = line.Substring(314, 8).Trim();
            AgreementDefaultAmount1 = line.Substring(322, 8).Trim();
            PartialPaymentIndicator = line.Substring(330, 1).Trim();
            NextBusinessday = line.Substring(331, 8).Trim();
            NoCheckIndicator1 = line.Substring(343, 7).Trim();
            LiveAgentIndicator1 = line.Substring(350, 1).Trim();

            Record20.PrimaryPhoneNumber = FirstPhoneNumber;
            string[] n = CustomerName.Split(' ');

            if (n.Length > 2)
            {
                Record20.FirstName = (n[0] + " " + n[1]).Trim();
                Record20.LastName = CustomerName.Remove(0, Record20.FirstName.Length).Trim();
            }
            else if (n.Length == 2)
            {
                Record20.FirstName = n[0].Trim();
                Record20.LastName = n[1].Trim();
            }
            else
                Record20.LastName = n[0].Trim();

            Record10.ClientReferenceNumber = NationalFuelGasAccountNumber;
            Record10.ClientID = clientid;
            Record100.PlacementGroupId = CallCampaignIndicator;
            Record20.AlternatePhoneNumber = SecondPhoneNumber;
            Record10.DebtDescription = "Service At: " + ServiceAddress1;
            Record20.AddressLine = ServiceAddress1;
            Record809.ServiceToAddressLine1 = ServiceAddress1;
            Record20.City = ServiceAddress2;
            Record809.ServiceToAddressCity = ServiceAddress2;
            Record10.SOLState = ServiceAddress3;
            Record20.State = ServiceAddress3;
            Record809.BillToAddressState = ServiceAddress3;
            Record809.ServiceToAddressState = ServiceAddress3;
            Record20.PostalCode = ServiceAddress4;
            Record809.ServiceToAddressZip = ServiceAddress4;
            Record809.BillToAddressLine1 = MailingAddress1;
            string[] ad = MailingAddress2.Split(' ');

            if (ad.Length > 2)
            {

                Record809.BillToAddressCity = (ad[0] + " " + ad[1]).Trim();
                Record809.BillToAddressZip = ad[2].Trim();
            }
            else if (ad.Length == 2)
            {
                Record809.BillToAddressCity = ad[0].Trim();
                Record809.BillToAddressZip = ad[1].Trim();

            }


            Record809.ProductType = "Gas Utility Service";
            if (ServiceClass == "COM")
                Record20.IsBusiness = true;

            Record809.TransactionAmount = getMoney(AmountofPastDue);
            Record10.CurrentAmount = getMoney(AmountofCurrentBill);

            decimal amt = getMoney(AccountBalance);
            Record10.PrincipalInitalBalance = amt;
            Record809.ServiceAccountBalance = amt;
            Record10.ClientLastPayAmount = getMoney(LastPaymentAmount);
            Record10.ClientLastPayDate = getDate(LastPaymentDate);

            if (CallCampaignIndicator == "1")
            {

                Record809.DisconnectDate = getDate(ProposedTerminationDate);
                Record809.LastBillDate = getDate(CurrentBillDueDate);
                Record809.WriteOffAmt = getMoney(AgreementDefaultAmount);

                Record100.CollectionType = NoCheckIndicator;
                Record100.TypeOfAccount = LiveAgentIndicator;
            }


            if (CallCampaignIndicator == "5")
            {
                Record809.LastBillDate = getDate(CurrentBillDueDate1);
                Record809.WriteOffAmt = getMoney(AgreementDefaultAmount1);
                if (PartialPaymentIndicator == "X")
                    Record809.MasterTransationType = "Partial Payment";
                Record100.DateAccountAssigned = getDate(NextBusinessday);

                Record100.CollectionType = NoCheckIndicator1;
                Record100.TypeOfAccount = LiveAgentIndicator1;
            }


            Record100.IncomingFileName = Variables.currentFile;
            Record10.ListedDate = DateTime.Today;
            Record10.SOLAgreementType = "WRITTEN";
            Record100.DateLoaded = DateTime.Today;

            DateTime? dt;

            if (Record10.ClientLastPayDate == null)
                dt = Record809.LastBillDate;
            else
                dt = Record10.ClientLastPayDate;

            Record100.BKEffectiveDate = dt;
            Record10.ServiceDate = dt;
            Record10.DelinquencyDate = dt;
            Record10.SOLDate = dt;

            //ids.Append("'" + NationalFuelGasAccountNumber + "',");
            fileaccs.Add(NationalFuelGasAccountNumber);
            Record10s.Add(NationalFuelGasAccountNumber, Record10);
            Record20s.Add(NationalFuelGasAccountNumber, Record20);
            Record100s.Add(NationalFuelGasAccountNumber, Record100);
            Record809s.Add(NationalFuelGasAccountNumber, Record809);

        }

                










            }

            var acc = new DataTable();
            string ARACID, ARACCLACCT, ARCLID;
            int ISACTIVE = 0;

            query = @"SELECT 
                    account.ARACID,
                    account.ARACCLACCT,
                    ARCLID,
					CASE WHEN arrela.ARRELSTATUSID='INACTCANCEL' THEN 0 ELSE 1 END AS ISACTIVE
                FROM %STARTTABLE ARCLIENT INNER JOIN ARACCOUNT account on ARCLID = account.ARACCLTID AND ARCLID IN ('NFPAPT','NFNYPT','NFPABA','NFNYBA','NFNOST')
                JOIN ARRELATIONSHIP arrela ON account.ARACRPRELID = arrela.ARRELID";

            using (OdbcCommand cmd = new OdbcCommand(query, conn, null))
            {

                if (conn.State != ConnectionState.Open)
                    conn.Open();

                cmd.CommandTimeout = 300000000;


                using (var reader = cmd.ExecuteReader())
                {
                    acc.Load(reader);
                }




            }

            if (acc.Rows.Count==0)
            {

                foreach (KeyValuePair<string, AccountInformation_10> a in Record10s)
                {
                    AddPlacementRow(a.Value);
                    AddPlacementRow(Record20s[a.Value.ClientReferenceNumber]);
                    AddPlacementRow(Record100s[a.Value.ClientReferenceNumber]);
                    AddPlacementRow(Record809s[a.Value.ClientReferenceNumber]);
                    sNewInventory += Record809s[a.Value.ClientReferenceNumber].TransactionAmount;
                 
                    NewInventory++;
                }

                sFileTotals = sNewInventory;
                FileTotals = NewInventory;

            } else {
            foreach (DataRow r in acc.Rows)
            {
                ARACID = r["ARACID"] == DBNull.Value || r["ARACID"] == null ? "" : r["ARACID"].ToString();
                ISACTIVE = r["ISACTIVE"] == DBNull.Value || r["ISACTIVE"] == null ? 0 : (int)r["ISACTIVE"];
                ARACCLACCT = r["ARACCLACCT"] == DBNull.Value || r["ARACCLACCT"] == null ? "" : r["ARACCLACCT"].ToString();
                ARCLID = r["ARCLID"] == DBNull.Value || r["ARCLID"] == null ? "" : r["ARCLID"].ToString();
                if (ISACTIVE == 1)
                {
                    if (!fileaccs.Contains(ARACCLACCT) && !closed.Contains(ARACCLACCT))
                    {
                        var c = new CloseAccount_C();
                        c.AccountId = ARACID;
                        c.CloseCode = "CCR";
                        AddMtRow(c);
                        ClosedInventory++;

                        FileTotals++;
                        closed.Add(ARACCLACCT);




                    }
                    

                    else if (Record10s.ContainsKey(ARACCLACCT))
                        {

                        if(ARCLID != Record10s[ARACCLACCT].ClientID)
                            {

                            if (!closed.Contains(ARACCLACCT))
                            {

                                var c = new CloseAccount_C();
                                c.AccountId = ARACID;
                                c.CloseCode = "CCR";
                                AddMtRow(c);
                                ClosedInventory++;
                                closed.Add(ARACCLACCT);
                            }
 

                            if (!placed.Contains(ARACCLACCT))
                            {
                                AddPlacementRow(Record10s[ARACCLACCT]);
                                AddPlacementRow(Record20s[ARACCLACCT]);
                                AddPlacementRow(Record100s[ARACCLACCT]);
                                AddPlacementRow(Record809s[ARACCLACCT]);

                                NewInventory++;
                                sNewInventory += Record809s[ARACCLACCT].TransactionAmount;


                                FileTotals++;
                                FileTotals++;
                                sFileTotals += Record809s[ARACCLACCT].TransactionAmount;
                                placed.Add(ARACCLACCT);
                            }
                            } else
                                  {
                                    aktive.Add(ARACCLACCT);
                                    ExistingInventory++;
                                    sExistingInventory += Record809s[ARACCLACCT].TransactionAmount;

                                    FileTotals++;
                                    sFileTotals += Record809s[ARACCLACCT].TransactionAmount;
                            
                                   }

                        }
                    


                }


            }

            foreach (string s in fileaccs)
                {

                    DataRow[] dr = acc.Select("ARACCLACCT = '" + s + "'");
                    DataRow[] cl = acc.Select("ARACCLACCT = '" + s + "' AND ARCLID<>'" + Record10s[s].ClientID + "'");
                    DataRow[] no = acc.Select("ISACTIVE=0 AND ARACCLACCT = '" + s + "' AND ARCLID='" + Record10s[s].ClientID + "'");

                if (!(dr != null && dr.Count() > 0) || (cl != null && cl.Count() > 0) || (no != null && no.Count() > 0))
                    {

                        if (!placed.Contains(s) && !aktive.Contains(s))
                            {
                                AddPlacementRow(Record10s[s]);
                                AddPlacementRow(Record20s[s]);
                                AddPlacementRow(Record100s[s]);
                                AddPlacementRow(Record809s[s]);

                      if((no != null && no.Count() > 0))
                        {
                            ExistingInventory++;
                            sExistingInventory += Record809s[s].TransactionAmount;

                            FileTotals++;
                            sFileTotals += Record809s[s].TransactionAmount;
                        } else
                        {
                            NewInventory++;
                            sNewInventory += Record809s[s].TransactionAmount;

                            FileTotals++;
                            sFileTotals += Record809s[s].TransactionAmount;
                        }


                            }

                    }
                }
            }
    }

    private decimal getMoney(string s)
    {
        string c = s.TrimStart('0').Trim();
        if (string.IsNullOrEmpty(s) || c.Length  == 0)
            return 0;
        else
        {
            if (c.Length <= 2)
                return Convert.ToDecimal(c + ".00");
            else
                return Convert.ToDecimal(c.Insert(c.Length - 2, "."));
        }


    }

    private string getFormateddate(string str)
    {
        if (string.IsNullOrEmpty(str))
            return "";
        str = str.Length < 8 && str.Substring(0, 1) != "0" ? "0" + str : str;
        str = str.Length < 8 ? str.Insert(2, "0") : str;

        return str;
    }
    private DateTime? getDate(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue;
        else
            return null;
    }


    private void AddPlacementRow<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList).Replace("\r\n","");
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output0Buffer.AddRow();
        Output0Buffer.Data = recordString.ToUpper();
    }

    private void AddMtRow<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList).Replace("\r\n", "");
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;


        CollateralBuffer.AddRow();
        CollateralBuffer.Data = recordString.ToUpper();
    }


}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ExceptionBuffer: ScriptBuffer

{
    public ExceptionBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class PlacementBuffer: ScriptBuffer

{
    public PlacementBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class LegalBuffer: ScriptBuffer

{
    public LegalBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class CollateralBuffer: ScriptBuffer

{
    public CollateralBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class NotesBuffer: ScriptBuffer

{
    public NotesBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ComakerBuffer: ScriptBuffer

{
    public ComakerBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public ExceptionBuffer ExceptionBuffer;

    public PlacementBuffer PlacementBuffer;

    public LegalBuffer LegalBuffer;

    public CollateralBuffer CollateralBuffer;

    public NotesBuffer NotesBuffer;

    public ComakerBuffer ComakerBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

        if (null != ExceptionBuffer)
        {
            ExceptionBuffer.SetEndOfRowset();
            ExceptionBuffer = null;
        }

        if (null != PlacementBuffer)
        {
            PlacementBuffer.SetEndOfRowset();
            PlacementBuffer = null;
        }

        if (null != LegalBuffer)
        {
            LegalBuffer.SetEndOfRowset();
            LegalBuffer = null;
        }

        if (null != CollateralBuffer)
        {
            CollateralBuffer.SetEndOfRowset();
            CollateralBuffer = null;
        }

        if (null != NotesBuffer)
        {
            NotesBuffer.SetEndOfRowset();
            NotesBuffer = null;
        }

        if (null != ComakerBuffer)
        {
            ComakerBuffer.SetEndOfRowset();
            ComakerBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Exception"))
            {
                ExceptionBuffer = new ExceptionBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Placement"))
            {
                PlacementBuffer = new PlacementBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Legal"))
            {
                LegalBuffer = new LegalBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Collateral"))
            {
                CollateralBuffer = new CollateralBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Notes"))
            {
                NotesBuffer = new NotesBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Comaker"))
            {
                ComakerBuffer = new ComakerBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 ARTIVA
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ARTIVA").ConnectionManager;
        }
    }

    public IDTSConnectionManager100 ExceptionConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ExceptionConnection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String currentFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["currentFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FullInboundDirectory
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FullInboundDirectory"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String Subject
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["Subject"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String To
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["To"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0721bb5d52684600a21a98c30ea8893f.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{225DD62C-FC95-4D7A-B72A-356AC03734FE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0721bb5d52684600a21a98c30ea8893f</RootNamespace>
    <AssemblyName>SC_0721bb5d52684600a21a98c30ea8893f</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CommonClasses, Version=1.1.0.0, Culture=neutral, PublicKeyToken=1f7181b3d59d8c40, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\CommonClasses\1.1.0.0\CommonClasses.dll</HintPath>
    </Reference>
    <Reference Include="FileHelpers, Version=3.3.0.0, Culture=neutral, PublicKeyToken=3e0c08d59cc3d657, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\FileHelpers\1.1.0.0\FileHelpers.dll</HintPath>
    </Reference>
    <Reference Include="RGS.ArtivaGeneralPurpose, Version=1.20.0.0, Culture=neutral, PublicKeyToken=972530eacd4bf30a, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\RGS.ArtivaGeneralPurpose\1.1.0.0\RGS.ArtivaGeneralPurpose.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebuge0c940cd-73bf-4d58-9077-6a5c621d5306/4bb861a7-9eca-414a-a9b5-65cb1b67ddb1&quot;" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Settings.get_Default():SC_0721bb5d52684600a21a98c30ea8893f.Properties.Sett" +
    "ings")]

namespace SC_0721bb5d52684600a21a98c30ea8893f.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_0721bb5d52684600a21a98c30ea8893f</msb:CodeName>
		<msb:ProjectId>{398B7F04-BC0A-43AA-9F65-6B79D31988EE}</msb:ProjectId>
		<msb:DisplayName>SC_0721bb5d52684600a21a98c30ea8893f</msb:DisplayName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_0721bb5d52684600a21a98c30ea8893f.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0721bb5d52684600a21a98c30ea8893f")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0721bb5d52684600a21a98c30ea8893f")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0721bb5d52684600a21a98c30ea8893f.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0721bb5d52684600a21a98c30ea8893f.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGZdx2AAAAAAAAAAAOAAIiALATAAAEoAAAAIAAAAAAAAsmkA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAADAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGBpAABPAAAAAIAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAuEkAAAAgAAAASgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAgAAAAAYAAABMAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAUgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACU
aQAAAAAAAEgAAAACAAUAeDgAADAwAAABAAAAAAAAAKhoAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAANICKBAAAAoCFn0BAAAEAgJ7CgAABG86AAAGbxEAAApzEgAA
Cn0CAAAEAnsCAAAEbxMAAAoqAAAAEzAGAEUBAAABAAARAigUAAAKAnsBAAAELRUCewoAAARvOwAA
Bm8RAAAKKBUAAAoCewIAAAQsFgJ7AgAABG8WAAAKAnsCAAAEbxcAAAofEY02AAABJRZyAQAAcKIl
FwJ7CwAABG89AAAGoiUYcicAAHCiJRkCfAMAAAQoGAAACqIlGnJFAABwoiUbAnwHAAAEclEAAHAo
GQAACqIlHHJVAABwoiUdAnwEAAAEKBgAAAqiJR5yRQAAcKIlHwkCfAgAAARyUQAAcCgZAAAKoiUf
CnJ3AABwoiUfCwJ8BQAABCgYAAAKoiUfDHJFAABwoiUfDQJ8CQAABHJRAABwKBkAAAqiJR8OcqMA
AHCiJR8PAnwGAAAEKBgAAAqiJR8QcssAAHCiKBoAAAoKcxsAAAoCewsAAARvQAAABnLPAABwFAJ7
CwAABG8/AAAGBigcAAAKKgAAABswBgBLDwAAAgAAERQKAnsLAAAEbz4AAAYCewsAAARvPQAABigd
AAAKCwcoHgAACiwHBygfAAAKCgZ+GQAABCUtFyZ+GAAABP4GSgAABnMgAAAKJYAZAAAEKAEAACty
zwAAcAxyzwAAcA1yzwAAcBMEcs8AAHATBXLPAABwEwZyzwAAcBMHcs8AAHATCHLPAABwEwlyzwAA
cBMKcs8AAHATC3LPAABwEwxyzwAAcBMNcs8AAHATDnLPAABwEw9yzwAAcBMQcs8AAHATEXLPAABw
ExJyzwAAcBMTcs8AAHATFHLPAABwExVyzwAAcBMWcs8AAHATF3LPAABwExhyzwAAcBMZcs8AAHAT
GnLPAABwExtyzwAAcBMccs8AAHATHXLPAABwEx5zIgAAChMfcyMAAAoTIHMkAAAKEyFzJQAAChMi
cyYAAAoTI3MmAAAKEyRzJgAAChMlcyYAAAoTJnMnAAAKJm8oAAAKEys4MQcAABErbykAAAoTLHMq
AAAKEy1zKwAAChMucywAAAoTL3MtAAAKEzARLB9QHW8uAAAKby8AAAoTBBEfEQRvMAAACjrtBgAA
ESwfVxdvLgAACm8vAAAKEwURLCCgAAAAGG8uAAAKby8AAAoTCREFctEAAHAoMQAACiwaEQly1QAA
cCgxAAAKLAxy2wAAcBMeOKMAAAARBXLRAABwKDEAAAosFxEJcukAAHAoMQAACiwJcu8AAHATHit+
EQVy/QAAcCgxAAAKLBcRCXLVAABwKDEAAAosCXIBAQBwEx4rWREFcv0AAHAoMQAACiwXEQly6QAA
cCgxAAAKLAlyDwEAcBMeKzRyHQEAcBMeAhd9AQAABAJ7DQAABG8TAAAGAnsNAAAEcisBAHARBREJ
EQQoMgAACm8RAAAGESwWHwpvLgAACm8vAAAKDBEsHwofKG8uAAAKby8AAAoNESwfMh8Uby4AAApv
LwAACiYRLB9GHwpvLgAACm8vAAAKJhEsH1gYby4AAApvLwAACiYRLB9aHwpvLgAACm8vAAAKEwYR
LB9kHyhvLgAACm8vAAAKEwcRLCCMAAAAHxRvLgAACm8vAAAKEwgRLCCiAAAAHwlvLgAACm8vAAAK
EwoRLCCrAAAAHyRvLgAACm8vAAAKEwsRLCDPAAAAHyNvLgAACm8vAAAKEwwRLCDyAAAAHwpvLgAA
Cm8vAAAKJhEsIPwAAAAXby4AAApvLwAACiYRLCD9AAAAGW8uAAAKby8AAAoTDREsIAABAAAZby4A
AApvLwAACiYRLCADAQAAHm8uAAAKby8AAAoTDhEsIAsBAAAeby4AAApvLwAAChMPESwgEwEAAB5v
LgAACm8vAAAKExARLCAbAQAAHm8uAAAKby8AAAoTEREsICMBAAAeby4AAApvLwAAChMSESwgKwEA
AB8Pby4AAApvLwAACiYRLCA6AQAAHm8uAAAKby8AAAoTExEsIEIBAAAeby4AAApvLwAAChMUESwg
SgEAAB5vLgAACm8vAAAKExURLCBXAQAAHW8uAAAKby8AAAoTFhEsIF4BAAAXby4AAApvLwAAChMX
ESwgOgEAAB5vLgAACm8vAAAKExgRLCBCAQAAHm8uAAAKby8AAAoTGREsIEoBAAAXby4AAApvLwAA
ChMaESwgSwEAAB5vLgAACm8vAAAKExsRLCBXAQAAHW8uAAAKby8AAAoTHBEsIF4BAAAXby4AAApv
LwAAChMdES4IfTMAAAoJF408AAABJRYfIJ1vNAAAChMxETGOaRgxPxEuETEWmnJQAgBwETEXmig1
AAAKby8AAAp9NgAAChEuCRYRLns2AAAKbzcAAApvOAAACm8vAAAKfTkAAAorORExjmkYMyIRLhEx
FppvLwAACn02AAAKES4RMReaby8AAAp9OQAACisQES4RMRaaby8AAAp9OQAAChEtEQR9OgAAChEt
ER59OwAAChEvEQV9PAAAChEuEQZ9PQAAChEtclQCAHARBygdAAAKfT4AAAoRLhEHfT8AAAoRMBEH
fUAAAAoRLhEIfUEAAAoRMBEIfUIAAAoRLREJfUMAAAoRLhEJfUQAAAoRMBEJfUUAAAoRMBEJfUYA
AAoRLhEKfUcAAAoRMBEKfUgAAAoRMBELfUkAAAoRDBeNPAAAASUWHyCdbzQAAAoTMhEyjmkYMTAR
MBEyFppyUAIAcBEyF5ooNQAACm8vAAAKfUoAAAoRMBEyGJpvLwAACn1LAAAKKycRMo5pGDMgETAR
Mhaaby8AAAp9SgAAChEwETIXmm8vAAAKfUsAAAoRMHJuAgBwfUwAAAoRDXKWAgBwKDEAAAosCBEu
F31NAAAKETACEQ4oBAAABn1OAAAKES0CEQ8oBAAABn1PAAAKAhEQKAQAAAYTMxEtETN9UAAAChEw
ETN9UQAAChEtAhERKAQAAAZ9UgAAChEtAhESKAYAAAZ9UwAAChEFctEAAHAoMQAACiw/ETACERMo
BgAABn1UAAAKETACERQoBgAABn1VAAAKETACERUoBAAABn1WAAAKES8RFn1XAAAKES8RF31YAAAK
EQVy/QAAcCgxAAAKLFkRMAIRGCgGAAAGfVUAAAoRMAIRGSgEAAAGfVYAAAoRGnKeAgBwKDEAAAos
DBEwcqICAHB9WQAAChEvAhEbKAYAAAZ9WgAAChEvERx9VwAAChEvER19WAAAChEvAnsLAAAEbz0A
AAZ9WwAAChEtKFwAAApzXQAACn1eAAAKES1ywgIAcH1fAAAKES8oXAAACnNdAAAKfWAAAAoRLXxT
AAAKKGEAAAotCxEwe1UAAAoTNCsJES17UwAAChM0ES8RNH1iAAAKES0RNH1jAAAKES0RNH1kAAAK
ES0RNH1lAAAKESMRBG9mAAAKJhEfEQQRLW9nAAAKESARBBEub2gAAAoRIREEES9vaQAAChEiEQQR
MG9qAAAKEStvawAACjrD+P//3gwRKywHEStvbAAACtxzbQAAChMnctICAHACewIAAAQUc24AAAoT
NQJ7AgAABG9vAAAKFy4LAnsCAAAEbxMAAAoRNSAAo+ERb3AAAAoRNW9xAAAKEzYRJxE2b3IAAAre
GBE2LAcRNm9sAAAK3BE1LAcRNW9sAAAK3BEnb3MAAApvdAAACjrbAAAAER9vdQAAChM3OJgAAAAS
Nyh2AAAKEzgCEjgodwAACigCAAArAhEgEjgodwAACns6AAAKb3gAAAooAwAAKwIRIRI4KHcAAAp7
OgAACm95AAAKKAQAACsCESISOCh3AAAKezoAAApvegAACigFAAArAgJ7CAAABBEiEjgodwAACns6
AAAKb3oAAAp7TgAACih7AAAKfQgAAAQCAnsEAAAEF1h9BAAABBI3KHwAAAo6XP///94OEjf+FgoA
ABtvbAAACtwCAnsIAAAEfQcAAAQCAnsEAAAEfQMAAAQqESdvcwAACm99AAAKEzk48AIAABE5b34A
AAp0IAAAARM6ETpyPQYAcG9/AAAKfoAAAAouIRE6cj0GAHBvfwAACiwTETpyPQYAcG9/AAAKb4EA
AAorBXLPAABwEygROnJLBgBwb38AAAp+gAAACi4hETpySwYAcG9/AAAKLBMROnJLBgBwb38AAAql
NwAAASsBFhE6cl0GAHBvfwAACn6AAAAKLiEROnJdBgBwb38AAAosExE6cl0GAHBvfwAACm+BAAAK
KwVyzwAAcBMpETpycwYAcG9/AAAKfoAAAAouIRE6cnMGAHBvfwAACiwTETpycwYAcG9/AAAKb4EA
AAorBXLPAABwEyoXQPYBAAARIxEpb4IAAAotWhElESlvggAACi1Pc4MAAAoTOxE7ESh9hAAAChE7
coEGAHB9hQAACgIROygGAAArAgJ7BgAABBdYfQYAAAQCAnsDAAAEF1h9AwAABBElESlvZgAACiY4
kQEAABEfESlvMAAACjmDAQAAESoRHxEpb4YAAAp7OwAACiiHAAAKOQUBAAARJREpb4IAAAotPHOD
AAAKEzwRPBEofYQAAAoRPHKBBgBwfYUAAAoCETwoBgAAKwICewYAAAQXWH0GAAAEESURKW9mAAAK
JhEkESlvggAACjoUAQAAAhEfESlvhgAACigCAAArAhEgESlveAAACigDAAArAhEhESlveQAACigE
AAArAhEiESlvegAACigFAAArAgJ7BAAABBdYfQQAAAQCAnsIAAAEESIRKW96AAAKe04AAAooewAA
Cn0IAAAEAgJ7AwAABBdYfQMAAAQCAnsDAAAEF1h9AwAABAICewcAAAQRIhEpb3oAAAp7TgAACih7
AAAKfQcAAAQRJBEpb2YAAAomK2QRJhEpb2YAAAomAgJ7BQAABBdYfQUAAAQCAnsJAAAEESIRKW96
AAAKe04AAAooewAACn0JAAAEAgJ7AwAABBdYfQMAAAQCAnsHAAAEESIRKW96AAAKe04AAAooewAA
Cn0HAAAEETlvawAACjoE/f//3hUROXUiAAABEz0RPSwHET1vbAAACtwRI2+IAAAKEz448wEAABI+
KIkAAAoTPxEncokGAHARP3KnBgBwKDUAAApvigAAChNAEScbjTYAAAElFnKJBgBwoiUXET+iJRhy
qwYAcKIlGREfET9vhgAACns7AAAKoiUacqcGAHCiKBoAAApvigAAChNBEScbjTYAAAElFnLLBgBw
oiUXET+iJRhyBwcAcKIlGREfET9vhgAACns7AAAKoiUacqcGAHCiKBoAAApvigAAChNCEUAsLBFA
KAcAACsWMSIRQSwKEUEoBwAAKxYwFBFCOSkBAAARQigHAAArFj4cAQAAESQRP2+CAAAKOg4BAAAR
JhE/b4IAAAo6AAEAAAIRHxE/b4YAAAooAgAAKwIRIBE/b3gAAAooAwAAKwIRIRE/b3kAAAooBAAA
KwIRIhE/b3oAAAooBQAAKxFCLGYRQigHAAArFjFcAgJ7BQAABBdYfQUAAAQCAnsJAAAEESIRP296
AAAKe04AAAooewAACn0JAAAEAgJ7AwAABBdYfQMAAAQCAnsHAAAEESIRP296AAAKe04AAAooewAA
Cn0HAAAEK1oCAnsEAAAEF1h9BAAABAICewgAAAQRIhE/b3oAAAp7TgAACih7AAAKfQgAAAQCAnsD
AAAEF1h9AwAABAICewcAAAQRIhE/b3oAAAp7TgAACih7AAAKfQcAAAQSPiiMAAAKOgH+///eDhI+
/hYMAAAbb2wAAArcKgBBlAAAAgAAAGABAABEBwAApAgAAAwAAAAAAAAAAgAAAPgIAAALAAAAAwkA
AAwAAAAAAAAAAgAAAMoIAABFAAAADwkAAAwAAAAAAAAAAgAAADUJAACrAAAA4AkAAA4AAAAAAAAA
AgAAABUKAAADAwAAGA0AABUAAAAAAAAAAgAAADYNAAAGAgAAPA8AAA4AAAAAAAAAEzAFAGAAAAAB
AAARAxeNPAAAASUWHzCdb40AAApvLwAACgoDKI4AAAotCAZvNwAACi0Gfo8AAAoqBm83AAAKGDAR
BnIlBwBwKB0AAAookAAACioGBm83AAAKGFlyywAAcG+RAAAKKJAAAAoqEzADAFcAAAAAAAAAAyiO
AAAKLAZyzwAAcCoDbzcAAAoeLxQDFhdvLgAACnItBwBwKIcAAAotAwMrC3ItBwBwAygdAAAKEAED
bzcAAAoeMgMDKwwDGHItBwBwb5EAAAoQAQMqABMwBQAzAAAAAwAAEXIxBwBwc5IAAAoKAgMoBQAA
BnI9BwBwBhYSASiTAAAKLAcHc10AAAoqEgL+FQkAABsIKgATMAUAvgAAAAEAABFzlAAACiUDb5UA
AAooCAAAK3JPBwBwcs8AAHBvlwAACgoGF408AAABJRYfLJ1vNAAAChaaBnLPAABwb5cAAApyVQcA
cHLPAABwb5cAAApyYQcAcHLPAABwb5cAAApyywAAcHLPAABwb5cAAApyLQcAcHLPAABwb5cAAApy
ZQcAcHLPAABwb5cAAApyaQcAcHLPAABwb5cAAAoomAAACiwBKgJ7DAAABG8NAAAGAnsMAAAEBm+Z
AAAKbwsAAAYqAAATMAUAvgAAAAEAABFzlAAACiUDb5UAAAooCAAAK3JPBwBwcs8AAHBvlwAACgoG
F408AAABJRYfLJ1vNAAAChaaBnLPAABwb5cAAApyVQcAcHLPAABwb5cAAApyYQcAcHLPAABwb5cA
AApyywAAcHLPAABwb5cAAApyLQcAcHLPAABwb5cAAApyZQcAcHLPAABwb5cAAApyaQcAcHLPAABw
b5cAAAoomAAACiwBKgJ7EAAABG8lAAAGAnsQAAAEBm+ZAAAKbyMAAAYqHgIoNAAABioqAgMEBSia
AAAKKiYCFgMomwAACipaAywIAhYonAAACipybQcAcHOdAAAKeh4CKJ4AAAoqHgIonwAACioeAiig
AAAKKn4CKKEAAAoCAnM5AAAGfQoAAAQCAnM8AAAGfQsAAAQqBioTMAIAtwAAAAAAAAACewwAAAQs
EgJ7DAAABG8OAAAGAhR9DAAABAJ7DQAABCwSAnsNAAAEbxQAAAYCFH0NAAAEAnsOAAAELBICew4A
AARvGgAABgIUfQ4AAAQCew8AAAQsEgJ7DwAABG8gAAAGAhR9DwAABAJ7EAAABCwSAnsQAAAEbyYA
AAYCFH0QAAAEAnsRAAAELBICexEAAARvLAAABgIUfREAAAQCexIAAAQsEgJ7EgAABG8yAAAGAhR9
EgAABCoAEzAFAEsBAAAEAAARFgo4KgEAAAQGlA4EcgoIAHAoogAACjMZAgUGmgIEBpQoowAACg4E
cwoAAAZ9DAAABAQGlA4EchwIAHAoogAACjMZAgUGmgIEBpQoowAACg4EcxAAAAZ9DQAABAQGlA4E
cjAIAHAoogAACjMZAgUGmgIEBpQoowAACg4EcxYAAAZ9DgAABAQGlA4EckQIAHAoogAACjMZAgUG
mgIEBpQoowAACg4EcxwAAAZ9DwAABAQGlA4EclAIAHAoogAACjMZAgUGmgIEBpQoowAACg4EcyIA
AAZ9EAAABAQGlA4EcmYIAHAoogAACjMZAgUGmgIEBpQoowAACg4EcygAAAZ9EQAABAQGlA4EcnII
AHAoogAACjMZAgUGmgIEBpQoowAACg4Ecy4AAAZ9EgAABAYXWAoGAz/P/v//Am84AAAGAm81AAAG
Aig2AAAGKjoCKKQAAAoCA30TAAAEKoICexMAAARvpQAACm+mAAAKcoIIAHBvpwAACm+oAAAKKoIC
exMAAARvpQAACm+mAAAKcpAIAHBvpwAACm+oAAAKKjoCKKQAAAoCA30UAAAEKpYCexQAAARvqQAA
CnK4CABwb6oAAAooqwAACm+sAAAKdDYAAAEqlgJ7FAAABG+pAAAKctAIAHBvqgAACiirAAAKb6wA
AAp0NgAAASqWAnsUAAAEb6kAAApy+ggAcG+qAAAKKKsAAApvrAAACnQ2AAABKpYCexQAAARvqQAA
CnIKCQBwb6oAAAooqwAACm+sAAAKdDYAAAEqHgIopAAACiqufhUAAAQtHnIQCQBw0A0AAAIorQAA
Cm+uAAAKc68AAAqAFQAABH4VAAAEKhp+FgAABCoeAoAWAAAEKhp+FwAABCoeAiiwAAAKKi5zRgAA
BoAXAAAEKi5zSQAABoAYAAAEKnoDcoIJAHBvsQAACi0PA3KKCQBwb7EAAAoW/gEqFipCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAkEAAAI34AAJAQAAAYEQAAI1N0cmluZ3MAAAAA
qCEAAJQJAAAjVVMAPCsAABAAAAAjR1VJRAAAAEwrAADkBAAAI0Jsb2IAAAAAAAAAAgAAAVcVogkJ
HwAAAPoBMwAWAAABAAAAUgAAAA8AAAAZAAAASgAAADAAAACxAAAAEQAAAAQAAAALAAAAFwAAABgA
AAANAAAAAQAAAAsAAAABAAAAAQAAAAIAAAAIAAAAAgAAAAAAnQgBAAAAAAAGAP8GzgwGAJMHzgwG
AEsGlQwPAEINAAAGAHgGXQkGAOIGXQkGAMMGXQkGAHoHXQkGAB8HXQkGADgHXQkGAI8GXQkGAKoG
EAgKAFMHFwQOAK4JPAIGAHYI9ggGAB0BTQIGAI8BTQISAMEAqAwSANcAqAwSAAEAqAwSAJwBqAwW
ADkBTQIOAGEDBAIGACsBTQIGABIB9ggGAPUD9ggOAOECPAIOABULPAJHAG8MAAAGAIABTQIGAGAM
AA4OACgQBAISANQBqAwGAHYD9ghbAG8MAAAGACUKOAkSALMEqAwGABMGzgwGAIwO9ggGAHkB9ggK
ANALFwQaAGoLFwQKADYKFwQKAPEOFwQeAH8ADwwGAC4GlQwGAOEL7gwiAL4FfggiAF8GfggiAOcE
IwkOAKEJCwoGALED+AEiAPcOfggGAE0I9ggGAHMB9ggmAFALrw0GAEMBTQIWAGsDugoGAEIL2A8G
AMYK9ggOAE0JPAIOANMFBAIOANcCCwoOAAkLBAIOAI8JBAIOAMwEBAIGAMUI9ggGAIcP9ggGADIL
9ggGAJYNOAkqAAoEJw4GAOEJ9gguABoANwwuAEMANwwuAGYANwweAJgADwweADMADwyzAPgPAAAe
AKkADwwGAHQE9ggGAIID9ggGAHMQXQkAAAAAwAEAAAAAAQABAAEAEAATCQAAKAABAAEAAQAQAFwL
AAClAAoACgABABAAlgsAAKUACgAQAAEAEADACwAApQAKABYAAQAQAHkLAAClAAoAHAABABAAhQsA
AKUACgAiAAEAEAC0CwAApQAKACgAAQAQAKYLAAClAAoALgABABAA0w4AALEACgA0AAEAEAATDgAA
nQATADkAAQAQAIwNAACdABQAPAAAABAA9QxRDZ0AFQBBAAABEADiDVENyQAXAEUAAyEQADgCAACd
ABgASAABAL8CmAEBAB4JZgMBAOwNagMBALkQagMBAKYQagMBAJUQagMBAOsNmwEBALgQmwEBAKUQ
mwEGABMObQMGAIwNcQMGAFwLdQMGAJYLeQMGAMALfQMGAHkLgQMGAIULhQMGALQLiQMGAKYLjQMB
AOEOkQMBAOEOkQMRAAIJlgMRAKMEmwMRADwDoAM2ALwBpAMWAOsAqANQIAAAAADGALEHBgABAIgg
AAAAAMYAvAcGAAEA3CEAAAAAxgBcDgYAAQDIMQAAAACBAGYQsQMBADQyAAAAAIEAmwUpAAIAmDIA
AAAAgQBxBbcDAwDYMgAAAACBAEAQwQMEAKQzAAAAAIEANxDBAwUAbjQAAAAAhhh6DAYABgB2NAAA
AACGGHoMxgIGAIE0AAAAAIYIEAIQAAkAizQAAAAAhgjMCMgDCgCiNAAAAACGADAQBgALAKo0AAAA
AIYApg4GAAsAsjQAAAAAhgCpDrkBCwB2NAAAAACGGHoMxgILAIE0AAAAAIYIEAIQAA4AizQAAAAA
hgjMCMgDDwCiNAAAAACGADAQBgAQAKo0AAAAAIYApg4GABAAsjQAAAAAhgCpDrkBEAB2NAAAAACG
GHoMxgIQAIE0AAAAAIYIEAIQABMAizQAAAAAhgjMCMgDFACiNAAAAACGADAQBgAVAKo0AAAAAIYA
pg4GABUAsjQAAAAAhgCpDrkBFQB2NAAAAACGGHoMxgIVAIE0AAAAAIYIEAIQABgAizQAAAAAhgjM
CMgDGQCiNAAAAACGADAQBgAaAKo0AAAAAIYApg4GABoAsjQAAAAAhgCpDrkBGgB2NAAAAACGGHoM
xgIaAIE0AAAAAIYIEAIQAB0AizQAAAAAhgjMCMgDHgCiNAAAAACGADAQBgAfAKo0AAAAAIYApg4G
AB8AsjQAAAAAhgCpDrkBHwB2NAAAAACGGHoMxgIfAIE0AAAAAIYIEAIQACIAizQAAAAAhgjMCMgD
IwCiNAAAAACGADAQBgAkAKo0AAAAAIYApg4GACQAsjQAAAAAhgCpDrkBJAB2NAAAAACGGHoMxgIk
AIE0AAAAAIYIEAIQACcAizQAAAAAhgjMCMgDKACiNAAAAACGADAQBgApAKo0AAAAAIYApg4GACkA
sjQAAAAAhgCpDrkBKQC6NAAAAACGGHoMBgApANo0AAAAAMYBRQ4GACkA3DQAAAAAgQCXAgYAKQCg
NQAAAADGAMMPzQMpANo0AAAAAMYBXA4GAC0A9zYAAAAAhhh6DNsDLQAGNwAAAACGCMkB/QIuACc3
AAAAAIYIvQn9Ai4ASDcAAAAAhhh6DNsDLgBXNwAAAACGCKYDHAAvAH03AAAAAIYIfBAcAC8AozcA
AAAAhgiTDhwALwDJNwAAAACGCB4KHAAvAO83AAAAAIMYegwGAC8A9zcAAAAAkwjdC+IDLwAjOAAA
AACTCIsE6AMvACo4AAAAAJMIlwTuAy8AMjgAAAAAlgi7DvUDMAA5OAAAAACGGHoMBgAwAEE4AAAA
AJEYgAz6AzAATTgAAAAAkRiADPoDMADvNwAAAACGGHoMBgAwAFk4AAAAAIMA9QA0AzAAAAABAG4O
AAABAIcMAAABAPICAAABAO0CAAABAO0CAAABANYLAAACAL0NAAADAEQKAAABAN8HAAABAN8HAAAB
ANYLAAACAL0NAAADAEQKAAABAN8HAAABAN8HAAABANYLAAACAL0NAAADAEQKAAABAN8HAAABAN8H
AAABANYLAAACAL0NAAADAEQKAAABAN8HAAABAN8HAAABANYLAAACAL0NAAADAEQKAAABAN8HAAAB
AN8HAAABANYLAAACAL0NAAADAEQKAAABAN8HAAABAN8HAAABANYLAAACAL0NAAADAEQKAAABAN8H
AAABAN8HAAABAEsOAAACAIsMAAADAB8OAAAEAEQKAAABAPcOAAABAPcOAAABAN8HAAABAPICCQB6
DAEAEQB6DAYAGQB6DAoAKQB6DBAAMQB6DBAAOQB6DBAAQQB6DBAASQB6DBAAUQB6DBAAWQB6DBAA
YQB6DBAAaQB6DAYAMQF6DAYAcQF6DAYAiQF6DBUAYQGxBwYAaQE2CBwAcQB6DBAAmQEOCQYAYQG8
BwYAoQEMBiQAmQH/BAYAqQEeBQYAuQFLCBwAeQBLCCkAsQFwDi4AwQF6DAYAwQGUCDQAsQFwDusA
oQE+DvEAoQGlDfYADAB6DAcB0QF5BA0BFAB6DAYAHAB6DAYAJAB6DAYALAB6DAYANAB6DAYA2QF6
DAYAPABsDFUBRAABD2QBkQB6DAYAmQB6DAYAoQB6DAYAqQB6DAYAsQFUCGkBsQH9CBwAFABaEG8B
sQHtEHUBsQF3DnsBmQD2CoMBsQG1DoYBsQFwDo0BmQDQA4MBsQFeCJQBsQHlB2kBmQDHA4MBkQDL
CoMBkQDjAYMBoQBoAoMBmQDhCoMBkQD7CYMBmQD+A4MBqQBKAYMBmQDoEIMBqQDGEIMBkQCrBYMB
mQAGBoMBqQD5BYMBqQDjBYMBmQBWA4MBqQCVCoMBqQBgAYMBqQDbEIMBqQCpCoMBqQBcBIMBmQAz
DpgBqQAlD5sBkQA3D5sBkQAPA5sBqQAmA5sBkQBFD5sBkQB5BZ8BqQBiBZ8BqQBVBZ8BqQDHDpsB
oQBNBIMBoQAXD4MBqQA4BIMBoQCrAp8BoQC2A4MB0QBQEKcBTAB6DLMBkQAuBZ8BkQBoBIMBoQCM
Ap8BTADSB7kBoQBFBZ8BkQA5BZ8BkQCLBZ8BkQAmBZ8BNACIAm8BFACIAr0BHACIAr0BJACIAr0B
LACIAr0B+QDPD7kBEQEeBQYAuQB6DAYA2QB6DMUBmQG0Bc8B+QGwDwEA2QAkC9UBuQCDAtoBuQBT
DuEBEQIND5QBFABsDOcBVAABD/oBXADIBw0CHADkCBcCJADkCBcCLADkCBcCeQDVCS0CVADPD7kB
EQJsDDYC+QABDzsCAQHkCD8CGQLZB0QCOQFLCBwANAD3DW8BCQF6DAYACQF5AoMBCQFMA4MBFADk
CBcCsQH5EHUBNABsDE8CZAABD2QBuQCfDmAC0QERD2gCZADPD7kBsQF2D3kCsQEHEfEAeQAxCpsB
IQJ0CH8CsQGAD4UCIQF6DBAA0QB+DpkCbAB6DAYAbACIArMBOQIqCLACsQH0AsACsQH8AvEAsQEH
DBwASQF6DMYCSQHtCNICSQHcCAEAQQJ6DBAASQEwEAYASQGmDgYASQGpDrkBYQF6DAYAYQHsAdwC
YQHRDeQCOQF6DAYAYQEZAuoCSQJvCfACUQLaA/YCWQLxC/0CYQGADQMDYQLkCAkDYQETEBADaQLk
DxYDgQKUAx0DgQJvECYDeQF6DCwDkQF6DAYAsQFpCDQDLgALAB0ELgATACYELgAbAEUELgAjAE4E
LgArAHcELgAzAHcELgA7AHcELgBDAE4ELgBLAH0ELgBTAHcELgBbAJQEQwBjANwEowFzANwE4wFr
ANwEqQJ7AEUEyQJ7AEUE4QJrANwEIABCAIsC2AIDAAEABAADAAUABQAGAAcABwAJAAgACwAJAA0A
CwAPAAwAEQANABUADgAXAAAAKgL+AwAA0AgCBAAAKgL+AwAA0AgCBAAAKgL+AwAA0AgCBAAAKgL+
AwAA0AgCBAAAKgL+AwAA0AgCBAAAKgL+AwAA0AgCBAAAKgL+AwAA0AgCBAAAzQEGBAAAwQkGBAAA
qgP+AwAAgBD+AwAAlw7+AwAAIgr+AwAA4QsMBAAAqwQSBAAAvw4YBAEACwADAAEADAAFAAEAEQAH
AAEAEgAJAAEAFwALAAEAGAANAAEAHQAPAAEAHgARAAEAIwATAAEAJAAVAAEAKQAXAAEAKgAZAAEA
LwAbAAEAMAAdAAIAOgAfAAIAOwAhAAIAPQAjAAIAPgAlAAIAPwAnAAIAQAApAAIAQgArAAIAQwAt
AAEARAAtAAIARQAvAP8AKQExATkBQQFJAU8BXgGsAfIBBQJZAqgCBIAAAAEAAACbHos9AAAAAAAA
7AcAAAQAAAAAAAAAAAAAADkDLwIAAAAACwAAAAAAAAAAAAAAQgNZDwAAAAAEAAAAAAAAAAAAAAA5
AwQCAAAAAAEAAQAAAAAAAAAAAEsDBQUAAAAABAAAAAAAAAAAAAAAOQN/BAAAAAALAAAAAAAAAAAA
AABCA48PAAAAAAsAAAAAAAAAAAAAAEIDTgoAAAAABAAAAAAAAAAAAAAAOQP2CAAAAAABAAEAAAAA
AAAAAABUA68NAAAAAAMAAgAHAAAAAAAAAF0DJw4AAAAACwAAAAAAAAAAAAAAQgNxCgAAAAAAAAAA
AQAAAP8MAAAPAAIAAAAAAA8AAgIAAAAAEQACAkMAJQEOABICDgAeAg4AIwIOACgCEABJAhcBcwIt
AbsCAQCVAAIAlQAAAAAAAFBsYWNlbWVudEluZm9ybWF0aW9uXzEwMABJRFRTQ29tcG9uZW50TWV0
YURhdGExMDAASURUU1ZhcmlhYmxlMTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24x
MDAASURUU1J1bnRpbWVDb25uZWN0aW9uMTAwAElEVFNDb25uZWN0aW9uTWFuYWdlcjEwMABJRFRT
VmFyaWFibGVzMTAwAElEVFNFdmFsdWF0b3JDb250ZXh0MTAwAEFjY291bnRJbmZvcm1hdGlvbl8x
MABQYXJ0eUluZm9ybWF0aW9uXzIwADw+OV9fMTFfMAA8Q3JlYXRlTmV3T3V0cHV0Um93cz5iX18x
MV8wAE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBJRW51bWVyYXRvcmAxAEhhc2hTZXRgMQBMaXN0
YDEAU2VydmljZVRvQWRkcmVzc0xpbmUxAEJpbGxUb0FkZHJlc3NMaW5lMQBJbnQzMgBGdW5jYDIA
S2V5VmFsdWVQYWlyYDIARGljdGlvbmFyeWAyAENhYmxlQ2VsbFV0aWxpdHlJbmZvcm1hdGlvbl84
MDkAPD45ADxNb2R1bGU+AGdldF9BUlRJVkEAQ2xvc2VBY2NvdW50X0MAQ2xpZW50SUQAR2V0T3V0
cHV0SUQAU3lzdGVtLklPAFQAU3lzdGVtLkRhdGEAc2V0X0RhdGEAZ2V0X0NvbXBvbmVudE1ldGFE
YXRhAG1zY29ybGliADw+YwBTeXN0ZW0uRGF0YS5PZGJjAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5l
cmljAFBsYWNlbWVudEdyb3VwSWQAQWNjb3VudElkAExvYWQAQWRkAERhdGVMb2FkZWQATWFya091
dHB1dHNGaW5pc2hlZABEYXRlQWNjb3VudEFzc2lnbmVkAF9leGNlcHRpb25SZXBvcnRDcmVhdGVk
AERiQ29tbWFuZABPZGJjQ29tbWFuZAByZWNvcmQAUmVwbGFjZQBJc051bGxPcldoaXRlU3BhY2UA
UHJpbmNpcGFsSW5pdGFsQmFsYW5jZQBTZXJ2aWNlQWNjb3VudEJhbGFuY2UAZGVmYXVsdEluc3Rh
bmNlAENsb3NlQ29kZQBQb3N0YWxDb2RlAERhdGFUYWJsZQBFbnVtZXJhYmxlAElEaXNwb3NhYmxl
AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9jdXJyZW50RmlsZQBJbmNv
bWluZ0ZpbGVOYW1lAExhc3ROYW1lAEZpcnN0TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlvbkJ5TmFt
ZQBEYXRlVGltZQBBZGRyZXNzTGluZQBDb21tb25FbmdpbmUATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUGlwZWxpbmUATWFzdGVyVHJhbnNhdGlvblR5cGUAQ29sbGVjdGlvblR5cGUAUHJvZHVjdFR5
cGUAU09MQWdyZWVtZW50VHlwZQBXaGVyZQBTeXN0ZW0uQ29yZQBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQByZXNvdXJjZUN1bHR1cmUAR2VuZXJhbFB1cnBvc2VSZWNvcmRCYXNlAEludGVybmFsRGF0
YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAFJHUy5BcnRpdmFH
ZW5lcmFsUHVycG9zZQBEaXNwb3NlAFNPTERhdGUATGlzdGVkRGF0ZQBTZXJ2aWNlRGF0ZQBCS0Vm
ZmVjdGl2ZURhdGUATGFzdEJpbGxEYXRlAERpc2Nvbm5lY3REYXRlAGdldERhdGUAQ2xpZW50TGFz
dFBheURhdGUARGVsaW5xdWVuY3lEYXRlAGdldEZvcm1hdGVkZGF0ZQBTT0xTdGF0ZQBnZXRfU3Rh
dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29ubmVjdGlvblN0YXRlAFNlcnZpY2VUb0FkZHJlc3NT
dGF0ZQBCaWxsVG9BZGRyZXNzU3RhdGUARGVsZXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRl
AERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFy
a0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9u
QXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0
aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRB
dHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlD
b21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFByZUV4ZWN1dGUA
UG9zdEV4ZWN1dGUAZ2V0X1ZhbHVlAGdldF9IYXNWYWx1ZQB2YWx1ZQBSZW1vdmUAU0NfMDcyMWJi
NWQ1MjY4NDYwMGEyMWE5OGMzMGVhODg5M2YAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBXcml0
ZVN0cmluZwBnZXRfQ29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBTdWJzdHJpbmcAZ2V0X0xlbmd0
aABTdGFydHNXaXRoAFRvRGVjaW1hbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU2VuZE1haWwAU0Nf
MDcyMWJiNWQ1MjY4NDYwMGEyMWE5OGMzMGVhODg5M2YuZGxsAERCTnVsbABzZXRfRGF0YV9Jc051
bGwAU2V0TnVsbABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0AVHJpbQByZXNvdXJjZU1hbgBPcGVu
AFNjcmlwdE1haW4AY29ubgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlv
bgBPZGJjVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AZ2V0X1J1bnRpbWVDb25uZWN0aW9u
Q29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBEYkNvbm5lY3Rpb24AT2RiY0Nvbm5lY3Rpb24A
Z2V0X0V4Y2VwdGlvbkNvbm5lY3Rpb24Ab3BfQWRkaXRpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2Vw
dGlvbgBEZWJ0RGVzY3JpcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAGdldF9UbwBDdWx0dXJlSW5m
bwBaZXJvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVu
dGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAAU2VydmljZVRvQWRk
cmVzc1ppcABCaWxsVG9BZGRyZXNzWmlwAFN5c3RlbS5MaW5xAENoYXIAQ2xpZW50UmVmZXJlbmNl
TnVtYmVyAEFsdGVybmF0ZVBob25lTnVtYmVyAFByaW1hcnlQaG9uZU51bWJlcgBJRGF0YVJlYWRl
cgBPZGJjRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAElGb3JtYXRQcm92aWRlcgBTdHJpbmdCdWls
ZGVyAEVtYWlsU2VuZGVyAE91dHB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIATGVnYWxCdWZmZXIA
Q29sbGF0ZXJhbEJ1ZmZlcgBFeGNlcHRpb25CdWZmZXIAQ29tYWtlckJ1ZmZlcgBOb3Rlc0J1ZmZl
cgBQbGFjZW1lbnRCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0Nv
bm5lY3Rpb25NYW5hZ2VyAFRvVXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5X
cmFwcGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIASUVudW1lcmF0
b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IAc3RyAE91dHB1dElEcwBTeXN0ZW0uRGlhZ25v
c3RpY3MAUkdTLkFydGl2YUdlbmVyYWxQdXJwb3NlLkRhdGEuUmVjb3JkcwBTeXN0ZW0uUnVudGlt
ZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMDcyMWJiNWQ1MjY4NDYwMGEy
MWE5OGMzMGVhODg5M2YuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01v
ZGVzAFNDXzA3MjFiYjVkNTI2ODQ2MDBhMjFhOThjMzBlYTg4OTNmLlByb3BlcnRpZXMAZ2V0X1Jl
YWRPbmx5VmFyaWFibGVzAERhdGVUaW1lU3R5bGVzAFJlYWRMaW5lcwBDb21tb25DbGFzc2VzAEJ1
ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBzRmlsZVRvdGFscwBD
b250YWlucwBTeXN0ZW0uQ29sbGVjdGlvbnMAQ29ubmVjdGlvbnMAQnVmZmVycwBGaWxlSGVscGVy
cwBJc0J1c2luZXNzAEV4aXN0cwBGaW5pc2hPdXRwdXRzAGdldF9Sb3dzAENyZWF0ZU5ld091dHB1
dFJvd3MAQ29uY2F0AEZvcm1hdABUcnlQYXJzZUV4YWN0AE9iamVjdABnZXRfU3ViamVjdABTZWxl
Y3QAU2V0RW5kT2ZSb3dzZXQAU3BsaXQAZ2V0X0RlZmF1bHQAV3JpdGVPZmZBbXQAVXNlckNvbXBv
bmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AGdldF9DdXJyZW50AGdldF9Db3Vu
dABUeXBlT2ZBY2NvdW50AFRyYW5zYWN0aW9uQW1vdW50AEN1cnJlbnRBbW91bnQAQ2xpZW50TGFz
dFBheUFtb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AFRyaW1TdGFydABJbnNlcnQA
Q29udmVydABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABzZXRfQ29tbWFuZFRpbWVv
dXQAUHJpbWVPdXRwdXQATW92ZU5leHQAU3lzdGVtLlRleHQAR2V0VmFsdWVXaXRoQ29udGV4dABT
Y3JpcHRDb21wb25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABEYXRhUm93AEFk
ZFJvdwBBZGRNdFJvdwBBZGRQbGFjZW1lbnRSb3cAZ2V0X1RvZGF5AENvbnRhaW5zS2V5AGdldE1v
bmV5AGdldF9Bc3NlbWJseQBnZXRfRnVsbEluYm91bmREaXJlY3RvcnkAQ2xvc2VkSW52ZW50b3J5
AHNFeGlzdGluZ0ludmVudG9yeQBzTmV3SW52ZW50b3J5AFNlcnZpY2VUb0FkZHJlc3NDaXR5AEJp
bGxUb0FkZHJlc3NDaXR5AG9wX0VxdWFsaXR5AG9wX0luZXF1YWxpdHkASXNOdWxsT3JFbXB0eQAA
AAAAJUMAbABpAGUAbgB0ACAARgBpAGwAZQAgAE4AYQBtAGUAOgAgAAAdCgBGAGkAbABlACAAVABv
AHQAYQBsAHMAOgAgAAALIABhAG4AZAAgAAADQwAAIQoATgBlAHcAIABJAG4AdgBlAG4AdABvAHIA
eQA6ACAAACsKAEUAeABpAHMAdABpAG4AZwAgAEkAbgB2AGUAbgB0AG8AcgB5ADoAIAAAJwoAQwBs
AG8AcwBlAGQAIABJAG4AdgBlAG4AdABvAHIAeQA6ACAAAAMuAAABAAMxAAAFUABBAAANTgBGAFAA
QQBQAFQAAAVOAFkAAA1OAEYATgBZAFAAVAAAAzUAAA1OAEYAUABBAEIAQQAADU4ARgBOAFkAQgBB
AAANTgBGAE4ATwBTAFQAAIEjVQBuAG0AYQBwAHAAZQBkACAAQwBhAGwAbAAgAEMAYQBtAHAAYQBp
AGcAbgAgAEkAbgBkAGkAYwBhAHQAbwByACAAbwByACAAUwBlAHIAdgBpAGMAZQAgAEEAZABkAHIA
ZQBzAHMAIAAzAC4AIABDAGEAbABsACAAQwBhAG0AcABhAGkAZwBuACAASQBuAGQAaQBjAGEAdABv
AHIAOgAgAHsAMAB9ADsAIABTAGUAcgB2AGkAYwBlACAAQQBkAGQAcgBlAHMAcwAgADMAOgAgAHsA
MQB9ADsAIABOAGEAdABpAG8AbgBhAGwAIABGAHUAZQBsACAARwBhAHMAIABBAGMAYwBvAHUAbgB0
AE4AdQBtAGIAZQByADoAIAB7ADIAfQAAAyAAABlTAGUAcgB2AGkAYwBlACAAQQB0ADoAIAAAJ0cA
YQBzACAAVQB0AGkAbABpAHQAeQAgAFMAZQByAHYAaQBjAGUAAAdDAE8ATQAAA1gAAB9QAGEAcgB0
AGkAYQBsACAAUABhAHkAbQBlAG4AdAAAD1cAUgBJAFQAVABFAE4AAINpUwBFAEwARQBDAFQAIAAK
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABhAGMAYwBvAHUAbgB0AC4A
QQBSAEEAQwBJAEQALAAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABh
AGMAYwBvAHUAbgB0AC4AQQBSAEEAQwBDAEwAQQBDAEMAVAAsAAoAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgAEEAUgBDAEwASQBEACwACgAJAAkACQAJAAkAQwBBAFMARQAg
AFcASABFAE4AIABhAHIAcgBlAGwAYQAuAEEAUgBSAEUATABTAFQAQQBUAFUAUwBJAEQAPQAnAEkA
TgBBAEMAVABDAEEATgBDAEUATAAnACAAVABIAEUATgAgADAAIABFAEwAUwBFACAAMQAgAEUATgBE
ACAAQQBTACAASQBTAEEAQwBUAEkAVgBFAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IABGAFIATwBNACAAJQBTAFQAQQBSAFQAVABBAEIATABFACAAQQBSAEMATABJAEUATgBUACAASQBO
AE4ARQBSACAASgBPAEkATgAgAEEAUgBBAEMAQwBPAFUATgBUACAAYQBjAGMAbwB1AG4AdAAgAG8A
bgAgAEEAUgBDAEwASQBEACAAPQAgAGEAYwBjAG8AdQBuAHQALgBBAFIAQQBDAEMATABUAEkARAAg
AEEATgBEACAAQQBSAEMATABJAEQAIABJAE4AIAAoACcATgBGAFAAQQBQAFQAJwAsACcATgBGAE4A
WQBQAFQAJwAsACcATgBGAFAAQQBCAEEAJwAsACcATgBGAE4AWQBCAEEAJwAsACcATgBGAE4ATwBT
AFQAJwApAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABKAE8ASQBOACAAQQBSAFIA
RQBMAEEAVABJAE8ATgBTAEgASQBQACAAYQByAHIAZQBsAGEAIABPAE4AIABhAGMAYwBvAHUAbgB0
AC4AQQBSAEEAQwBSAFAAUgBFAEwASQBEACAAPQAgAGEAcgByAGUAbABhAC4AQQBSAFIARQBMAEkA
RAABDUEAUgBBAEMASQBEAAARSQBTAEEAQwBUAEkAVgBFAAAVQQBSAEEAQwBDAEwAQQBDAEMAVAAA
DUEAUgBDAEwASQBEAAAHQwBDAFIAAB1BAFIAQQBDAEMATABBAEMAQwBUACAAPQAgACcAAQMnAAEf
JwAgAEEATgBEACAAQQBSAEMATABJAEQAPAA+ACcAATtJAFMAQQBDAFQASQBWAEUAPQAwACAAQQBO
AEQAIABBAFIAQQBDAEMATABBAEMAQwBUACAAPQAgACcAAR0nACAAQQBOAEQAIABBAFIAQwBMAEkA
RAA9ACcAAQcuADAAMAAAAzAAAAtlAG4ALQBVAFMAARF5AHkAeQB5AE0ATQBkAGQAAAUNAAoAAAtD
AE8ATQBBAEsAAAMsAAADLwAAA04AAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABj
AGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcA
bgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABl
AGEAZAAuAAARTwB1AHQAcAB1AHQAIAAwAAATRQB4AGMAZQBwAHQAaQBvAG4AABNQAGwAYQBjAGUA
bQBlAG4AdAAAC0wAZQBnAGEAbAAAFUMAbwBsAGwAYQB0AGUAcgBhAGwAAAtOAG8AdABlAHMAAA9D
AG8AbQBhAGsAZQByAAANQQBSAFQASQBWAEEAACdFAHgAYwBlAHAAdABpAG8AbgBDAG8AbgBuAGUA
YwB0AGkAbwBuAAAXYwB1AHIAcgBlAG4AdABGAGkAbABlAAApRgB1AGwAbABJAG4AYgBvAHUAbgBk
AEQAaQByAGUAYwB0AG8AcgB5AAAPUwB1AGIAagBlAGMAdAAABVQAbwAAcVMAQwBfADAANwAyADEA
YgBiADUAZAA1ADIANgA4ADQANgAwADAAYQAyADEAYQA5ADgAYwAzADAAZQBhADgAOAA5ADMAZgAu
AFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAB0gARABSAAAHRQBOAEQA
AAAAa2IA3TcNQk+bYavNZVT79wAEIAEBCAMgAAEFIAEBEREEIAEBDgYgAQERgMEDIAAOAwcBDgQA
AQEOBCABDg4FAAEOHQ4NIAUBDg4VEoDlAQ4ODoCnB0MVEkEBDg4ODg4ODg4ODg4ODg4ODg4ODg4O
Dg4ODg4ODg4ODhUSRQIOEkkVEkUCDhJNFRJFAg4SURUSRQIOElUVElkBDhUSWQEOFRJZAQ4VElkB
DhJdDg4OFRJhAQ4OEkkSTRJRElUdDh0OET0VEWUBEWkSbRJxFRF1Ag4SSRUReQIOEkkSfRKAgRKA
hRKAhRKAiRURgI0BDg4dEoCBHRKAgR0SgIEFAAIODg4EAAECDggAARUSQQEODgcVEoChAg4CBSAC
ARwYFxABAhUSQQEeABUSQQEeABUSgKECHgACAwoBDgcVEkUCDhJJBxUSRQIOEk0HFRJFAg4SUQcV
EkUCDhJVBRUSWQEOBRUSQQEOCCAAFRJhARMABRUSYQEOBCAAEwAFIAIOCAgFIAECEwAFAAICDg4H
AAQODhwcHAIGDgYgAR0OHQMGAAMODg4OAyAACAIGAgMGET0HBhURZQERaQQAABFpBhURZQERaQUg
AQETAAMgAAIHIAIBEwATAQkgAwEOEjkSgPUFIAARgPkEIAAScQYgAQESgQEFIAASgQUKIAAVEXUC
EwATAQcVEXUCDhJJCiAAFRF5AhMAEwEHFRF5Ag4SSQQgABMBBAoBEkkGIAETARMABAoBEk0ECgES
UQQKARJVCAACET0RPRE9BCAAEn0DIAAcBCABHA4EBhKBDQUKARKAhQkgABURgI0BEwAGFRGAjQEO
ByABHRKAgQ4KEAEBCBUSQQEeAAUKARKAgQUgAQ4dAwUAARE9DgUgAg4IDg0HAxKAkRFpFRFlARFp
DgAFAg4OEoEVEYEZEBFpBxUSgOUBHgAKEAEBDhUSQQEeAAQKAR4ABSACDg4OCyADARKAqR0IEoCt
BSACAQgcAwcBCAcAAggSgK0OBSABHQgIBSAAEoElBSAAEoEpBiABEoEtDgUgABKAtQUgABKBMQYg
ARKBNRwFAAASgTkGIAEcEoE9CAABEoFBEYFFBSAAEoFJByACAQ4SgUkEIAECDgi3elxWGTTgiQiJ
hF3NgIDMkQj6DO1KRVGngggfcYGz1Z2MQAg+DAjVnMPWVwMGEjkCBggDBhIsAwYSMAMGEgwDBhIQ
AwYSFAMGEhgDBhIcAwYSIAMGEiQEBhKAsQQGEoC9BAYSgJEDBhI4AwYSPAgGFRKAoQIOAgUgARE9
DgkgARURZQERaQ4GMAEBAR4ABCABAQINIAQBCB0IHRKAqRKArQYgAQESgLEFAAASgL0FAAASgJEG
AAEBEoCRBAAAEjgDAAABAygADgMoAAIFKAASgLUFCAASgL0FCAASgJEECAASOAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfMDcyMWJiNWQ1MjY4
NDYwMGEyMWE5OGMzMGVhODg5M2YAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAARwEAGi5O
RVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZy
YW1ld29yayA0BAEAAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3Vy
Y2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVi
bGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNv
dXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAiGkAAAAAAAAAAAAAomkAAAAgAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAJRpAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8l
ACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA
AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAaBAAAAAAAAAAAAAAaBDQAAABW
AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAiz2bHgAAAQCLPZse
PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA
AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcA
RgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBl
AG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYA
aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwAwADcAMgAxAGIAYgA1AGQANQAy
ADYAOAA0ADYAMAAwAGEAMgAxAGEAOQA4AGMAMwAwAGUAYQA4ADgAOQAzAGYAAAA+AA8AAQBGAGkA
bABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA4ADMANQAuADEANQA3ADUANQAAAAAAcAAo
AAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAwADcAMgAxAGIAYgA1AGQANQAyADYA
OAA0ADYAMAAwAGEAMgAxAGEAOQA4AGMAMwAwAGUAYQA4ADgAOQAzAGYALgBkAGwAbAAAAEgAEgAB
AEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAA
MgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADAANwAyADEAYgBiADUA
ZAA1ADIANgA4ADQANgAwADAAYQAyADEAYQA5ADgAYwAzADAAZQBhADgAOAA5ADMAZgAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAwADcAMgAxAGIAYgA1AGQA
NQAyADYAOAA0ADYAMAAwAGEAMgAxAGEAOQA4AGMAMwAwAGUAYQA4ADgAOQAzAGYAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAOAAzADUALgAxADUANwA1ADUA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAOAAz
ADUALgAxADUANwA1ADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAtDkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0721bb5d52684600a21a98c30ea8893f</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">User::currentFile,User::FullInboundDirectory,User::Subject,User::To</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">6a53e71545dfac33568c5ea0001fc4b9</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">1860f96377cb9c2ffd7a3ee39a790a3551867b55</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Script Component.Connections[ARTIVA]"
                      connectionManagerID="Package.ConnectionManagers[ARTIVA]"
                      connectionManagerRefId="Package.ConnectionManagers[ARTIVA]"
                      name="ARTIVA" />
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Script Component.Connections[ExceptionConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="ExceptionConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception]"
                      hasSideEffects="true"
                      name="Exception">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement]"
                      hasSideEffects="true"
                      name="Placement">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal]"
                      hasSideEffects="true"
                      name="Legal">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral]"
                      hasSideEffects="true"
                      name="Collateral">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes]"
                      hasSideEffects="true"
                      name="Notes">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker]"
                      hasSideEffects="true"
                      name="Comaker">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Create_CSVs\Process_Files.Paths[Collateral]"
                  endId="Package\Create_CSVs\Process_Files\Close_MT.Inputs[Flat File Destination Input]"
                  name="Collateral"
                  startId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral]" />
                <path
                  refId="Package\Create_CSVs\Process_Files.Paths[Exception]"
                  endId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input]"
                  name="Exception"
                  startId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception]" />
                <path
                  refId="Package\Create_CSVs\Process_Files.Paths[Output 0]"
                  endId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input]"
                  name="Output 0"
                  startId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{5599c910-3ee7-4ca6-a343-5c2b1efbf702}"
          DTS:ObjectName="{CC68F0F5-2A65-4ADA-A569-C5854425F3B5}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::currentFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="141,42"
          Id="Package\Create_CSVs\Process_Files"
          TopLeft="76,40" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="281,137"
          Size="281,180"
          Id="Package\Create_CSVs"
          TopLeft="205,87" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Create_CSVs\Process_Files">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="129,42"
          Id="Package\Create_CSVs\Process_Files\Exceptions"
          TopLeft="508,42" />
        <NodeLayout
          Size="163,42"
          Id="Package\Create_CSVs\Process_Files\Script Component"
          TopLeft="295.5,122.5" />
        <NodeLayout
          Size="124,42"
          Id="Package\Create_CSVs\Process_Files\Close_MT"
          TopLeft="311,17" />
        <NodeLayout
          Size="182,42"
          Id="Package\Create_CSVs\Process_Files\Artiva_Placement_File"
          TopLeft="66,46" />
        <EdgeLayout
          Id="Package\Create_CSVs\Process_Files.Paths[Output 0]"
          TopLeft="338.25,122.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-181.25,-34.5"
              Start="0,0"
              End="-181.25,-27">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-7.87022132796781" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-7.87022132796781"
                    Point2="0,-11.8702213279678"
                    Point3="-4,-11.8702213279678" />
                  <mssgle:LineSegment
                    End="-177.25,-11.8702213279678" />
                  <mssgle:CubicBezierSegment
                    Point1="-177.25,-11.8702213279678"
                    Point2="-181.25,-11.8702213279678"
                    Point3="-181.25,-15.8702213279678" />
                  <mssgle:LineSegment
                    End="-181.25,-27" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-110.78072265625,-6.8702213279678,40.3114453125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Create_CSVs\Process_Files.Paths[Exception]"
          TopLeft="415.75,122.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="156.75,-38.5"
              Start="0,0"
              End="156.75,-31">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-9.24647887323944" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-9.24647887323944"
                    Point2="0,-13.2464788732394"
                    Point3="4,-13.2464788732394" />
                  <mssgle:LineSegment
                    End="152.75,-13.2464788732394" />
                  <mssgle:CubicBezierSegment
                    Point1="152.75,-13.2464788732394"
                    Point2="156.75,-13.2464788732394"
                    Point3="156.75,-17.2464788732394" />
                  <mssgle:LineSegment
                    End="156.75,-31" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="56.75806640625,-8.2464788732394,43.2338671875,11.3310546875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Create_CSVs\Process_Files.Paths[Collateral]"
          TopLeft="375,122.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,-63.5"
              Start="0,0"
              End="0,-56">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-56" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-20.9996484375,-32.87451171875,41.999296875,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>