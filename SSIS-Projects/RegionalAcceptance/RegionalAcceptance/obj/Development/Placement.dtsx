<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/29/2020 4:27:12 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="DFW2-APPDEV-006"
  DTS:CreatorName="CORP\nokeke"
  DTS:DTSID="{CA2959D3-FEE8-4DD9-9485-9AF8BCF54AF5}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Placement"
  DTS:PackageType="5"
  DTS:VersionBuild="174"
  DTS:VersionGUID="{11A3FD3A-8E94-4C28-AB2E-0EE3EB659D39}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[artiva_import_file]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{3BAC4D6D-20C3-4295-BCAE-B36337814684}"
      DTS:ObjectName="artiva_import_file">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::FullOutboundDirectory] + "ArtivaNB-" + @[$Project::Namespace] + "-"  + @[$Project::ClientName] + "-" +  @[User::currentFile] + ".csv"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Outbound\ArtivaNB-THIRDPROD-Regional Acceptance Corp-0.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="2000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="RowData"
              DTS:DTSID="{DCBD1454-6EF8-4BAD-83F7-1338503EC79A}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Collateral]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{e2346bd5-6b48-4a24-bcba-78c94c835b85}"
      DTS:ObjectName="Collateral">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::Collateralfile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0-Collateral-9-22-2020.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Comaker]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{41af1aa8-48b9-4c7e-a042-f68f057e9cb9}"
      DTS:ObjectName="Comaker">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::Comakerfile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0-Comaker-9-22-2020.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Exceptions]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{20B9716C-E9DD-4633-ACDF-04582C42FC9F}"
      DTS:ObjectName="Exceptions">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExceptionReportFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Outbound\0-ExceptionReport.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Legal]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{ac1083f0-6756-4723-99b9-8c3e1106d9e4}"
      DTS:ObjectName="Legal">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::Legalfile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0-Legal-9-22-2020.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Notes]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{5e10998b-256f-45a6-be1d-c35ef08538e6}"
      DTS:ObjectName="Notes">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::Notesfile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0-Notes-9-22-2020.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Placement]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{e5e877bd-3368-483a-911c-74fb4c5339bc}"
      DTS:ObjectName="Placement">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::Placementfile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0-Placement-9-22-2020.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Placement_Input]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{B5205832-48E7-4064-AEF8-FAE739BE5728}"
      DTS:ObjectName="Placement_Input">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::FullInboundDirectory] +  @[User::currentFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="M:\RegionalAcceptance\Inbound\0">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Account Number"
              DTS:DTSID="{D6624913-3FB0-4B5E-8153-E3CF68FFE049}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Record Type"
              DTS:DTSID="{00190271-2E7B-4432-A23D-737F88088644}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Sequence Number"
              DTS:DTSID="{36847893-1155-41C5-B6B9-879454B0BBEF}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Title"
              DTS:DTSID="{8BF871AC-5FB4-477B-B456-66B6CBC15707}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Customer Type"
              DTS:DTSID="{156F2B1D-AB78-46CD-91C7-C87CA9C8A207}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Name"
              DTS:DTSID="{1D2D26E2-195C-4244-9EF5-FC90AFF73FF8}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Account Address 1"
              DTS:DTSID="{20143BAC-2871-4650-97BF-32F856D58CB6}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Account Address 2"
              DTS:DTSID="{0B3F9637-AAF2-4DD8-8210-2527B49D393A}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="City"
              DTS:DTSID="{E99C9945-2597-4A8E-A279-EA8B3914F426}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="County"
              DTS:DTSID="{4F59CFD1-68EF-4DFF-B586-96D39C86CDE7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="State"
              DTS:DTSID="{BA5AF1E3-0D9B-4ABD-9CA9-A99C8FFAEC09}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Zip - Code"
              DTS:DTSID="{85DFCA42-65EA-4852-8483-1810E4A4A5A1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Home Phone Number"
              DTS:DTSID="{5D4F3192-B5F5-43B1-8579-0D81F049240E}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Work Phone Number"
              DTS:DTSID="{44331C32-F590-486E-8211-AC5F65D3DB31}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Birth Date"
              DTS:DTSID="{78317B58-2640-45FE-8888-A0092CBB4B38}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Employer's Name"
              DTS:DTSID="{D0F5FD7D-1089-479F-92B7-ED66ACEDBDD0}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Employer's Address"
              DTS:DTSID="{681FE1C3-5263-454F-AFB4-964D3AFEE97D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Loan Type Code"
              DTS:DTSID="{15BF04DE-65F4-40AD-84E1-2C69A1CD40E7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Lending Officer Code"
              DTS:DTSID="{03749679-3BF2-43A3-A242-CEC4F75ADC82}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="User Field"
              DTS:DTSID="{77E43CEF-6203-48D3-90CA-F312F26DF6CD}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="DPS ID  Recoverer Code"
              DTS:DTSID="{DEB25751-DB68-45DC-A4E9-DC22C6A4C4FA}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Dealer Code"
              DTS:DTSID="{878ECE71-9D8B-49E8-B65E-CD5BB0F147ED}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Charge Off Reason Code"
              DTS:DTSID="{C467A0D3-9CA3-40B3-9A0E-F89596097CFE}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName=" Account Status"
              DTS:DTSID="{4E789E3A-B8BB-4357-8361-AA01753F9750}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Interest Rate"
              DTS:DTSID="{E75A1B08-5E07-46D8-BF75-CFDC2D36B7E7}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Source Code"
              DTS:DTSID="{C299D253-3BF7-411D-A1B6-0605C6512777}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Receipt Date"
              DTS:DTSID="{C05B29F4-B3E4-4B00-AC7D-A07ECDB6113A}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Contract Date"
              DTS:DTSID="{F3E53CCA-C624-4331-86B4-ED85EA215340}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Charge - Off Date"
              DTS:DTSID="{1329A58D-C47A-420D-B684-3A1C6200A94A}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Payment Date"
              DTS:DTSID="{709D6347-E558-4C51-947A-5BB863F359BE}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Charge - Off Amt"
              DTS:DTSID="{ECC86CC3-5E63-49C7-BF48-01A1AA8F0ED4}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Associated Costs"
              DTS:DTSID="{8CB9C812-21DF-43B4-8C08-85C4AEC6F99C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Accrued Interest"
              DTS:DTSID="{F4BE3122-D397-4EBE-A24D-2CE6AF973CCC}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Current Balance"
              DTS:DTSID="{6DFA7D29-94F8-400C-B9D8-E7C42D8C1F4B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Net Principal"
              DTS:DTSID="{A1D8015E-D268-4795-A1F9-09F3775BBAD8}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Net Associated Costs"
              DTS:DTSID="{9345010B-897D-48A8-B7D2-C1D925B23747}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Net Interest"
              DTS:DTSID="{678D7F61-E3B6-4B3A-9C13-C52333C4C605}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Comment Line1"
              DTS:DTSID="{A34F6A6C-362A-4F86-B5E5-1156EA399445}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Comment Line2"
              DTS:DTSID="{77F13FF1-6388-45ED-90B3-F5CEAF73F983}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Comment Line3"
              DTS:DTSID="{1DD38AA4-55B3-4D87-A87B-91828EBFAA9C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Comment Date"
              DTS:DTSID="{45146787-B0F4-4CBE-A456-2D4AF1E5EAA1}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Second Name 1"
              DTS:DTSID="{D9AA979A-4241-46C6-BDA6-EB32EB6FB091}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Second Name 2"
              DTS:DTSID="{25760D0C-10D1-41CF-8AA2-95E65E8B0806}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Monthly Income"
              DTS:DTSID="{837D7A8A-11A0-4349-A98D-79CEAA3A5F2D}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Other Income"
              DTS:DTSID="{6910EBB7-27D6-4FC8-B5AF-41CA3430A96E}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Monthly Payment"
              DTS:DTSID="{BA10A99D-6EE6-41BC-A886-E551278C24CC}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Other Obligations"
              DTS:DTSID="{55A47ECE-591F-4B05-94D4-7FD8BACC000F}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Own   Rent Code"
              DTS:DTSID="{01AE8F5D-5F3E-40FF-9ECC-349C6B612616}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Recovery Score"
              DTS:DTSID="{41B51441-1DAB-46D1-AD3B-584AE7C3494B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Next Payment Date"
              DTS:DTSID="{3B396A90-BEDE-4E50-86C2-BB82FBE317CB}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Interest Date"
              DTS:DTSID="{7760DEEA-97C1-4F3C-81CF-93ECA50B11A0}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Last Contact Date"
              DTS:DTSID="{781F7C85-DB2C-40D2-A746-66D70832EA66}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Commission Rate"
              DTS:DTSID="{04744A89-A29A-4079-9ADE-28F8D6822D00}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Home Phone Flag"
              DTS:DTSID="{143EC5FC-A222-4B4F-AFE0-42D166102B2C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Work Phone Flag"
              DTS:DTSID="{5CC29515-0383-4802-B419-848DEBE2EC71}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Address Flag"
              DTS:DTSID="{3D94726C-6DC2-405D-8CE1-4AC0627C5F72}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Customer ID"
              DTS:DTSID="{61FE58AC-3C02-42CE-A8E7-BEFDD14F0DC8}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Filler"
              DTS:DTSID="{C15ED665-66CB-443A-868C-8609D428C779}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Agency Code - DPS Recoverer Code"
              DTS:DTSID="{9C868ED5-CF49-44DE-BCCC-94A94E586ED2}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Format Code"
              DTS:DTSID="{9E2754E4-A496-4332-8760-63A63B31A4EC}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="AddressLine"
              DTS:DTSID="{B90E5753-1D2C-4564-AC2E-DD47C1C0F5BE}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="AddressUnit_AptOrPOBox"
              DTS:DTSID="{DACC0AF3-87A0-428F-BEEB-1E31D77DD71A}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="DPSID"
              DTS:DTSID="{0F7E7934-CB66-4848-82C4-BFF2A013D20B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="BatchDate"
              DTS:DTSID="{0DCE9670-E9F5-4EA2-AA1B-9D3F430A7D56}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="CreditorID"
              DTS:DTSID="{54E007DB-3824-4461-BD78-9D5A4A5AFE72}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{0AB00BF9-BE4C-4A40-B682-6FF0FAFF776A}"
      DTS:ObjectName="artivaFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*ArtivaNB-*.csv</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{01C6AF8F-C2D5-4B28-99DE-3EEAD26C13C3}"
      DTS:ObjectName="deletFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*.dl-*.csv</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{4270E899-D16D-46FA-B358-38A5A09C1368}"
      DTS:ObjectName="InboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Inbound\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{2FD33AE5-962C-4DF8-AB68-1F503AA95A77}"
      DTS:ObjectName="InboundFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*.dl</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{3E2B270F-979D-42E6-BE69-2CBC7B699A08}"
      DTS:ObjectName="OutboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Outbound\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{DC200016-9FAA-4132-9AB4-F6EABF1C6B27}"
      DTS:ObjectName="PlacementFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*-Placement-*.csv</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F89F08F6-8F07-49D8-A17C-02E052099FF3}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory]  +  @[User::currentFile] + &quot;-Collateral-&quot; + (DT_WSTR,2)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,2)DAY(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)YEAR(GETDATE()) +  &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Collateralfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0-Collateral-9-22-2020.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8292FE88-32EC-48F5-9C6C-3CE534609D19}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory]  +  @[User::currentFile] + &quot;-Comaker-&quot; + (DT_WSTR,2)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,2)DAY(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)YEAR(GETDATE()) +  &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Comakerfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0-Comaker-9-22-2020.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56AA1D7D-6A46-4AA7-B454-269F71D6BD7A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="currentArtivaDeletefile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{06A3289F-A640-491E-8596-1B23597BEED1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="currentDeletefile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{10E13CDA-94BE-4B9E-AD66-4CF9357313CC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="currentFile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F1AF7984-3419-4FC2-81C6-67B62598EAB5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory] +   @[User::currentDeletefile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="deleteFilesOnError">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6FE92EA4-DAAF-425F-AE27-A2F3CB73294A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory] +  @[User::currentArtivaDeletefile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="deleteNBfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Outbound\0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{81B72546-CF28-4DA5-9F6A-F32FC450606D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]  + @[User::currentFile]  + &quot;-ExceptionReport.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExceptionReportFile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Outbound\0-ExceptionReport.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80EC616B-2A49-48A5-8694-5D17951228EE}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath]+ @[$Package::InboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullInboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56E15268-F364-497F-9BD5-09815526BD91}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] + @[$Package::OutboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullOutboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Outbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{936E0BD0-BC8D-4955-9F18-B237F9254A51}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory]  +  @[User::currentFile] + &quot;-Legal-&quot; + (DT_WSTR,2)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,2)DAY(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)YEAR(GETDATE()) +  &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Legalfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0-Legal-9-22-2020.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{110373CB-9C3F-4853-9027-ABD4FE1CC728}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory]  +  @[User::currentFile] + &quot;-Notes-&quot; + (DT_WSTR,2)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,2)DAY(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)YEAR(GETDATE()) +  &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Notesfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0-Notes-9-22-2020.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F4410426-E5CE-4EAB-89A4-CE4C6F086710}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory]  +  @[User::currentFile] + &quot;-Placement-&quot; + (DT_WSTR,2)MONTH(GETDATE()) + &quot;-&quot; + (DT_WSTR,2)DAY(GETDATE()) + &quot;-&quot; + (DT_WSTR,4)YEAR(GETDATE()) +  &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Placementfile">
      <DTS:VariableValue
        DTS:DataType="8">M:\RegionalAcceptance\Inbound\0-Placement-9-22-2020.csv</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Create_CSVs"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{E9A37174-88A7-4E69-B1F4-A3A2E91E9D8E}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Create_CSVs">
      <DTS:ForEachEnumerator
        DTS:CreationName="DTS.ForEachFileEnumerator.3"
        DTS:DTSID="{0D7FC3F8-DE02-4DD6-890A-832702336AE8}"
        DTS:ObjectName="{0D7FC3F8-DE02-4DD6-890A-832702336AE8}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::FullInboundDirectory]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[$Package::InboundFileMask]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="M:\RegionalAcceptance\Inbound\" />
            <FEFEProperty
              FileSpec="*.dl" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Create_CSVs\Process_Files"
          DTS:CreationName="SSIS.Pipeline.3"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{0F8896DB-DC56-4F5F-943E-5C75F2C82E1A}"
          DTS:ExecutableType="SSIS.Pipeline.3"
          DTS:LocaleID="-1"
          DTS:ObjectName="Process_Files"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Artiva_Placement_File">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[artiva_import_file]"
                      connectionManagerRefId="Package.ConnectionManagers[artiva_import_file]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input].ExternalColumns[RowData]"
                          codePage="1252"
                          dataType="str"
                          length="2000"
                          name="RowData" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Create_CSVs\Process_Files\Exceptions"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Exceptions">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Exceptions.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Message" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Create_CSVs\Process_Files\Script Component"
                  componentClassID="DTS.ManagedComponentWrapper.3"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="8">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using RGS.ArtivaGeneralPurpose.Data.Records;
using System.Collections.Generic;
using FileHelpers;
using System.IO;
using System.Linq;
using System.Globalization;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    
    private Dictionary<string, string> lookupacc;
    private Dictionary<string, PartyInformation_20> rec20s;
    private Dictionary<string, PartyInformation_20> comaker;
    private Dictionary<string, ConsumerFreeFormText_205> rec205s;
    private Dictionary<string, AccountFreeFormText_203> rec203s;
    private Dictionary<string, ClientBankingInformation_807> rec807s;
    private Dictionary<string, string> reasoncode;
    private Dictionary<string, string> statuscode;    
    private bool _exceptionReportCreated;

    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        lookupacc = new Dictionary<string, string> ();
        rec20s = new Dictionary<string, PartyInformation_20>();
        comaker = new Dictionary<string, PartyInformation_20>();
        rec205s = new Dictionary<string, ConsumerFreeFormText_205>();
        rec203s = new Dictionary<string, AccountFreeFormText_203>();
        rec807s = new Dictionary<string, ClientBankingInformation_807>();
    _exceptionReportCreated = false;
        reasoncode = new Dictionary<string, string>
        {

            { "20", "SKIP" },
{ "21", "INSURANCE DEFICIENCY" },
{ "22", "BANKRUPTCY" },
{ "23", "CUSTOMER OVER EXTENDED DEBT" },
{ "24", "LOSS OF JOB/REDUCTION WORK HOURS" },
{ "25", "SMALL BALANCE" },
{ "26", "VOLUNTARY TURN IN" },
{ "27", "MECHANICAL PROBLEMS" },
{ "28", "DECEASED" },
{ "29", "MECHANICS LIEN/VEHICLE IMPOUNDED" },
{ "30", "MISC" },
{ "31", "UNINSURED LOSS" },
{ "32", "LEGAL ACTION IN PROGRESS" }

        };
        statuscode = new Dictionary<string, string>{
            { "410","Primary Agency Plcmt"},
{ "417","Primary Agency C&R"},
{ "420","Secondary Agency Plcmt"},
{ "427","Secondary Agency C&R"},
{ "430","Tertiary Agency Plcmt"},
{ "437","Tertiary Agency C&R"},
{ "440","Fourth Agency Plcmt"},
{ "447","Fourth Agency C&R"},
{ "450","Fifth Agency Plcmt"},
{ "470","Fifth Agency C&R/ Agency Exhausted"},
{ "490","Agency - Deceased"},
{ "491","Agency - Settled in full"},
{ "492","Agency - Paid in Full"},
{ "493","Agency - Dispute Unresolved"},
{ "494","Agency - Credit Counseling"},
{ "495","Agency - Cease & Desist"},
{ "496","Agency - Complaint"},
{ "497","Agency - Atty Contact"},
{ "498","Agency - Fraud Indicated"},
{ "499","Agency - Out of Statute"},
{ "705","Probate Agency Plcmt"},
{ "801","Agency - Bankruptcy Filing"},
{ "830","Bankrupt Chapter 13 Unsecured"},
{ "870","Bankrupt Chapter 7 Unsecured"},
{ "991","Deadfile - Ch 13 BK"},
{ "992","Deadfile - Ch 7 BK"}};

        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        if (!_exceptionReportCreated)
            System.IO.File.Delete(Connections.ExceptionConnection.ConnectionString);
        /*
         * Add your code here
         */
    }
    private int rec20count;
    private int comakercount;
    private int rec203count;
    private int rec205count;
    private int rec807count;
    public override void CreateNewOutputRows()
    {
        try
        {
            IEnumerable<string> allLines = null;
            string filePath = Variables.FullInboundDirectory + Variables.currentFile;
            if (File.Exists(filePath))
            {
                
                allLines = File.ReadLines(filePath);
            }

            
            // Header
            IEnumerable<string> headerRecord = allLines.Where(d => d.StartsWith("RMSHDR"));
            string DPSID = "";
            string BatchDate = "";
            string CreditorID = "";

            foreach (string line in headerRecord)
            {
                DPSID=line.Substring(6, 4).Trim();
                BatchDate= line.Substring(14, 8).Trim();
                CreditorID= line.Substring(40, 4).Trim();
            }


            // Process record M first, Placement record depends on it

            string SuitReason = "", SuitFileDate = "", CaseNumber1 = "", CourtName = "", JudgmentRecordedDate = "",
                    JudgmentBook = "", JudgmentPage = "", JudgmentExpirationDate = "", CreditorMeetingLocation = "", CreditorMeetingDate = "", CaseNumber2 = "", FiledDate = "", BarDate = "",
                    DismissDate = "", DischargeDate = "", ReaffirmDate = "", StayLiftedDate = "", BankruptcyAssetIndicator = "", BANKRUPTCYUSERDEFINEDALPHA2 = "",BANKRUPTCYUSERDEFINEDALPHA3 = "",
                    BANKRUPTCYUSERDEFINEDVALUE1 = "",BANKRUPTCYUSERDEFINEDVALUE2 = "",BANKRUPTCYUSERDEFINEDVALUE3 = "",BankrutpcyFilingDate = "",BANKRUPTCYUSERDEFINEDDATE2 = "",
                    BANKRUPTCYUSERDEFINEDDATE3 = "",LEGALUSERAMOUNT1 = "",LEGALUSERAMOUNT2 = "",LEGALUSERAMOUNT3 = "",LEGALUSERAMOUNT4 = "",LEGALUSERAMOUNT5 = "",LEGALUSERAMOUNT6 = "",
                    LEGALUSERAMOUNT7 = "",LEGALUSERAMOUNT8 = "",BankruptcyAttorneyName = "",BankruptcyAttorneyAddr1 = "",BankruptcyAttorneyAddr2 = "",BankruptcyAttorneyCity = "",
                    BankruptcyAttorneyState = "",BankruptcyAttorneyZip = "",BankruptcyAttorneyPhone = "",LEGALUSERVARIABLE8 = "",LEGALUSERVARIABLE9 = "",LEGALUSERVARIABLE10 = "",
                    LEGALUSERVARIABLE11 = "",LEGALUSERPHONE2 = "",LEGALUSERPHONE3 = "",LEGALUSERPHONE4 = "",BankruptcyChapter = "";

            IEnumerable<string> recordMlines = allLines.Where(d => d.Substring(20,1) == "M");
            /*LegalBuffer.AddRow();
            LegalBuffer.Data = "Account Number,Record Type,Sequence Number,Suit Reason,Suit File Date,Case Number1,Court Name,Judgment Recorded Date," +
                "Judgment Book,Judgment Page,Judgment Expiration Date,Creditor Meeting Location,Creditor Meeting Date,Case Number2,Filed Date,Bar Date," +
                "Dismiss Date,Discharge Date,Reaffirm Date,Stay Lifted Date,Bankruptcy Asset Indicator,BANKRUPTCY USER-DEFINED ALPHA 2,BANKRUPTCY USER-DEFINED ALPHA 3," +
                "BANKRUPTCY USER-DEFINED VALUE 1,BANKRUPTCY USER-DEFINED VALUE 2,BANKRUPTCY USER-DEFINED VALUE 3,Bankrutpcy Filing Date,BANKRUPTCY USER - DEFINED DATE 2," +
                "BANKRUPTCY USER-DEFINED DATE 3,LEGAL USER AMOUNT 1,LEGAL USER AMOUNT 2,LEGAL USER AMOUNT 3,LEGAL USER AMOUNT 4,LEGAL USER AMOUNT 5,LEGAL USER AMOUNT 6," +
                "LEGAL USER AMOUNT 7,LEGAL USER AMOUNT 8,Bankruptcy Attorney Name,Bankruptcy Attorney Addr 1,Bankruptcy Attorney Addr 2,Bankruptcy Attorney City," +
                "Bankruptcy Attorney State,Bankruptcy Attorney Zip,Bankruptcy Attorney Phone,LEGAL USER VARIABLE 8,LEGAL USER VARIABLE 9,LEGAL USER VARIABLE 10," +
                "LEGAL USER VARIABLE 11,LEGAL USER PHONE 2,LEGAL USER PHONE 3,LEGAL USER PHONE 4,Bankruptcy Chapter,Filler,Agency Code,Format Code";
                */

            //BankruptcyAttorneyName = "";
            string accountnumber = "";
            foreach (string line in recordMlines)
            {
                //BankruptcyAttorneyName = line.Substring(439, 20).Trim();
                
                SuitReason = line.Substring(23, 30).Trim();
                SuitFileDate = line.Substring(53, 8).Trim();
                CaseNumber1 = line.Substring(61, 20).Trim();
                CourtName = line.Substring(81, 30).Trim();
                JudgmentRecordedDate = line.Substring(111, 8).Trim();
                JudgmentBook = line.Substring(119, 8).Trim();
                JudgmentPage = line.Substring(127, 8).Trim();
                JudgmentExpirationDate = line.Substring(135, 8).Trim();
                CreditorMeetingLocation = line.Substring(143, 15).Trim();
                CreditorMeetingDate = line.Substring(158, 8).Trim();
                CaseNumber2 = line.Substring(166, 20).Trim();
                FiledDate = line.Substring(186, 8).Trim();
                BarDate = line.Substring(194, 8).Trim();
                DismissDate = line.Substring(202, 8).Trim();
                DischargeDate = line.Substring(210, 8).Trim();
                ReaffirmDate = line.Substring(218, 8).Trim();
                StayLiftedDate = line.Substring(226, 8).Trim();
                BankruptcyAssetIndicator = line.Substring(234, 20).Trim();
                BANKRUPTCYUSERDEFINEDALPHA2 = line.Substring(254, 20).Trim();
                BANKRUPTCYUSERDEFINEDALPHA3 = line.Substring(274, 20).Trim();
                BANKRUPTCYUSERDEFINEDVALUE1 = line.Substring(294, 11).Trim();
                BANKRUPTCYUSERDEFINEDVALUE2 = line.Substring(305, 11).Trim();
                BANKRUPTCYUSERDEFINEDVALUE3 = line.Substring(316, 11).Trim();
                BankrutpcyFilingDate = line.Substring(327, 8).Trim();
                BANKRUPTCYUSERDEFINEDDATE2 = line.Substring(335, 8).Trim();
                BANKRUPTCYUSERDEFINEDDATE3 = line.Substring(343, 8).Trim();
                LEGALUSERAMOUNT1 = line.Substring(351, 11).Trim();
                LEGALUSERAMOUNT2 = line.Substring(362, 11).Trim();
                LEGALUSERAMOUNT3 = line.Substring(373, 11).Trim();
                LEGALUSERAMOUNT4 = line.Substring(384, 11).Trim();
                LEGALUSERAMOUNT5 = line.Substring(395, 11).Trim();
                LEGALUSERAMOUNT6 = line.Substring(406, 11).Trim();
                LEGALUSERAMOUNT7 = line.Substring(417, 11).Trim();
                LEGALUSERAMOUNT8 = line.Substring(428, 11).Trim();
                BankruptcyAttorneyName = line.Substring(439, 20).Trim();
                BankruptcyAttorneyAddr1 = line.Substring(459, 20).Trim();
                BankruptcyAttorneyAddr2 = line.Substring(479, 20).Trim();
                BankruptcyAttorneyCity = line.Substring(499, 20).Trim();
                BankruptcyAttorneyState = line.Substring(519, 20).Trim();
                BankruptcyAttorneyZip = line.Substring(539, 20).Trim();
                BankruptcyAttorneyPhone = line.Substring(559, 20).Trim();
                LEGALUSERVARIABLE8 = line.Substring(579, 17).Trim();
                LEGALUSERVARIABLE9 = line.Substring(596, 20).Trim();
                LEGALUSERVARIABLE10 = line.Substring(616, 20).Trim();
                LEGALUSERVARIABLE11 = line.Substring(636, 20).Trim();
                LEGALUSERPHONE2 = line.Substring(656, 11).Trim();
                LEGALUSERPHONE3 = line.Substring(667, 11).Trim();
                LEGALUSERPHONE4 = line.Substring(678, 11).Trim();
                BankruptcyChapter = line.Substring(689, 2).Trim();


                accountnumber = line.Substring(0, 20).Trim();


                add203NonA(accountnumber, "SUIT REASON:  ", SuitReason);
                add203NonA(accountnumber, "SUIT FILE DATE:  ", getDateLegal(SuitFileDate));
                add203NonA(accountnumber, "CASE NUMBER:  ", CaseNumber1);
                add203NonA(accountnumber, "COURT NAME:  ", CourtName);
                add203NonA(accountnumber, "JUDGMENT RECORDED DATE:  ", getDateLegal(JudgmentRecordedDate));
                add203NonA(accountnumber, "JUDGMENT BOOK:  ", JudgmentBook);
                add203NonA(accountnumber, "JUDGMENT PAGE:  ", JudgmentPage);
                add203NonA(accountnumber, "JUDGMENT EXPIRATION DATE:  ", getDateLegal(JudgmentExpirationDate));
                add203NonA(accountnumber, "CREDITOR MEETING LOCATION:  ", CreditorMeetingLocation);
                add203NonA(accountnumber, "CREDITOR MEETING DATE:  ", getDateLegal(CreditorMeetingDate));
                add203NonA(accountnumber, "CASE NUMER 2:  ", CaseNumber2);
                add203NonA(accountnumber, "FILED DATE:  ", getDateLegal(FiledDate));
                add203NonA(accountnumber, "BAR DATE:  ", getDateLegal(BarDate));
                add203NonA(accountnumber, "DISMISS DATE:  ", getDateLegal(DismissDate));
                add203NonA(accountnumber, "DISCHARGE DATE:  ", getDateLegal(DischargeDate));
                add203NonA(accountnumber, "REAFFIRM DATE:  ", getDateLegal(ReaffirmDate));
                add203NonA(accountnumber, "STAY LIFTED DATE:  ", getDateLegal(StayLiftedDate));
                add203NonA(accountnumber, "BANKRUPTCY ASSET INDICATOR:  ", BankruptcyAssetIndicator);
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED ALPHA 2:  ", BANKRUPTCYUSERDEFINEDALPHA2);
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED ALPHA 3:  ", BANKRUPTCYUSERDEFINEDALPHA3);
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED VALUE 1:  ", BANKRUPTCYUSERDEFINEDVALUE1);
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED VALUE 2:  ", BANKRUPTCYUSERDEFINEDVALUE2);
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED VALUE 3:  ", BANKRUPTCYUSERDEFINEDVALUE3);
                add203NonA(accountnumber, "BANKRUPTCY FILING DATE:  ", getDateLegal(BankrutpcyFilingDate));
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED DATE 2:  ", getDateLegal(BANKRUPTCYUSERDEFINEDDATE2));
                add203NonA(accountnumber, "BANKRUPTCY USER DEFINED DATE 3:  ", getDateLegal(BANKRUPTCYUSERDEFINEDDATE3));
                add203NonA(accountnumber, "USER AMOUNT 1:  ", formatNumber(LEGALUSERAMOUNT1));
                add203NonA(accountnumber, "USER AMOUNT 2:  ", formatNumber(LEGALUSERAMOUNT2));
                add203NonA(accountnumber, "USER AMOUNT 3:  ", formatNumber(LEGALUSERAMOUNT3));
                add203NonA(accountnumber, "USER AMOUNT 4:  ", formatNumber(LEGALUSERAMOUNT4));
                add203NonA(accountnumber, "USER AMOUNT 5:  ", formatNumber(LEGALUSERAMOUNT5));
                add203NonA(accountnumber, "USER AMOUNT 6:  ", formatNumber(LEGALUSERAMOUNT6));
                add203NonA(accountnumber, "USER AMOUNT 7:  ", formatNumber(LEGALUSERAMOUNT7));
                add203NonA(accountnumber, "USER AMOUNT 8:  ", formatNumber(LEGALUSERAMOUNT8));
                add203NonA(accountnumber, "LEGAL USER VARIABLE 8:  ", LEGALUSERVARIABLE8);
                add203NonA(accountnumber, "LEGAL USER VARIABLE 9:  ", LEGALUSERVARIABLE9);
                add203NonA(accountnumber, "LEGAL USER VARIABLE 10:  ", LEGALUSERVARIABLE10);
                add203NonA(accountnumber, "LEGAL USER VARIABLE 11:  ", LEGALUSERVARIABLE11);
                add203NonA(accountnumber, "LEGAL PHONE DATE 2:  ", LEGALUSERPHONE2);
                add203NonA(accountnumber, "LEGAL PHONE 3:  ", LEGALUSERPHONE3);
                add203NonA(accountnumber, "LEGAL USER PHONE 4:  ", LEGALUSERPHONE4);
                add203NonA(accountnumber, "BANKRUPTCY CHAPTER:  ", BankruptcyChapter);

                var Rec20 = new PartyInformation_20();
                //Rec20.RelationshipTypeKey = "PRIM";
                Rec20.AttorneyName = BankruptcyAttorneyName;

                if (!string.IsNullOrEmpty(BankruptcyAttorneyName))
                    Rec20.StatusCode = "ATTY";

                Rec20.Attorney1AddressLine1 = BankruptcyAttorneyAddr1;
                Rec20.Attorney1AddressLine2 = BankruptcyAttorneyAddr2;
                Rec20.Attorney1City = BankruptcyAttorneyCity;
                Rec20.Attorney1State = BankruptcyAttorneyState;
                Rec20.Attorney1PostalCode = BankruptcyAttorneyZip;
                Rec20.Attorney1Phone = BankruptcyAttorneyPhone;

                rec20count++;


                rec20s.Add(accountnumber + "@" + rec20count.ToString(), Rec20);

               /* LegalBuffer.AddRow();
                LegalBuffer.Data = accountnumber + "," + line.Substring(20, 1).Trim() + "," + line.Substring(21, 2).Trim() + "," + SuitReason + "," + SuitFileDate + "," + CaseNumber1 + "," + CourtName + "," + JudgmentRecordedDate + "," +
                    JudgmentBook + "," + JudgmentPage + "," + JudgmentExpirationDate + "," + CreditorMeetingLocation + "," + CreditorMeetingDate + "," + CaseNumber2 + "," + FiledDate + "," + BarDate + "," +
                    DismissDate + "," + DischargeDate + "," + ReaffirmDate + "," + StayLiftedDate + "," + BankruptcyAssetIndicator + "," + BANKRUPTCYUSERDEFINEDALPHA2 + "," + BANKRUPTCYUSERDEFINEDALPHA3 + "," +
                    BANKRUPTCYUSERDEFINEDVALUE1 + "," + BANKRUPTCYUSERDEFINEDVALUE2 + "," + BANKRUPTCYUSERDEFINEDVALUE3 + "," + BankrutpcyFilingDate + "," + BANKRUPTCYUSERDEFINEDDATE2 + "," +
                    BANKRUPTCYUSERDEFINEDDATE3 + "," + LEGALUSERAMOUNT1 + "," + LEGALUSERAMOUNT2 + "," + LEGALUSERAMOUNT3 + "," + LEGALUSERAMOUNT4 + "," + LEGALUSERAMOUNT5 + "," + LEGALUSERAMOUNT6 + "," +
                    LEGALUSERAMOUNT7 + "," + LEGALUSERAMOUNT8 + "," + BankruptcyAttorneyName + "," + BankruptcyAttorneyAddr1 + "," + BankruptcyAttorneyAddr2 + "," + BankruptcyAttorneyCity + "," +
                    BankruptcyAttorneyState + "," + BankruptcyAttorneyZip + "," + BankruptcyAttorneyPhone + "," + LEGALUSERVARIABLE8 + "," + LEGALUSERVARIABLE9 + "," + LEGALUSERVARIABLE10 + "," +
                    LEGALUSERVARIABLE11 + "," + LEGALUSERPHONE2 + "," + LEGALUSERPHONE3 + "," + LEGALUSERPHONE4 + "," + BankruptcyChapter + "," + line.Substring(691, 4).Trim() + "," +
                    line.Substring(695, 4).Trim() + "," + line.Substring(699, 1).Trim() + "\n\r";
                    */



                lookupacc.Add(accountnumber, BankruptcyAttorneyName);

            }

            IEnumerable<string> recordClines = allLines.Where(d => d.Substring(20, 1) == "C");
            /*ComakerBuffer.AddRow();
            ComakerBuffer.Data = "Account Number,Record Type,Sequence Number,Title,Customer Type,Name,Account Address 1,Account Address 2,City," +
                "County,State,Zip - Code,Home Phone Number,Work Phone Number,Birth Date,Employer's Name,Employer's Address,Filler,Customer ID,Filler," +
                "Agency Code -DPS / Recoverer Code,Format Code";
                */

            string AccountNumber = "";// line.Substring(0, 20).Trim();
            //string RecordType = "";// "C";
            string SequenceNumber = "";// line.Substring(21, 2).Trim();
            string Title = "";// line.Substring(23, 4).Trim();
            string CustomerType = "";// line.Substring(27, 1).Trim();
            string Name = "";// line.Substring(28, 40);
            string AccountAddress1 = "";// line.Substring(68, 25).Trim();
            string AccountAddress2 = "";// line.Substring(93, 25).Trim();
            string City = "";// line.Substring(118, 20).Trim();
            string County = "";// line.Substring(138, 15).Trim();
            string State = "";// line.Substring(153, 2).Trim();
            string ZipCode = "";// line.Substring(155, 10).Trim();
            string HomePhoneNumber = "";// line.Substring(165, 16).Trim();
            string WorkPhoneNumber = "";// line.Substring(181, 16).Trim();
            string BirthDate = "";// line.Substring(197, 8).Trim();
            string EmployerName = "";// line.Substring(205, 40).Trim();
            string EmployersAddress = "";// line.Substring(245, 40).Trim();
            string CustomerID = "";// line.Substring(674, 16).Trim();

            foreach (string line in recordClines)
            {

                var Rec20 = new PartyInformation_20();

                AccountNumber = line.Substring(0, 20).Trim();
                if (!string.IsNullOrEmpty(AccountNumber))
                {

                    //RecordType = "C";
                    SequenceNumber = line.Substring(21, 2).Trim();
                    Title = line.Substring(23, 4).Trim();
                    CustomerType = line.Substring(27, 1).Trim();
                    Name = line.Substring(28, 40);
                    AccountAddress1 = line.Substring(68, 25).Trim();
                    AccountAddress2 = line.Substring(93, 25).Trim();
                    City = line.Substring(118, 20).Trim();
                    County = line.Substring(138, 15).Trim();
                    State = line.Substring(153, 2).Trim();
                    ZipCode = line.Substring(155, 10).Trim();
                    HomePhoneNumber = line.Substring(165, 16).Trim();
                    WorkPhoneNumber = line.Substring(181, 16).Trim();
                    BirthDate = line.Substring(197, 8).Trim();
                    EmployerName = line.Substring(205, 40).Trim();
                    EmployersAddress = line.Substring(245, 40).Trim();
                    CustomerID = line.Substring(674, 16).Trim();

                    Rec20.ClientsEntityId = SequenceNumber;

                    if (CustomerType == "C")
                        Rec20.IsBusiness = true;

                    if (CustomerType == "C")
                    {
                        Rec20.IsBusiness = true;
                        Rec20.LastName = Name;

                    }
                    else if (CustomerType == "I")
                    {

                        Rec20.LastName = Name.Substring(0, 25).Trim();
                        Rec20.FirstName = Name.Substring(25, 15).Trim();
                    }

                    Rec20.AddressLine = AccountAddress1;
                    Rec20.AddressUnit_AptOrPOBox = AccountAddress2;
                    Rec20.City = City;
                    Rec20.County = County;
                    Rec20.State = State;
                    Rec20.PostalCode = ZipCode;
                    Rec20.PrimaryPhoneNumber = HomePhoneNumber;
                    Rec20.POEPhoneNumber = WorkPhoneNumber;
                    string dob = BirthDate;
                    Rec20.DateOfBirth = getDate(dob);
                    Rec20.PlaceOfEmployment = EmployerName;
                    Rec20.POEAddressLine = EmployersAddress;
                    Rec20.SocialSecurityNumber = CustomerID;
                    Rec20.RelationshipTypeKey = "COMAK";
                    
                    comakercount++;
                    comaker.Add(AccountNumber + "@" + comakercount.ToString(), Rec20);

                   /* ComakerBuffer.AddRow();
                    ComakerBuffer.Data = AccountNumber + "," + "C," + SequenceNumber + "," + Title + "," + CustomerType + "," +
                        Name + "," + AccountAddress1 + "," + AccountAddress2 + "," + City + "," + County + "," +
                        State + "," + ZipCode + "," + HomePhoneNumber + "," + WorkPhoneNumber + "," + BirthDate + "," +
                        EmployerName + "," + EmployersAddress + "," + "." + "," + CustomerID + "," + line.Substring(690, 6).Trim() + "," +
                        line.Substring(695, 4).Trim() + "," + line.Substring(699, 1).Trim() + "\n\r";
                        */
                }





            }

            IEnumerable<string> recordHlines = allLines.Where(d => d.Substring(20, 1) == "H");
            /*NotesBuffer.AddRow();
            NotesBuffer.Data = "Account Number,Record Type,Sequence Number,Transaction Date,Note Line,Transaction Date,Note Line," +
                "Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date," +
                "Note Line,Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date,Note Line,Transaction Date," +
                "Note Line,Transaction Date,Note Line,Filler,Agency Code,Format Code";
                */
            string NoteLine1 = "";
            string NoteLine2 = "";
            string NoteLine3 = "";
            string NoteLine4 = "";
            string NoteLine5 = "";
            string NoteLine6 = "";
            string NoteLine7 = "";
            string NoteLine8 = "";
            string NoteLine9 = "";
            string NoteLineA = "";
            string NoteLineB = "";
            string NoteLineC = "";
            string NoteLineD = "";
            string TransactionDate1 = "";
            string TransactionDate2 = "";
            string TransactionDate3 = "";
            string TransactionDate4 = "";
            string TransactionDate5 = "";
            string TransactionDate6 = "";
            string TransactionDate7 = "";
            string TransactionDate8 = "";
            string TransactionDate9 = "";
            string TransactionDateA = "";
            string TransactionDateB = "";
            string TransactionDateC = "";
            string TransactionDateD = "";


            foreach (string line in recordHlines)
            {
                AccountNumber = line.Substring(0, 20).Trim(); 

                NoteLine1 = line.Substring(31, 40).Trim();
                NoteLine2 = line.Substring(79, 40).Trim();
                NoteLine3 = line.Substring(127, 40).Trim();
                NoteLine4 = line.Substring(175, 40).Trim();
                NoteLine5 = line.Substring(223, 40).Trim();
                NoteLine6 = line.Substring(271, 40).Trim();
                NoteLine7 = line.Substring(319, 40).Trim();
                NoteLine8 = line.Substring(367, 40).Trim();
                NoteLine9 = line.Substring(415, 40).Trim();
                NoteLineA = line.Substring(463, 40).Trim();
                NoteLineB = line.Substring(511, 40).Trim();
                NoteLineC = line.Substring(559, 40).Trim();
                NoteLineD = line.Substring(607, 40).Trim();
                TransactionDate1 = line.Substring(71, 8).Trim();
                TransactionDate2 = line.Substring(119, 8).Trim();
                TransactionDate3 = line.Substring(167, 8).Trim();
                TransactionDate4 = line.Substring(215, 8).Trim();
                TransactionDate5 = line.Substring(263, 8).Trim();
                TransactionDate6 = line.Substring(311, 8).Trim();
                TransactionDate7 = line.Substring(359, 8).Trim();
                TransactionDate8 = line.Substring(407, 8).Trim();
                TransactionDate9 = line.Substring(455, 8).Trim();
                TransactionDateA = line.Substring(503, 8).Trim();
                TransactionDateB = line.Substring(551, 8).Trim();
                TransactionDateC = line.Substring(599, 8).Trim();
                TransactionDateD = line.Substring(647, 8).Trim();


                add205Notes(AccountNumber, getDateNotes(TransactionDate1), NoteLine1);
                add205Notes(AccountNumber, getDateNotes(TransactionDate2), NoteLine2);
                add205Notes(AccountNumber, getDateNotes(TransactionDate3), NoteLine3);
                add205Notes(AccountNumber, getDateNotes(TransactionDate4), NoteLine4);
                add205Notes(AccountNumber, getDateNotes(TransactionDate5), NoteLine5);
                add205Notes(AccountNumber, getDateNotes(TransactionDate6), NoteLine6);
                add205Notes(AccountNumber, getDateNotes(TransactionDate7), NoteLine7);
                add205Notes(AccountNumber, getDateNotes(TransactionDate8), NoteLine8);
                add205Notes(AccountNumber, getDateNotes(TransactionDate9), NoteLine9);
                add205Notes(AccountNumber, getDateNotes(TransactionDateA), NoteLineA);
                add205Notes(AccountNumber, getDateNotes(TransactionDateB), NoteLineB);
                add205Notes(AccountNumber, getDateNotes(TransactionDateC), NoteLineC);
                add205Notes(AccountNumber, getDateNotes(TransactionDateD), NoteLineD);

               /* NotesBuffer.AddRow();
                NotesBuffer.Data = line.Substring(0, 20).Trim() + "," + "H," + line.Substring(21, 2).Trim() + "," + line.Substring(23, 8).Trim() + "," + NoteLine1 + "," +
                    TransactionDate1 + "," + NoteLine2 + "," + TransactionDate2 + "," + NoteLine3 + "," + TransactionDate3 + "," +
                    NoteLine4 + "," + TransactionDate4 + "," + NoteLine5 + "," + TransactionDate5 + "," + NoteLine6 + "," +
                    TransactionDate6 + "," + NoteLine7 + "," + TransactionDate7 + "," + NoteLine8 + "," + TransactionDate8 + "," +
                    NoteLine9 + "," + TransactionDate9 + "," + NoteLineA + "," + TransactionDateA + "," + NoteLineB + "," +
                    TransactionDateB + "," + NoteLineC + "," + TransactionDateC + "," + NoteLineD + "," + TransactionDateD + "," +
                    line.Substring(695, 4).Trim() + "," + line.Substring(699, 1).Trim() + "\n\r";

                */



            }

            string CollateralID1 = "";
            string CollateralYear1 = "";
            string CollateralMake1 = "";
            string DateofRepossession1 = "";
            string CollateralSoldDate1 = "";
            string CollateralSalePrice1 = "";
            string CollateralID2 = "";
            string CollateralYear2 = "";
            string CollateralMake2 = "";
            string DateofRepossession2 = "";
            string CollateralSoldDate2 = "";
            string CollateralSalePrice2 = "";
            string CollateralID3 = "";
            string CollateralYear3 = "";
            string CollateralMake3 = "";
            string DateofRepossession3 = "";
            string CollateralSoldDate3 = "";
            string CollateralSalePrice3 = "";
            string CollateralID4 = "";
            string CollateralYear4 = "";
            string CollateralMake4 = "";
            string DateofRepossession4 = "";
            string CollateralSoldDate4 = "";
            string CollateralSalePrice4 = "";
            string CollateralID5 = "";
            string CollateralYear5 = "";
            string CollateralMake5 = "";
            string DateofRepossession5 = "";
            string CollateralSoldDate5 = "";
            string CollateralSalePrice5 = "";
            string LoanType = "";

            IEnumerable<string> recordKlines = allLines.Where(d => d.Substring(20, 1) == "K");
            /*CollateralBuffer.AddRow();
            CollateralBuffer.Data = "Account Number,Record Type,Sequence Number,Collateral ID,Collateral Year,Collateral Make,Date of Repossession," +
                "Collateral Sold Date,Collateral Sale Price,Collateral ID,Collateral Year,Collateral Make,Date of Repossession,Collateral Sold Date," +
                "Collateral Sale Price,Collateral ID,Collateral Year,Collateral Make,Date of Repossession,Collateral Sold Date,Collateral Sale Price," +
                "Collateral ID,Collateral Year,Collateral Make,Date of Repossession,Collateral Sold Date,Collateral Sale Price,Collateral ID,Collateral Year," +
                "Collateral Make,Date of Repossession,Collateral Sold Date,Collateral Sale Price,Filler,Agency Code,Format Code";
                */
            foreach (string line in recordKlines)
            {
                CollateralID1 = line.Substring(23, 20).Trim();
                CollateralYear1 = line.Substring(43, 2).Trim();
                CollateralMake1 = line.Substring(48, 28).Trim();
                DateofRepossession1 = line.Substring(73, 8).Trim();
                CollateralSoldDate1 = line.Substring(81, 8).Trim();
                CollateralSalePrice1 = line.Substring(89, 11).Trim();
                CollateralID2 = line.Substring(100, 20).Trim();
                CollateralYear2 = line.Substring(120, 2).Trim();
                CollateralMake2 = line.Substring(122, 28).Trim();
                DateofRepossession2 = line.Substring(150, 8).Trim();
                CollateralSoldDate2 = line.Substring(158, 8).Trim();
                CollateralSalePrice2 = line.Substring(166, 11).Trim();
                CollateralID3 = line.Substring(177, 20).Trim();
                CollateralYear3 = line.Substring(197, 2).Trim();
                CollateralMake3 = line.Substring(199, 28).Trim();
                DateofRepossession3 = line.Substring(227, 8).Trim();
                CollateralSoldDate3 = line.Substring(235, 8).Trim();
                CollateralSalePrice3 = line.Substring(243, 11).Trim();
                CollateralID4 = line.Substring(254, 20).Trim();
                CollateralYear4 = line.Substring(274, 2).Trim();
                CollateralMake4 = line.Substring(276, 28).Trim();
                DateofRepossession4 = line.Substring(304, 8).Trim();
                CollateralSoldDate4 = line.Substring(312, 8).Trim();
                CollateralSalePrice4 = line.Substring(320, 11).Trim();
                CollateralID5 = line.Substring(331, 20).Trim();
                CollateralYear5 = line.Substring(351, 2).Trim();
                CollateralMake5 = line.Substring(353, 28).Trim();
                DateofRepossession5 = line.Substring(381, 8).Trim();
                CollateralSoldDate5 = line.Substring(389, 8).Trim();
                CollateralSalePrice5 = line.Substring(397, 11).Trim();
                LoanType = line.Substring(408, 287).Trim();


                AccountNumber = line.Substring(0, 20).Trim();

                add203Collat(CollateralID2, CollateralYear2, CollateralMake2, DateofRepossession2, CollateralSoldDate2, AccountNumber, formatNumber(CollateralSalePrice2));
                add203Collat(CollateralID3, CollateralYear3, CollateralMake3, DateofRepossession3, CollateralSoldDate3, AccountNumber, formatNumber(CollateralSalePrice3));
                add203Collat(CollateralID4, CollateralYear4, CollateralMake4, DateofRepossession4, CollateralSoldDate4, AccountNumber, formatNumber(CollateralSalePrice4));
                add203Collat(CollateralID5, CollateralYear5, CollateralMake5, DateofRepossession5, CollateralSoldDate5, AccountNumber, formatNumber(CollateralSalePrice5));

                var Rec807 = new ClientBankingInformation_807();


                Rec807.VIN = CollateralID1;
                Rec807.CollateralYear = CollateralYear1;
                Rec807.Make = CollateralMake1;
                Rec807.RepoDate = getDate(DateofRepossession1);
                Rec807.SaleDate = getDate(CollateralSoldDate1);
                Rec807.SalePrice = Convert.ToDecimal(formatNumber(CollateralSalePrice1));
                Rec807.LoanType = LoanType;

                rec807count++;
                rec807s.Add(AccountNumber + "@" + rec807count.ToString(), Rec807);


                /*CollateralBuffer.AddRow();
                CollateralBuffer.Data = line.Substring(0, 20).Trim() + "," + "K," + line.Substring(21, 2).Trim() + "," + CollateralID1 + "," + CollateralYear1 + "," +
                    CollateralMake1 + "," + DateofRepossession1 + "," + CollateralSoldDate1 + "," + CollateralSalePrice1 + "," + CollateralID2 + "," +
                    CollateralYear2 + "," + CollateralMake2 + "," + DateofRepossession2 + "," + CollateralSoldDate2 + "," + CollateralSalePrice2 + "," +
                    CollateralID3 + "," + CollateralYear3 + "," + CollateralMake3 + "," + DateofRepossession3 + "," + CollateralSoldDate3 + "," +
                    CollateralSalePrice3 + "," + CollateralID4 + "," + CollateralYear4 + "," + CollateralMake4 + "," + DateofRepossession4 + "," +
                    CollateralSoldDate4 + "," + CollateralSalePrice4 + "," + CollateralID5 + "," + CollateralYear5 + "," + CollateralMake5 + "," +
                    DateofRepossession5 + "," + CollateralSoldDate5 + "," + CollateralSalePrice5 + "," + LoanType + "," + line.Substring(695, 4).Trim() + "," +
                    line.Substring(699, 1).Trim() + "\n\r";
                    */



            }

            // New Assignment Account Information Record - "A" record

            var Record10 = new AccountInformation_10();
            var Record20 = new PartyInformation_20();
            var Record807 = new ClientBankingInformation_807();
            var rec203s = new List<AccountFreeFormText_203>();
            var Record812 = new AdditionalBankingInformation_812();
            var Record100 = new PlacementInformation_100();
            var Record110 = new SegmentationScores_110();
            var Record808 = new RetailClubInformation_808();

            IEnumerable<string> placementRecord = allLines.Where(d => d.Substring(20, 1) == "A");
            /*PlacementBuffer.AddRow();
            PlacementBuffer.Data = "Account Number,Record Type,Sequence Number,Title,Customer Type,Name,Account Address 1,Account Address 2," +
                "City,County,State,Zip - Code,Home Phone Number,Work Phone Number,Birth Date,Employer's Name,Employer's Address,Loan Type Code," +
                "Lending Officer Code,User Field,DPS ID/ Recoverer Code,Dealer Code,Charge Off Reason Code, Account Status,Interest Rate," +
                "Source Code,Receipt Date,Contract Date,Charge - Off Date,Last Payment Date,Charge - Off Amt,Associated Costs,Accrued Interest," +
                "Current Balance,Net Principal,Net Associated Costs,Net Interest,Last Comment Line1,Last Comment Line2,Last Comment Line3," +
                "Last Comment Date,Second Name 1,Second Name 2,Monthly Income,Other Income,Monthly Payment,Other Obligations,Own / Rent Code," +
                "Recovery Score,Next Payment Date,Last Interest Date,Last Contact Date,Commission Rate,Home Phone Flag,Work Phone Flag," +
                "Address Flag,Customer ID,Filler,Agency Code - DPS Recoverer Code,Format Code,AddressLine,AddressUnit_AptOrPOBox,DPSID,BatchDate,CreditorID";
                */
            string attorneyname = "";
            string AddressLine = "";
            string AddressUnit_AptOrPOBox = "";

            //string SequenceNumber = ""; // line.Substring(21, 2).Trim();
            //string CustomerType = ""; // line.Substring(27, 1).Trim();

            //string Name = ""; // line.Substring(28, 40);
            //string AccountAddress1 = ""; // line.Substring(68, 25).Trim();
            //string AccountAddress2 = ""; // line.Substring(93, 25).Trim();
            //string City = ""; // line.Substring(118, 20).Trim();
            //string County = ""; // line.Substring(138, 15).Trim();
            //string State = ""; // line.Substring(153, 2).Trim();
            string Zipcode = ""; // line.Substring(155, 10).Trim();
            //string HomePhoneNumber = ""; // line.Substring(165, 16).Trim();
            //string WorkPhoneNumber = ""; // line.Substring(181, 16).Trim();
            //string BirthDate = ""; // line.Substring(197, 8).Trim();
            //string EmployerName = ""; // line.Substring(205, 40).Trim();
            string EmployerAddress = ""; // line.Substring(245, 40).Trim();
            string LoanTypeCode = ""; // line.Substring(285, 4).Trim();
            string LendingOfficerCode = ""; // line.Substring(289, 6).Trim();
            string UserField = ""; // line.Substring(295, 10).Trim();
            string DPSIDRecovererCode = ""; // line.Substring(305, 4).Trim();
            string DealerCode = ""; // line.Substring(309, 16).Trim();
            string ChargeOffReasonCode = ""; // line.Substring(325, 4).Trim();
            string AccountStatus = ""; // line.Substring(329, 3).Trim();
            string InterestRate = ""; // line.Substring(332, 4).Trim();
            string SourceCode = ""; // line.Substring(336, 1).Trim();
            string ReceiptDate = ""; // line.Substring(337, 8).Trim();
            string ContractDate = ""; // line.Substring(345, 8).Trim();
            string ChargeOffDate = ""; // line.Substring(353, 8).Trim();
            string LastPaymentDate = ""; // line.Substring(361, 8).Trim();
            string ChargeOffAmt = ""; // line.Substring(369, 8).Trim();
            string AssociatedCosts = ""; // line.Substring(379, 8).Trim();
            string AccruedInterest = ""; // line.Substring(388, 8).Trim();
            string CurrentBalance = ""; // line.Substring(397, 7).Trim();
            string NetPrincipal = ""; // line.Substring(407, 7).Trim();
            string NetAssociatedCosts = ""; // line.Substring(416, 8).Trim();
            string NetInterest = ""; // line.Substring(425, 7).Trim();
            string LastCommentLine1 = ""; // line.Substring(434, 7).Trim();
            string LastCommentLine2 = ""; // line.Substring(474, 7).Trim();
            string LastCommentLine3 = ""; // line.Substring(514, 40).Trim();
            string LastCommentDate = ""; // line.Substring(554, 40).Trim();
            string SecondName1 = ""; // line.Substring(562, 40).Trim();
            string SecondName2 = ""; // line.Substring(587, 8).Trim();
            string MonthlyIncome = ""; // line.Substring(602, 7).Trim();
            string OtherIncome = ""; // line.Substring(611, 7).Trim();
            string MonthlyPayment = ""; // line.Substring(620, 7).Trim();
            string OtherObligations = ""; // line.Substring(629, 7).Trim();
            string OwnRentCode = ""; // line.Substring(638, 1).Trim();
            string RecoveryScore = ""; // line.Substring(639, 4).Trim();
            string NextPaymentDate = ""; // line.Substring(643, 8).Trim();
            string LastInterestDate = ""; // line.Substring(651, 8).Trim();
            string LastContactDate = ""; // line.Substring(659, 8).Trim();
            string CommissionRate = ""; // line.Substring(667, 9).Trim();
            string HomePhoneFlag = ""; // line.Substring(671, 2).Trim();
            string WorkPhoneFlag = ""; // line.Substring(672, 1).Trim();
            string AddressFlag = ""; // line.Substring(673, 1).Trim();
            //string CustomerID = ""; // line.Substring(674, 16).Trim();
            string dpsid = ""; // line.Substring(695, 4).Trim();

            string anum = "";
            foreach (string line in placementRecord)
            {
                
                accountnumber = line.Substring(0, 20).Trim();

                if (!string.IsNullOrEmpty(accountnumber))
                {
                    SequenceNumber = line.Substring(21, 2).Trim();
                    CustomerType = line.Substring(27, 1).Trim();

                    Name = line.Substring(28, 40);
                    AccountAddress1 = line.Substring(68, 25).Trim();
                    AccountAddress2 = line.Substring(93, 25).Trim();
                    City = line.Substring(118, 20).Trim();
                    County = line.Substring(138, 15).Trim();
                    State = line.Substring(153, 2).Trim();
                    Zipcode = line.Substring(155, 10).Trim();
                    HomePhoneNumber = line.Substring(165, 16).Trim();
                    WorkPhoneNumber = line.Substring(181, 16).Trim();
                    BirthDate = line.Substring(197, 8).Trim();
                    EmployerName = line.Substring(205, 40).Trim();
                    EmployerAddress = line.Substring(245, 40).Trim();
                    LoanTypeCode = line.Substring(285, 4).Trim();
                    LendingOfficerCode = line.Substring(289, 6).Trim();
                    UserField = line.Substring(295, 10).Trim();
                    DPSIDRecovererCode = line.Substring(305, 4).Trim();
                    DealerCode = line.Substring(309, 16).Trim();
                    ChargeOffReasonCode = line.Substring(325, 4).Trim();
                    AccountStatus = line.Substring(329, 3).Trim();
                    InterestRate = line.Substring(332, 4).Trim();
                    SourceCode = line.Substring(336, 1).Trim();
                    ReceiptDate = line.Substring(337, 8).Trim();
                    ContractDate = line.Substring(345, 8).Trim();
                    ChargeOffDate = line.Substring(353, 8).Trim();
                    LastPaymentDate = line.Substring(361, 8).Trim();
                    ChargeOffAmt = line.Substring(369, 10).Trim();
                    AssociatedCosts = line.Substring(379, 9).Trim();
                    AccruedInterest = line.Substring(388, 9).Trim();
                    CurrentBalance = line.Substring(397, 10).Trim();
                    NetPrincipal = line.Substring(407, 9).Trim();
                    NetAssociatedCosts = line.Substring(416, 9).Trim();
                    NetInterest = line.Substring(425, 9).Trim();
                    LastCommentLine1 = line.Substring(434, 7).Trim();
                    LastCommentLine2 = line.Substring(474, 7).Trim();
                    LastCommentLine3 = line.Substring(514, 40).Trim();
                    LastCommentDate = line.Substring(554, 40).Trim();
                    SecondName1 = line.Substring(562, 40).Trim();
                    SecondName2 = line.Substring(587, 8).Trim();
                    MonthlyIncome = line.Substring(602, 9).Trim();
                    OtherIncome = line.Substring(611, 9).Trim();
                    MonthlyPayment = line.Substring(620, 9).Trim();
                    OtherObligations = line.Substring(629, 9).Trim();
                    OwnRentCode = line.Substring(638, 1).Trim();
                    RecoveryScore = line.Substring(639, 4).Trim();
                    NextPaymentDate = line.Substring(643, 8).Trim();
                    LastInterestDate = line.Substring(651, 8).Trim();
                    LastContactDate = line.Substring(659, 8).Trim();
                    CommissionRate = line.Substring(667, 4).Trim();
                    HomePhoneFlag = line.Substring(671, 1).Trim();
                    WorkPhoneFlag = line.Substring(672, 1).Trim();
                    AddressFlag = line.Substring(673, 1).Trim();
                    CustomerID = line.Substring(674, 16).Trim();
                    dpsid = line.Substring(695, 4).Trim();

                    if (lookupacc.ContainsKey(accountnumber))
                        attorneyname = lookupacc[accountnumber];
                    if (String.IsNullOrEmpty(attorneyname))
                    {
                        AddressLine = line.Substring(68, 25).Trim();
                        AddressUnit_AptOrPOBox = line.Substring(93, 25).Trim();
                    }
                    else
                    {
                        AddressLine = "%" + attorneyname;
                        AddressUnit_AptOrPOBox = line.Substring(68, 92).Trim() + " " + line.Substring(93, 117).Trim();
                    }

                    PlacementBuffer.AddRow();
                    PlacementBuffer.Data = accountnumber + "," + "A" + "," + SequenceNumber + "," + "." + "," +
                    CustomerType + "," + // line.Substring(27, 1).Trim();
                    Name + "," + // line.Substring(28, 40);
                    AccountAddress1 + "," + // line.Substring(68, 25).Trim();
                    AccountAddress2 + "," + // line.Substring(93, 25).Trim();
                    City + "," + // line.Substring(118, 20).Trim();
                    County + "," + // line.Substring(138, 15).Trim();
                    State + "," + // line.Substring(153, 2).Trim();
                    Zipcode + "," + // line.Substring(155, 10).Trim();
                    HomePhoneNumber + "," + // line.Substring(165, 16).Trim();
                    WorkPhoneNumber + "," + // line.Substring(181, 16).Trim();
                    BirthDate + "," + // line.Substring(197, 8).Trim();
                    EmployerName + "," + // line.Substring(205, 40).Trim();
                    EmployerAddress + "," + // line.Substring(245, 40).Trim();
                    LoanTypeCode + "," + // line.Substring(285, 4).Trim();
                    LendingOfficerCode + "," + // line.Substring(289, 6).Trim();
                    UserField + "," + // line.Substring(295, 10).Trim();
                    DPSIDRecovererCode + "," + // line.Substring(305, 4).Trim();
                    DealerCode + "," + // line.Substring(309, 16).Trim();
                    ChargeOffReasonCode + "," + // line.Substring(325, 4).Trim();
                    AccountStatus + "," + // line.Substring(329, 3).Trim();
                    InterestRate + "," + // line.Substring(332, 4).Trim();
                    SourceCode + "," + // line.Substring(336, 1).Trim();
                    ReceiptDate + "," + // line.Substring(337, 8).Trim();
                    ContractDate + "," + // line.Substring(345, 8).Trim();
                    ChargeOffDate + "," + // line.Substring(353, 8).Trim();
                    LastPaymentDate + "," + // line.Substring(361, 8).Trim();
                    ChargeOffAmt + "," + // line.Substring(369, 8).Trim();
                    AssociatedCosts + "," + // line.Substring(379, 8).Trim();
                    AccruedInterest + "," + // line.Substring(388, 8).Trim();
                    CurrentBalance + "," + // line.Substring(397, 7).Trim();
                    NetPrincipal + "," + // line.Substring(407, 7).Trim();
                    NetAssociatedCosts + "," + // line.Substring(416, 8).Trim();
                    NetInterest + "," + // line.Substring(425, 7).Trim();
                    LastCommentLine1 + "," + // line.Substring(434, 7).Trim();
                    LastCommentLine2 + "," + // line.Substring(474, 7).Trim();
                    LastCommentLine3 + "," + // line.Substring(514, 40).Trim();
                    LastCommentDate + "," + // line.Substring(554, 40).Trim();
                    SecondName1 + "," + // line.Substring(562, 40).Trim();
                    SecondName2 + "," + // line.Substring(587, 8).Trim();
                    MonthlyIncome + "," + // line.Substring(602, 7).Trim();
                    OtherIncome + "," + // line.Substring(611, 7).Trim();
                    MonthlyPayment + "," + // line.Substring(620, 7).Trim();
                    OtherObligations + "," + // line.Substring(629, 7).Trim();
                    OwnRentCode + "," + // line.Substring(638, 1).Trim();
                    RecoveryScore + "," + // line.Substring(639, 4).Trim();
                    NextPaymentDate + "," + // line.Substring(643, 8).Trim();
                    LastInterestDate + "," + // line.Substring(651, 8).Trim();
                    LastContactDate + "," + // line.Substring(659, 8).Trim();
                    CommissionRate + "," + // line.Substring(667, 9).Trim();
                    HomePhoneFlag + "," + // line.Substring(671, 2).Trim();
                    WorkPhoneFlag + "," + // line.Substring(672, 1).Trim();
                    AddressFlag + "," + // line.Substring(673, 1).Trim();
                                        // ".," +
                    CustomerID + "," + // line.Substring(674, 16).Trim();                
                    "." + "," + dpsid + ",.," + AddressLine + "," + AddressUnit_AptOrPOBox + "," + DPSID + "," + BatchDate + "," + CreditorID + "\n\r";

                    Decimal curbal = getNum(CurrentBalance);
                    bool cont = true;
                    if (curbal <= 0.00m)
                    {
                        _exceptionReportCreated = true;
                        ExceptionBuffer.AddRow();
                        ExceptionBuffer.Data = "Client Reference Number: " + Record10.ClientReferenceNumber + "; " + "Name: " + Name + "; " +
                            "Loan Type Code: " + LoanTypeCode + "; Current Balance: " + curbal.ToString() + "; Net Principle: " + getNum(NetPrincipal).ToString() + "; " +
                            "Net Associated Costs: " + getNum(NetAssociatedCosts).ToString() + "; Net Interest: " + getNum(NetInterest).ToString() + "; Recoverer Code: " +
                            DPSIDRecovererCode + "; Charge-Off Date: " + ChargeOffDate + "; Rejection Reason: Balance < or = 0.00 ";
                        cont = false;
                    }

                    if (DPSID == "C100")
                        Record807.AgencyCode = "RAC100";
                    else if (DPSID == "C505")
                        Record807.AgencyCode = "RAC505";
                    else
                    {
                        _exceptionReportCreated = true;
                        ExceptionBuffer.AddRow();
                        ExceptionBuffer.Data = "Client Reference Number: " + Record10.ClientReferenceNumber + "; " + "Name: " + Name + "; " +
                            "Loan Type Code: " + LoanTypeCode + "; Current Balance: " + curbal.ToString() + "; Net Principle: " + getNum(NetPrincipal).ToString() + "; " +
                            "Net Associated Costs: " + getNum(NetAssociatedCosts).ToString() + "; Net Interest: " + getNum(NetInterest).ToString() + "; Recoverer Code: " +
                            DPSIDRecovererCode + "; Charge-Off Date: " + ChargeOffDate + "; Rejection Reason: Client code not determined!";
                        cont = false;
                    }

                    if (cont)
                    {

                        #region Record 10
                        string state = State;
                        Record10.ClientReferenceNumber = accountnumber;
                        Record10.SOLState = state;
                        Record10.ClientID = Record807.AgencyCode;
                        //string ChargeOffDate = ChargeOffDate;

                        DateTime? chroffdate = getDate(ChargeOffDate);

                        Record10.ChargeOffDate = chroffdate;

                        Record10.DelinquencyDate = chroffdate;

                        Record10.ServiceDate = chroffdate == null ? (DateTime?)null : Convert.ToDateTime(chroffdate).AddDays(-1);

                        Record10.SOLDate = chroffdate;

                        string lastpaydate = LastPaymentDate;
                        Record10.ClientLastPayDate = getDate(lastpaydate);


                        Record10.ChargeOffAmount = getNum(ChargeOffAmt);



                        bool isloadonlyprn = false;


                        Decimal netprn = getNum(NetPrincipal);

                        Decimal netassocost = getNum(NetAssociatedCosts);

                        Decimal netint = getNum(NetInterest);



                        if ((netprn + netassocost + netint) == curbal)
                        {

                            Record10.PrincipalInitalBalance = netprn;
                            Record10.OtherInitialBalance = netassocost;
                            Record10.InterestInitialBalance = netint;

                        }
                        else
                        {
                            Record10.PrincipalInitalBalance = curbal;
                            isloadonlyprn = true;
                        }


                        Record10.ListedDate = DateTime.Today;
                        Record10.SOLAgreementType = "AUTO";
                        Record10.DebtDescription = "PAST DUE BALANCE";

                        #endregion

                        #region Record 20
                        Record20.RelationshipTypeKey = "PRIM";
                        string isbiz = CustomerType;
                        string name = Name;
                        Record20.ClientsEntityId = SequenceNumber;
                        if (isbiz == "C")
                        {
                            Record20.IsBusiness = true;
                            Record20.LastName = name.Trim();

                        }
                        else if (isbiz == "I")
                        {

                            Record20.LastName = name.Substring(0, 25).Trim();
                            Record20.FirstName = name.Substring(25, 15).Trim();
                        }


                        Record20.AddressLine = AddressLine;
                        Record20.AddressUnit_AptOrPOBox = AddressUnit_AptOrPOBox;


                        Record20.City = City;
                        Record20.County = County;
                        Record20.State = state;
                        Record20.PostalCode = Zipcode;
                        Record20.PrimaryPhoneNumber = HomePhoneNumber;
                        Record20.POEPhoneNumber = WorkPhoneNumber;
                        string dob = BirthDate;
                        Record20.DateOfBirth = getDate(dob);
                        Record20.PlaceOfEmployment = EmployerName;
                        Record20.POEAddressLine = EmployerAddress;

                        Record20.PrimaryPhoneFlag = HomePhoneFlag;
                        Record20.AlternatePhoneFlag = WorkPhoneFlag;
                        Record20.MailReturnFlag = AddressFlag;
                        Record20.SocialSecurityNumber = CustomerID;

                        #endregion

                        #region Record 807
                        Record807.LoanCode = LoanTypeCode;
                        Record807.LenderOfficerCode = LendingOfficerCode;
                        Record807.DealerCode = DealerCode;
                        string intrate = InterestRate;
                        Record807.InterestRate = String.IsNullOrEmpty(intrate) ? "0" : (Convert.ToDecimal(intrate) / 100).ToString();
                        string recdate = ReceiptDate;

                        Record807.ReceiptDate = getDate(recdate);
                        Record807.ContractDate = getDate(ContractDate);


                        Record807.AssociatedCosts = getNum(AssociatedCosts);
                        Record807.AccruedInterest = getNum(AccruedInterest);
                        Record807.OriginalBal = curbal;

                        if (!isloadonlyprn)
                        {

                            Record807.NetInterest = netint;
                            Record807.NetAssociatedCosts = netassocost;
                            Record807.NetPrincipal = netprn;
                        }

                        Record807.SecondName = SecondName1;
                        string nduedate = NextPaymentDate;
                        string lduedate = LastInterestDate;
                        string lcdate = LastContactDate;
                        Record807.NextPaymentDueDate = getDate(nduedate);

                        Record807.InterestThruDate = getDate(lduedate);

                        Record807.LastContactDate = getDate(lcdate);

                        Record807.MIOCode = CreditorID;
                        #endregion

                        #region Record 203
                        string astatus = AccountStatus;
                        string userfield = UserField;
                        //string dpsid = DPSIDRecovererCode;
                        string srccode = SourceCode;
                        string coml1 = LastCommentLine1;
                        string coml2 = LastCommentLine2;
                        string coml3 = LastCommentLine3;

                        add203("DPS ID/RECOVERER CODE:  ", DPSIDRecovererCode, rec203s);
                        add203("USER FIELD:  ", userfield.Trim(), rec203s);
                        if (String.IsNullOrEmpty(ChargeOffDate))
                        {
                            _exceptionReportCreated = true;
                            ExceptionBuffer.AddRow();
                            ExceptionBuffer.Data = "Client Reference Number: " + Record10.ClientReferenceNumber + "; " + "Name: " + Name + "; " +
                            "Loan Type Code: " + LoanTypeCode + "; Current Balance: " + curbal.ToString() + "; Net Principle: " + getNum(NetPrincipal).ToString() + "; " +
                            "Net Associated Costs: " + getNum(NetAssociatedCosts).ToString() + "; Net Interest: " + getNum(NetInterest).ToString() + "; Recoverer Code: " +
                            DPSIDRecovererCode + "; Charge-Off Date: " + ChargeOffDate + "; Rejection Reason: No Statute date ";
                            add203("CLIENT STATUS:  ", "NOSOLDATEHOLD", rec203s);
                        }
                        else
                        {
                            if(statuscode.ContainsKey(astatus))
                                add203("CLIENT STATUS:  ", astatus + " - " + statuscode[astatus], rec203s);
                            else
                                add203("CLIENT STATUS:  ", astatus, rec203s);
                        }
                            


                        add203("SOURCE CODE:  ", srccode.Trim(), rec203s);

                        add203("LAST COMMENT LINE 1:  ", coml1.Trim(), rec203s);
                        add203("LAST COMMENT LINE 2:  ", coml2.Trim(), rec203s);
                        add203("LAST COMMENT LINE 3:  ", coml3.Trim(), rec203s);
                        string cdate = ContractDate;
                        string secname2 = SecondName2;
                        string moninc = getNum(MonthlyIncome).ToString();
                        string othinc = getNum(OtherIncome).ToString();
                        string monpay = getNum(MonthlyPayment).ToString();
                        string othobg = getNum(OtherObligations).ToString();
                        string rentcode = OwnRentCode;
                        string cmr = CommissionRate.TrimStart(new Char[] { '0' });
                        string comrate = cmr == "" ? "0" : cmr;


                        DateTime? dateValue = getDate(cdate);

                        add203("LAST COMMENT DATE:  ", dateValue == null ? "" : Convert.ToDateTime(dateValue).ToString("MM/dd/yyyy"), rec203s);
                        add203("SECOND NAME 2:  ", secname2.Trim(), rec203s);

                        add203("MONTHLY INCOME:  ", moninc.Trim(), rec203s);
                        add203("OTHER INCOME:  ", othinc.Trim(), rec203s);
                        add203("MONTHLY PAYMENT:  ", monpay.Trim(), rec203s);
                        add203("OTHER OBLIGATIONS:  ", othobg.Trim(), rec203s);
                        add203("OWN/RENT CODE:  ", rentcode.Trim(), rec203s);

                        add203("COMMISSION RATE:  ", (Convert.ToDecimal(comrate) / 100).ToString(), rec203s);

                        #endregion

                        #region Record 812
                        string reasonc = ChargeOffReasonCode.TrimStart(new Char[] { '0' });
                        Record812.ChargeOffCode = reasonc;

                        if (reasoncode.ContainsKey(reasonc))
                            Record812.ChargeOffReason = reasoncode[reasonc];
                        #endregion

                        #region Record 100
                        Record100.BKEffectiveDate = chroffdate;

                        string clibid = dpsid;
                        Record100.ClientBatchId = clibid;

                        Record100.IncomingFileName = Variables.currentFile;
                        Record100.DateLoaded = DateTime.Today;

                        if (dpsid == "C100")
                            Record100.PlacementLevel = "1";
                        else if (dpsid == "C505")
                            Record100.PlacementLevel = "5";

                        Record100.DateAccountAssigned = getDate(BatchDate);
                        #endregion

                        #region Record 110 and 808
                        Record110.ClientScore = Convert.ToInt32(RecoveryScore);
                        Record808.Location = clibid;
                        #endregion


                            AddPlacementRow(Record10);
                        foreach (KeyValuePair<string, PartyInformation_20> entry in rec20s)
                        {
                            anum = entry.Key.Split('@')[0];
                            if (anum == accountnumber)
                            {
                                Record20.AttorneyName = entry.Value.AttorneyName;
                                Record20.StatusCode = entry.Value.StatusCode;
                                Record20.Attorney1AddressLine1 = entry.Value.Attorney1AddressLine1;
                                Record20.Attorney1AddressLine2 = entry.Value.Attorney1AddressLine2;
                                Record20.Attorney1City = entry.Value.Attorney1City;
                                Record20.Attorney1State = entry.Value.Attorney1State;
                                Record20.Attorney1PostalCode = entry.Value.Attorney1PostalCode;
                                Record20.Attorney1Phone = entry.Value.Attorney1Phone;
                            }
                              
                        }
                        AddPlacementRow(Record20);

                        foreach (KeyValuePair<string, PartyInformation_20> entry in comaker)
                        {
                            anum = entry.Key.Split('@')[0];
                            if (anum == accountnumber)
                                AddPlacementRow(entry.Value);
                        }
                        foreach (KeyValuePair<string, ClientBankingInformation_807> entry in rec807s)
                        {
                            anum = entry.Key.Split('@')[0];
                            if (anum == accountnumber)
                            {

                                Record807.VIN = entry.Value.VIN;
                                Record807.CollateralYear = entry.Value.CollateralYear;
                                Record807.Make = entry.Value.Make;
                                Record807.RepoDate = entry.Value.RepoDate;
                                Record807.SaleDate = entry.Value.SaleDate;
                                Record807.SalePrice = entry.Value.SalePrice;
                                Record807.LoanType = entry.Value.LoanType;

                            }
                            
                        }
                        AddPlacementRow(Record807);

                        AddPlacementRow(Record812);
                            AddPlacementRow(Record100);
                            AddPlacementRow(Record110);
                            AddPlacementRow(Record808);
                            for (int i = 0; i < rec203s.Count; i++)
                                AddPlacementRow(rec203s[i]);

                        foreach (KeyValuePair<string, AccountFreeFormText_203> entry in this.rec203s)
                        {
                            anum = entry.Key.Split('@')[0];
                            if (anum == accountnumber)
                                AddPlacementRow(entry.Value);
                        }
                        foreach (KeyValuePair<string, ConsumerFreeFormText_205> entry in this.rec205s)
                        {
                            anum = entry.Key.Split('@')[0];
                            if (anum == accountnumber)
                                AddPlacementRow(entry.Value);
                        }





                        rec203s.Clear();


                    }
                    else
                        continue;

                }










            }



        }
        catch (Exception e)
        {

            bool cancel = false;
            ComponentMetaData.FireError(10, "Process Values", e.Message + "\n\n" + e.StackTrace, "", 0, out cancel);
        }
    }
    private void add203(string label, string data, List<AccountFreeFormText_203> rec203s)
    {
        if (string.IsNullOrEmpty(data) || data=="0" || data == "0.00")
            return;

        rec203s.Add(new AccountFreeFormText_203 { FreeFormText = label + data });
    }
    private decimal getNum(string v)
    {

        bool isneg = v.EndsWith("}");
        string val = v.TrimStart(new Char[] { '0' }).Replace("}", "").Replace("{", "");
        bool iszero = String.IsNullOrEmpty(val);

        if (!iszero)
        {
            int l = val.Length;
            if (l == 1 || l == 2)
                val += ".00";
            else
                val = val.Insert(val.Length - 2, ".");

            val = isneg ? "-" + val : val;

        }


        return iszero ? 0 : Convert.ToDecimal(val);





    }
    private string getFormateddate(string str)
    {
        if (string.IsNullOrEmpty(str))
            return "";
        str = str.Length < 8 && str.Substring(0, 1) != "0" ? "0" + str : str;
        str = str.Length < 8 ? str.Insert(2, "0") : str;

        return str;
    }
    private DateTime? getDate(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue;
        else
            return null;
    }

    //collateral
    private string getStrdate(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue.ToString("MM/dd/yyyy");
        else
            return "";
    }
    private void add203Collat(string id, string year, string make, string rdate, string sdate, string accid, string sprice)
    {
        if (string.IsNullOrEmpty(id) && string.IsNullOrEmpty(year) && string.IsNullOrEmpty(make) && string.IsNullOrEmpty(rdate) && string.IsNullOrEmpty(sdate)
            && sprice == "0.00")
            return;

        string data = "COLLATERAL 2:  VIN: " + id + ";YEAR: " + year + ";MAKE: " + make
                + ";REPO DATE: " + getStrdate(rdate) + ";SOLD DATE: " + getStrdate(sdate) + ";SALE PRICE: " + sprice;

        rec203s.Add(accid,new AccountFreeFormText_203 { FreeFormText = data });
    }

    //for notes
    private void add205Notes(string accid, string label, string data)
    {
        if (string.IsNullOrEmpty(data) || data=="0")
            return;

        rec205count++;
        rec205s.Add(accid + "@" + rec205count.ToString(), new ConsumerFreeFormText_205 { FreeFormText = label + data });
    }
    //Legal
    private string getDateLegal(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue.ToString("MMddyyyy");
        else
            return "";
    }
    private string formatNumber(string v)
    {

        if (string.IsNullOrEmpty(v))
            return "0.00";
        else
        {
            var ibm = new Dictionary<string, string>() {
            { "{", "0" },{ "}", "-0" },
            { "A", "1" },{ "J", "-1" },
            { "B", "2" },{ "K", "-2" },
            { "C", "3" },{ "L", "-3" },
            { "D", "4" },{ "M", "-4" },
            { "E", "5" },{ "N", "-5" },
            { "F", "6" },{ "O", "-6" },
            { "G", "7" },{ "P", "-7" },
            { "H", "8" },{ "Q", "-8" },
            { "I", "9" },{ "R", "-9" }};

            string lastchar = "";
            string val = "";
            bool iszero = false;
            bool isneg = false;

            if (ibm.ContainsKey(v[v.Length - 1].ToString()))
            {

                lastchar = ibm[v[v.Length - 1].ToString()];

                isneg = lastchar.StartsWith("-");

                val = v.TrimStart(new Char[] { '0' });
                val = val.Remove(val.Length - 1, 1) + lastchar.Replace("-", "");

                iszero = val == "0";

            }
            else
            {

                val = v.TrimStart(new Char[] { '0' });
                iszero = String.IsNullOrEmpty(val);
            }


            if (!iszero)
            {
                int l = val.Length;
                if (l == 1 || l == 2)
                    val += ".00";
                else
                    val = val.Insert(val.Length - 2, ".");

                val = isneg ? "-" + val : val;

            }


            return iszero ? "0.00" : val;
        }



    }
    //for non-A records
    private void add203NonA(string accid, string label, string data)
    {
        if (string.IsNullOrEmpty(data) || data == "0" || data == "0.00")
            return;

        rec203count++;
        rec203s.Add(accid + "@" + rec203count.ToString(), new AccountFreeFormText_203 { FreeFormText = label + data });
    }
    private string getDateNotes(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue.ToString("MM/dd/yyyy") + ": ";
        else
            return ": ";
    }
    private void AddPlacementRow<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList);
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output0Buffer.AddRow();
        Output0Buffer.Data = recordString.ToUpper();
    }


}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ExceptionBuffer: ScriptBuffer

{
    public ExceptionBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class PlacementBuffer: ScriptBuffer

{
    public PlacementBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class LegalBuffer: ScriptBuffer

{
    public LegalBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class CollateralBuffer: ScriptBuffer

{
    public CollateralBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class NotesBuffer: ScriptBuffer

{
    public NotesBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ComakerBuffer: ScriptBuffer

{
    public ComakerBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public ExceptionBuffer ExceptionBuffer;

    public PlacementBuffer PlacementBuffer;

    public LegalBuffer LegalBuffer;

    public CollateralBuffer CollateralBuffer;

    public NotesBuffer NotesBuffer;

    public ComakerBuffer ComakerBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

        if (null != ExceptionBuffer)
        {
            ExceptionBuffer.SetEndOfRowset();
            ExceptionBuffer = null;
        }

        if (null != PlacementBuffer)
        {
            PlacementBuffer.SetEndOfRowset();
            PlacementBuffer = null;
        }

        if (null != LegalBuffer)
        {
            LegalBuffer.SetEndOfRowset();
            LegalBuffer = null;
        }

        if (null != CollateralBuffer)
        {
            CollateralBuffer.SetEndOfRowset();
            CollateralBuffer = null;
        }

        if (null != NotesBuffer)
        {
            NotesBuffer.SetEndOfRowset();
            NotesBuffer = null;
        }

        if (null != ComakerBuffer)
        {
            ComakerBuffer.SetEndOfRowset();
            ComakerBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Exception"))
            {
                ExceptionBuffer = new ExceptionBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Placement"))
            {
                PlacementBuffer = new PlacementBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Legal"))
            {
                LegalBuffer = new LegalBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Collateral"))
            {
                CollateralBuffer = new CollateralBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Notes"))
            {
                NotesBuffer = new NotesBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Comaker"))
            {
                ComakerBuffer = new ComakerBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 ExceptionConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ExceptionConnection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String currentFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["currentFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FullInboundDirectory
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FullInboundDirectory"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0721bb5d52684600a21a98c30ea8893f.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{225DD62C-FC95-4D7A-B72A-356AC03734FE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0721bb5d52684600a21a98c30ea8893f</RootNamespace>
    <AssemblyName>SC_0721bb5d52684600a21a98c30ea8893f</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="CommonClasses, Version=1.1.0.0, Culture=neutral, PublicKeyToken=1f7181b3d59d8c40, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\CommonClasses\1.1.0.0\CommonClasses.dll</HintPath>
    </Reference>
    <Reference Include="FileHelpers, Version=3.3.0.0, Culture=neutral, PublicKeyToken=3e0c08d59cc3d657, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\FileHelpers\1.1.0.0\FileHelpers.dll</HintPath>
    </Reference>
    <Reference Include="RGS.ArtivaGeneralPurpose, Version=1.20.0.0, Culture=neutral, PublicKeyToken=972530eacd4bf30a, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>R:\Software\RGS.ArtivaGeneralPurpose\1.1.0.0\RGS.ArtivaGeneralPurpose.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebuge0c940cd-73bf-4d58-9077-6a5c621d5306/4bb861a7-9eca-414a-a9b5-65cb1b67ddb1&quot;" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Settings.get_Default():SC_0721bb5d52684600a21a98c30ea8893f.Properties.Sett" +
    "ings")]

namespace SC_0721bb5d52684600a21a98c30ea8893f.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_0721bb5d52684600a21a98c30ea8893f</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_0721bb5d52684600a21a98c30ea8893f</msb:DisplayName>
		<msb:ProjectId>{398B7F04-BC0A-43AA-9F65-6B79D31988EE}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_0721bb5d52684600a21a98c30ea8893f.csproj"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0721bb5d52684600a21a98c30ea8893f")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0721bb5d52684600a21a98c30ea8893f")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0721bb5d52684600a21a98c30ea8893f.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0721bb5d52684600a21a98c30ea8893f.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0721bb5d52684600a21a98c30ea8893f.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
LwIAAB8UbyEAAApvIgAAChMtJSBDAgAAHxFvIQAACm8iAAAKEy4lIFQCAAAfFG8hAAAKbyIAAAoT
LyUgaAIAAB8UbyEAAApvIgAAChMwJSB8AgAAHxRvIQAACm8iAAAKEzElIJACAAAfC28hAAAKbyIA
AAoTMiUgmwIAAB8LbyEAAApvIgAAChMzJSCmAgAAHwtvIQAACm8iAAAKEzQlILECAAAYbyEAAApv
IgAAChM1Fh8UbyEAAApvIgAAChM2AhE2cqcHAHARBSgNAAAGAhE2csUHAHACEQYoCwAABigNAAAG
AhE2cukHAHARBygNAAAGAhE2cgcIAHARCCgNAAAGAhE2ciMIAHACEQkoCwAABigNAAAGAhE2clcI
AHARCigNAAAGAhE2cnkIAHARCygNAAAGAhE2cpsIAHACEQwoCwAABigNAAAGAhE2ctMIAHARDSgN
AAAGAhE2cg0JAHACEQ4oCwAABigNAAAGAhE2cj8JAHARDygNAAAGAhE2cl8JAHACERAoCwAABigN
AAAGAhE2cnsJAHACEREoCwAABigNAAAGAhE2cpMJAHACERIoCwAABigNAAAGAhE2crMJAHACERMo
CwAABigNAAAGAhE2ctcJAHACERQoCwAABigNAAAGAhE2cvkJAHACERUoCwAABigNAAAGAhE2ciEK
AHARFigNAAAGAhE2cl0KAHARFygNAAAGAhE2cqMKAHARGCgNAAAGAhE2cukKAHARGSgNAAAGAhE2
ci8LAHARGigNAAAGAhE2cnULAHARGygNAAAGAhE2crsLAHACERwoCwAABigNAAAGAhE2cu8LAHAC
ER0oCwAABigNAAAGAhE2cjMMAHACER4oCwAABigNAAAGAhE2cncMAHACER8oDAAABigNAAAGAhE2
cpkMAHACESAoDAAABigNAAAGAhE2crsMAHACESEoDAAABigNAAAGAhE2ct0MAHACESIoDAAABigN
AAAGAhE2cv8MAHACESMoDAAABigNAAAGAhE2ciENAHACESQoDAAABigNAAAGAhE2ckMNAHACESUo
DAAABigNAAAGAhE2cmUNAHACESYoDAAABigNAAAGAhE2cocNAHARLigNAAAGAhE2crkNAHARLygN
AAAGAhE2cusNAHARMCgNAAAGAhE2ch8OAHARMSgNAAAGAhE2clMOAHARMigNAAAGAhE2cn8OAHAR
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
KAJMAJcONQKRADgEOwKRACYGDQIsALIDQwChAJcOBgBUAJcOBgCxAJcOBgC5AJcOBgDBAJcOBgDJ
AJcOBgAMANkSSgIMAFcLUAKJAb4QVwLZAJcOXQLZANkKZgKhAP0MDQLZAGsKSwCRAPYEDQKhANsH
DQKhABkDDQKhACMHIAKhAI4HIAJcAL8JCQKxAc8FdQLpALYQewJcAJcONQKhAOsGIAKhANgGIAKh
AHwHIAKhAJoRgQLZABwMhQLZABkTZgKhAHQEgQKhAEkEgQKhAF0EgQLpALMSjgKhAOAGIAKhAC8G
DQKhAEIMDQJ5ABAKDQJ5AP0JDQJ5ACEKDQKRAMUEDQKRAM4EDQKRAOAEDQLZAJcOAQDZAJMLhQKR
AJ4HDQKRAF8HIAKRADoHIAKRAIQQOwKRAOAROwKRAKkKOwKRAPAROwKRAIEQOwKRAMwKOwKRAHgF
DQKRAAAHIAKRAGsHIAKRAEcHIAKRAJsEDQKJAccRkwLpAGsKmQKxAKMEDQKxAFIMDQK5ABMHIAK5
AJQDDQK5AIMFDQK5ALYDIAK5AAgLDQK5ANUDIAKxAbUBngLBAFIGowLJAJ8LDQIUAIkOqwJkAEgR
vgJsAL0S/gGJAfYQ0QJsALUJ2AJkACkSCQIsAIkOqwJ0AEgRvgJ8AL0S/gF8ALUJ2AJ0ACkSCQJU
AFcLCwNUAFQRFgMkAIkOqwKEAEgRvgKMAL0S/gGMALUJ2AKEACkSCQIcAIkOqwKUAEgRvgKcAL0S
/gGcALUJ2AKUACkSCQJUAO0MBgBJAUcDPwMBARcFSwABASkESwDBAXMORQOJAJcOBgCJADISDQJU
ALIDNQKJAYkKVgOJAQ4EWwOJAX4KFgOJAdERYQPZAG4MgQKJASUTFwIJAZcOEADpANIQdQMkALID
QwCBAJcOBgCBADISDQIcALIDQwCJAVEQnwO5AWsKSwCJAZIKVgOJAdIJAwKkAJcOBgCkALIDNQLZ
AUoKqwOJARYEsQGJARoOSwAxAZcOuwMxAWALxwMxAU8LAQDhAZcOEAAxAYUSBgAxAecQBgAxAeoQ
CQJJAZcOBgBJASID0QNJARgQ2QMhAZcOBgDBAeQL3wPpAacF5QPxAfwN7ANJAbwP8gP5AVcL+ANJ
AW4S/wMBAj8SBQQZAlYFDAQZAuUSFQRhAZcOGwR5AZcOBgAuAAsAQQUuABMASgUuABsAaQUuACMA
cgUuACsAmwUuADMAmwUuADsAmwUuAEMAcgUuAEsAoQUuAFMAmwUuAFsAuAVDAGMAAAajAXMAAAbj
AWsAAAZJAnsAaQVpAnsAaQWBA2sAAAZUAFADZwOEA4wDkAPNAwMAAQAEAAMABQAFAAYABwAHAAkA
CAALAAkADQALAA8ADAAQAA0AEgAOABQAAABYAyIFAABDCyYFAABYAyIFAABDCyYFAABYAyIFAABD
CyYFAABYAyIFAABDCyYFAABYAyIFAABDCyYFAABYAyIFAABDCyYFAABYAyIFAABDCyYFAAAIDCoF
AABsBSIFAAD2EiIFAADsDTAFAAB+BjYFAAAAETwFAQASAAMAAQATAAUAAQAYAAcAAQAZAAkAAQAe
AAsAAQAfAA0AAQAkAA8AAQAlABEAAQAqABMAAQArABUAAQAwABcAAQAxABkAAQA2ABsAAQA3AB0A
AgBBAB8AAgBDACEAAgBEACMAAgBGACUAAgBHACcAAQBIACcAAgBJACkAHAAjACsAMwA7AL8B6QH4
AS4CQwJuArYCyQLiAuoCGgMiAyoDMgOkAwSAAAABAAAAUh3WUAAAAAAAANkJAAAEAAAAAAAAAAAA
AAAjBGIDAAAAAAsAAAAAAAAAAAAAACwEqhEAAAAAAQABAAAAAAAAAAAANQS3BgAAAAALAAAAAAAA
AAAAAAAsBPwRAAAAAAsAAAAAAAAAAAAAACwEiwwAAAAABAAAAAAAAAAAAAAAIwRpCwAAAAAEAAAA
AAAAAAAAAAAjBEYGAAAAAAsAAAAAAAAAAAAAACwErgwAAAAAAwACAAcAAAAAAAAAPgRjEAAAAAAA
AAAAAQAAADsPAAAPAAIAAAAAAB8APAM9AOUBHgCmAh4A3QIeAPICHgD3Ah4A/AIeAAEDHgAGAx4A
EQMeADoDjQG2AwEAiQAAAABQbGFjZW1lbnRJbmZvcm1hdGlvbl8xMDAASURUU0NvbXBvbmVudE1l
dGFEYXRhMTAwAElEVFNWYXJpYWJsZTEwMABJRFRTUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9u
MTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABJRFRTQ29ubmVjdGlvbk1hbmFnZXIxMDAASURU
U1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABTZWdtZW50YXRpb25TY29yZXNf
MTEwAEFjY291bnRJbmZvcm1hdGlvbl8xMABQYXJ0eUluZm9ybWF0aW9uXzIwADw+OV9fMTZfMAA8
Q3JlYXRlTmV3T3V0cHV0Um93cz5iX18xNl8wADw+OV9fMTZfMQA8Q3JlYXRlTmV3T3V0cHV0Um93
cz5iX18xNl8xAE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBJRW51bWVyYXRvcmAxAExpc3RgMQBB
dHRvcm5leTFBZGRyZXNzTGluZTEAQWRkaXRpb25hbEJhbmtpbmdJbmZvcm1hdGlvbl84MTIAVG9J
bnQzMgA8PjlfXzE2XzIAPENyZWF0ZU5ld091dHB1dFJvd3M+Yl9fMTZfMgBGdW5jYDIAS2V5VmFs
dWVQYWlyYDIARGljdGlvbmFyeWAyAEF0dG9ybmV5MUFkZHJlc3NMaW5lMgBBY2NvdW50RnJlZUZv
cm1UZXh0XzIwMwBhZGQyMDMAPD45X18xNl8zADxDcmVhdGVOZXdPdXRwdXRSb3dzPmJfXzE2XzMA
PD45X18xNl80ADxDcmVhdGVOZXdPdXRwdXRSb3dzPmJfXzE2XzQAQ29uc3VtZXJGcmVlRm9ybVRl
eHRfMjA1ADw+OV9fMTZfNQA8Q3JlYXRlTmV3T3V0cHV0Um93cz5iX18xNl81AENsaWVudEJhbmtp
bmdJbmZvcm1hdGlvbl84MDcAUmV0YWlsQ2x1YkluZm9ybWF0aW9uXzgwOAA8PjkAPE1vZHVsZT4A
YWRkMjAzTm9uQQBDbGllbnRJRABHZXRPdXRwdXRJRABWSU4AU3lzdGVtLklPAFQAc2V0X0RhdGEA
Z2V0X0NvbXBvbmVudE1ldGFEYXRhAGRhdGEAbXNjb3JsaWIAPD5jAGxvb2t1cGFjYwBTeXN0ZW0u
Q29sbGVjdGlvbnMuR2VuZXJpYwBDbGllbnRCYXRjaElkAENsaWVudHNFbnRpdHlJZABBZGQARGF0
ZUxvYWRlZABNYXJrT3V0cHV0c0ZpbmlzaGVkAERhdGVBY2NvdW50QXNzaWduZWQAX2V4Y2VwdGlv
blJlcG9ydENyZWF0ZWQAYWNjaWQAcmVjb3JkAFJlcGxhY2UASXNOdWxsT3JXaGl0ZVNwYWNlAGdl
dF9TdGFja1RyYWNlAFNhbGVQcmljZQBzcHJpY2UAT3RoZXJJbml0aWFsQmFsYW5jZQBJbnRlcmVz
dEluaXRpYWxCYWxhbmNlAFByaW5jaXBhbEluaXRhbEJhbGFuY2UAZGVmYXVsdEluc3RhbmNlAE1J
T0NvZGUAQ2hhcmdlT2ZmQ29kZQBBdHRvcm5leTFQb3N0YWxDb2RlAExvYW5Db2RlAExlbmRlck9m
ZmljZXJDb2RlAERlYWxlckNvZGUAU3RhdHVzQ29kZQBBZ2VuY3lDb2RlAHJlYXNvbmNvZGUAc3Rh
dHVzY29kZQBnZXRfTWVzc2FnZQBNYWtlAG1ha2UARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBSdW50
aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBnZXRfY3VycmVudEZpbGUAU2Vjb25kTmFt
ZQBJbmNvbWluZ0ZpbGVOYW1lAExhc3ROYW1lAEZpcnN0TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlv
bkJ5TmFtZQBBdHRvcm5leU5hbWUAVG9EYXRlVGltZQBQT0VBZGRyZXNzTGluZQBDb21tb25Fbmdp
bmUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAQXR0b3JuZXkxUGhvbmUATG9hblR5
cGUAU09MQWdyZWVtZW50VHlwZQBXaGVyZQBTeXN0ZW0uQ29yZQBDbGllbnRTY29yZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAR2VuZXJhbFB1cnBvc2VSZWNvcmRCYXNl
AEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAFJHUy5BcnRpdmFHZW5lcmFsUHVycG9zZQBEaXNwb3Nl
AFNPTERhdGUATGlzdGVkRGF0ZQBTZXJ2aWNlRGF0ZQBTYWxlRGF0ZQBOZXh0UGF5bWVudER1ZURh
dGUAQktFZmZlY3RpdmVEYXRlAENoYXJnZU9mZkRhdGUAUmVwb0RhdGUAQ29udHJhY3REYXRlAExh
c3RDb250YWN0RGF0ZQBnZXREYXRlAFJlY2VpcHREYXRlAEludGVyZXN0VGhydURhdGUAQ2xpZW50
TGFzdFBheURhdGUARGVsaW5xdWVuY3lEYXRlAEludGVyZXN0UmF0ZQBnZXRGb3JtYXRlZGRhdGUA
Z2V0U3RyZGF0ZQBzZGF0ZQBBdHRvcm5leTFTdGF0ZQBTT0xTdGF0ZQBFZGl0b3JCcm93c2FibGVT
dGF0ZQBEZWxldGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZy
YW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2Vt
Ymx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0
Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVu
dGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBnZXRfVmFs
dWUAZ2V0X0hhc1ZhbHVlAHZhbHVlAFJlbW92ZQBTQ18wNzIxYmI1ZDUyNjg0NjAwYTIxYTk4YzMw
ZWE4ODkzZgBBbHRlcm5hdGVQaG9uZUZsYWcAUHJpbWFyeVBob25lRmxhZwBNYWlsUmV0dXJuRmxh
ZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFdyaXRlU3RyaW5nAGdldF9Db25uZWN0aW9uU3Ry
aW5nAFRvU3RyaW5nAFN1YnN0cmluZwBnZXRfTGVuZ3RoAEVuZHNXaXRoAFN0YXJ0c1dpdGgARGF0
ZU9mQmlydGgAT3JpZ2luYWxCYWwAZ2V0RGF0ZUxlZ2FsAFRvRGVjaW1hbABOZXRQcmluY2lwYWwA
b3BfTGVzc1RoYW5PckVxdWFsAGxhYmVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABQbGFjZW1lbnRM
ZXZlbABTQ18wNzIxYmI1ZDUyNjg0NjAwYTIxYTk4YzMwZWE4ODkzZi5kbGwAc2V0X0RhdGFfSXNO
dWxsAFNldE51bGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVtAFRyaW0AZ2V0TnVtAHJlc291cmNl
TWFuAFNjcmlwdE1haW4Ab3BfRGl2aXNpb24ATG9jYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24A
U3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AZ2V0X1J1bnRpbWVDb25uZWN0
aW9uQ29sbGVjdGlvbgBnZXRfRXhjZXB0aW9uQ29ubmVjdGlvbgBvcF9BZGRpdGlvbgBJbnZhbGlk
T3BlcmF0aW9uRXhjZXB0aW9uAERlYnREZXNjcmlwdGlvbgBDaGFyZ2VPZmZSZWFzb24AQ3VsdHVy
ZUluZm8AWmVybwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRU
U1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAFN5c3RlbS5M
aW5xAENvbGxhdGVyYWxZZWFyAENsZWFyAHllYXIAQ2hhcgBDbGllbnRSZWZlcmVuY2VOdW1iZXIA
UE9FUGhvbmVOdW1iZXIAUHJpbWFyeVBob25lTnVtYmVyAGZvcm1hdE51bWJlcgBTb2NpYWxTZWN1
cml0eU51bWJlcgBJRm9ybWF0UHJvdmlkZXIAT3V0cHV0MEJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBM
ZWdhbEJ1ZmZlcgBDb2xsYXRlcmFsQnVmZmVyAEV4Y2VwdGlvbkJ1ZmZlcgBDb21ha2VyQnVmZmVy
AE5vdGVzQnVmZmVyAFBsYWNlbWVudEJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFu
YWdlcgBnZXRfQ29ubmVjdGlvbk1hbmFnZXIAY29tYWtlcgBUb1VwcGVyAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGlu
ZS5XcmFwcGVyAEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3Rv
cgBzdHIAcmVjMjBzAHJlYzIwM3MAcmVjMjA1cwByZWM4MDdzAE91dHB1dElEcwBTeXN0ZW0uRGlh
Z25vc3RpY3MAUkdTLkFydGl2YUdlbmVyYWxQdXJwb3NlLkRhdGEuUmVjb3JkcwBTeXN0ZW0uUnVu
dGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMDcyMWJiNWQ1MjY4NDYw
MGEyMWE5OGMzMGVhODg5M2YuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2lu
Z01vZGVzAFNDXzA3MjFiYjVkNTI2ODQ2MDBhMjFhOThjMzBlYTg4OTNmLlByb3BlcnRpZXMAZ2V0
X1JlYWRPbmx5VmFyaWFibGVzAERhdGVUaW1lU3R5bGVzAFJlYWRMaW5lcwBhZGQyMDVOb3RlcwBn
ZXREYXRlTm90ZXMAQnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAFNldHRpbmdz
AFN5c3RlbS5Db2xsZWN0aW9ucwBDb25uZWN0aW9ucwBnZXRfQ2hhcnMAQnVmZmVycwBGaWxlSGVs
cGVycwBJc0J1c2luZXNzAEV4aXN0cwBOZXRBc3NvY2lhdGVkQ29zdHMARmluaXNoT3V0cHV0cwBD
cmVhdGVOZXdPdXRwdXRSb3dzAEFkZERheXMAQ29uY2F0AGFkZDIwM0NvbGxhdABUcnlQYXJzZUV4
YWN0AE9iamVjdABTZXRFbmRPZlJvd3NldABTcGxpdABnZXRfRGVmYXVsdABQbGFjZU9mRW1wbG95
bWVudABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQAZ2V0X0N1
cnJlbnQAZ2V0X0NvdW50AHJlYzIwY291bnQAcmVjMjAzY291bnQAcmVjMjA1Y291bnQAcmVjODA3
Y291bnQAY29tYWtlcmNvdW50AENoYXJnZU9mZkFtb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4
U2NyaXB0AFRyaW1TdGFydABJbnNlcnQAQ29udmVydABBY2NydWVkSW50ZXJlc3QATmV0SW50ZXJl
c3QATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAUHJpbWVPdXRwdXQATW92ZU5leHQA
RnJlZUZvcm1UZXh0AEdldFZhbHVlV2l0aENvbnRleHQAU2NyaXB0Q29tcG9uZW50RXZhbENvbnRl
eHQAZ2V0X0V2YWx1YXRvckNvbnRleHQAdgBBZGRSb3cAQWRkUGxhY2VtZW50Um93AEFkZHJlc3NV
bml0X0FwdE9yUE9Cb3gAZ2V0X1RvZGF5AGdldF9LZXkAUmVsYXRpb25zaGlwVHlwZUtleQBDb250
YWluc0tleQBnZXRfQXNzZW1ibHkAZ2V0X0Z1bGxJbmJvdW5kRGlyZWN0b3J5AEF0dG9ybmV5MUNp
dHkAb3BfRXF1YWxpdHkAb3BfSW5lcXVhbGl0eQBDb3VudHkASXNOdWxsT3JFbXB0eQAABTIAMAAA
CVMASwBJAFAAAAUyADEAAClJAE4AUwBVAFIAQQBOAEMARQAgAEQARQBGAEkAQwBJAEUATgBDAFkA
AAUyADIAABVCAEEATgBLAFIAVQBQAFQAQwBZAAAFMgAzAAA3QwBVAFMAVABPAE0ARQBSACAATwBW
AEUAUgAgAEUAWABUAEUATgBEAEUARAAgAEQARQBCAFQAAAUyADQAAEFMAE8AUwBTACAATwBGACAA
SgBPAEIALwBSAEUARABVAEMAVABJAE8ATgAgAFcATwBSAEsAIABIAE8AVQBSAFMAAAUyADUAABtT
AE0AQQBMAEwAIABCAEEATABBAE4AQwBFAAAFMgA2AAAjVgBPAEwAVQBOAFQAQQBSAFkAIABUAFUA
UgBOACAASQBOAAAFMgA3AAAnTQBFAEMASABBAE4ASQBDAEEATAAgAFAAUgBPAEIATABFAE0AUwAA
BTIAOAAAEUQARQBDAEUAQQBTAEUARAAABTIAOQAAQU0ARQBDAEgAQQBOAEkAQwBTACAATABJAEUA
TgAvAFYARQBIAEkAQwBMAEUAIABJAE0AUABPAFUATgBEAEUARAAABTMAMAAACU0ASQBTAEMAAAUz
ADEAAB1VAE4ASQBOAFMAVQBSAEUARAAgAEwATwBTAFMAAAUzADIAADFMAEUARwBBAEwAIABBAEMA
VABJAE8ATgAgAEkATgAgAFAAUgBPAEcAUgBFAFMAUwAABzQAMQAwAAApUAByAGkAbQBhAHIAeQAg
AEEAZwBlAG4AYwB5ACAAUABsAGMAbQB0AAAHNAAxADcAACVQAHIAaQBtAGEAcgB5ACAAQQBnAGUA
bgBjAHkAIABDACYAUgAABzQAMgAwAAAtUwBlAGMAbwBuAGQAYQByAHkAIABBAGcAZQBuAGMAeQAg
AFAAbABjAG0AdAAABzQAMgA3AAApUwBlAGMAbwBuAGQAYQByAHkAIABBAGcAZQBuAGMAeQAgAEMA
JgBSAAAHNAAzADAAACtUAGUAcgB0AGkAYQByAHkAIABBAGcAZQBuAGMAeQAgAFAAbABjAG0AdAAA
BzQAMwA3AAAnVABlAHIAdABpAGEAcgB5ACAAQQBnAGUAbgBjAHkAIABDACYAUgAABzQANAAwAAAn
RgBvAHUAcgB0AGgAIABBAGcAZQBuAGMAeQAgAFAAbABjAG0AdAAABzQANAA3AAAjRgBvAHUAcgB0
AGgAIABBAGcAZQBuAGMAeQAgAEMAJgBSAAAHNAA1ADAAACVGAGkAZgB0AGgAIABBAGcAZQBuAGMA
eQAgAFAAbABjAG0AdAAABzQANwAwAABFRgBpAGYAdABoACAAQQBnAGUAbgBjAHkAIABDACYAUgAv
ACAAQQBnAGUAbgBjAHkAIABFAHgAaABhAHUAcwB0AGUAZAAABzQAOQAwAAAjQQBnAGUAbgBjAHkA
IAAtACAARABlAGMAZQBhAHMAZQBkAAEHNAA5ADEAADFBAGcAZQBuAGMAeQAgAC0AIABTAGUAdAB0
AGwAZQBkACAAaQBuACAAZgB1AGwAbAABBzQAOQAyAAArQQBnAGUAbgBjAHkAIAAtACAAUABhAGkA
ZAAgAGkAbgAgAEYAdQBsAGwAAQc0ADkAMwAAN0EAZwBlAG4AYwB5ACAALQAgAEQAaQBzAHAAdQB0
AGUAIABVAG4AcgBlAHMAbwBsAHYAZQBkAAEHNAA5ADQAADVBAGcAZQBuAGMAeQAgAC0AIABDAHIA
ZQBkAGkAdAAgAEMAbwB1AG4AcwBlAGwAaQBuAGcAAQc0ADkANQAAL0EAZwBlAG4AYwB5ACAALQAg
AEMAZQBhAHMAZQAgACYAIABEAGUAcwBpAHMAdAABBzQAOQA2AAAlQQBnAGUAbgBjAHkAIAAtACAA
QwBvAG0AcABsAGEAaQBuAHQAAQc0ADkANwAAK0EAZwBlAG4AYwB5ACAALQAgAEEAdAB0AHkAIABD
AG8AbgB0AGEAYwB0AAEHNAA5ADgAADFBAGcAZQBuAGMAeQAgAC0AIABGAHIAYQB1AGQAIABJAG4A
ZABpAGMAYQB0AGUAZAABBzQAOQA5AAAvQQBnAGUAbgBjAHkAIAAtACAATwB1AHQAIABvAGYAIABT
AHQAYQB0AHUAdABlAAEHNwAwADUAAClQAHIAbwBiAGEAdABlACAAQQBnAGUAbgBjAHkAIABQAGwA
YwBtAHQAAAc4ADAAMQAANUEAZwBlAG4AYwB5ACAALQAgAEIAYQBuAGsAcgB1AHAAdABjAHkAIABG
AGkAbABpAG4AZwABBzgAMwAwAAA7QgBhAG4AawByAHUAcAB0ACAAQwBoAGEAcAB0AGUAcgAgADEA
MwAgAFUAbgBzAGUAYwB1AHIAZQBkAAAHOAA3ADAAADlCAGEAbgBrAHIAdQBwAHQAIABDAGgAYQBw
AHQAZQByACAANwAgAFUAbgBzAGUAYwB1AHIAZQBkAAAHOQA5ADEAACdEAGUAYQBkAGYAaQBsAGUA
IAAtACAAQwBoACAAMQAzACAAQgBLAAEHOQA5ADIAACVEAGUAYQBkAGYAaQBsAGUAIAAtACAAQwBo
ACAANwAgAEIASwABAQAdUwBVAEkAVAAgAFIARQBBAFMATwBOADoAIAAgAAAjUwBVAEkAVAAgAEYA
SQBMAEUAIABEAEEAVABFADoAIAAgAAAdQwBBAFMARQAgAE4AVQBNAEIARQBSADoAIAAgAAAbQwBP
AFUAUgBUACAATgBBAE0ARQA6ACAAIAAAM0oAVQBEAEcATQBFAE4AVAAgAFIARQBDAE8AUgBEAEUA
RAAgAEQAQQBUAEUAOgAgACAAACFKAFUARABHAE0ARQBOAFQAIABCAE8ATwBLADoAIAAgAAAhSgBV
AEQARwBNAEUATgBUACAAUABBAEcARQA6ACAAIAAAN0oAVQBEAEcATQBFAE4AVAAgAEUAWABQAEkA
UgBBAFQASQBPAE4AIABEAEEAVABFADoAIAAgAAA5QwBSAEUARABJAFQATwBSACAATQBFAEUAVABJ
AE4ARwAgAEwATwBDAEEAVABJAE8ATgA6ACAAIAAAMUMAUgBFAEQASQBUAE8AUgAgAE0ARQBFAFQA
SQBOAEcAIABEAEEAVABFADoAIAAgAAAfQwBBAFMARQAgAE4AVQBNAEUAUgAgADIAOgAgACAAABtG
AEkATABFAEQAIABEAEEAVABFADoAIAAgAAAXQgBBAFIAIABEAEEAVABFADoAIAAgAAAfRABJAFMA
TQBJAFMAUwAgAEQAQQBUAEUAOgAgACAAACNEAEkAUwBDAEgAQQBSAEcARQAgAEQAQQBUAEUAOgAg
ACAAACFSAEUAQQBGAEYASQBSAE0AIABEAEEAVABFADoAIAAgAAAnUwBUAEEAWQAgAEwASQBGAFQA
RQBEACAARABBAFQARQA6ACAAIAAAO0IAQQBOAEsAUgBVAFAAVABDAFkAIABBAFMAUwBFAFQAIABJ
AE4ARABJAEMAQQBUAE8AUgA6ACAAIAAARUIAQQBOAEsAUgBVAFAAVABDAFkAIABVAFMARQBSACAA
RABFAEYASQBOAEUARAAgAEEATABQAEgAQQAgADIAOgAgACAAAEVCAEEATgBLAFIAVQBQAFQAQwBZ
ACAAVQBTAEUAUgAgAEQARQBGAEkATgBFAEQAIABBAEwAUABIAEEAIAAzADoAIAAgAABFQgBBAE4A
SwBSAFUAUABUAEMAWQAgAFUAUwBFAFIAIABEAEUARgBJAE4ARQBEACAAVgBBAEwAVQBFACAAMQA6
ACAAIAAARUIAQQBOAEsAUgBVAFAAVABDAFkAIABVAFMARQBSACAARABFAEYASQBOAEUARAAgAFYA
QQBMAFUARQAgADIAOgAgACAAAEVCAEEATgBLAFIAVQBQAFQAQwBZACAAVQBTAEUAUgAgAEQARQBG
AEkATgBFAEQAIABWAEEATABVAEUAIAAzADoAIAAgAAAzQgBBAE4ASwBSAFUAUABUAEMAWQAgAEYA
SQBMAEkATgBHACAARABBAFQARQA6ACAAIAAAQ0IAQQBOAEsAUgBVAFAAVABDAFkAIABVAFMARQBS
ACAARABFAEYASQBOAEUARAAgAEQAQQBUAEUAIAAyADoAIAAgAABDQgBBAE4ASwBSAFUAUABUAEMA
WQAgAFUAUwBFAFIAIABEAEUARgBJAE4ARQBEACAARABBAFQARQAgADMAOgAgACAAACFVAFMARQBS
ACAAQQBNAE8AVQBOAFQAIAAxADoAIAAgAAAhVQBTAEUAUgAgAEEATQBPAFUATgBUACAAMgA6ACAA
IAAAIVUAUwBFAFIAIABBAE0ATwBVAE4AVAAgADMAOgAgACAAACFVAFMARQBSACAAQQBNAE8AVQBO
AFQAIAA0ADoAIAAgAAAhVQBTAEUAUgAgAEEATQBPAFUATgBUACAANQA6ACAAIAAAIVUAUwBFAFIA
IABBAE0ATwBVAE4AVAAgADYAOgAgACAAACFVAFMARQBSACAAQQBNAE8AVQBOAFQAIAA3ADoAIAAg
AAAhVQBTAEUAUgAgAEEATQBPAFUATgBUACAAOAA6ACAAIAAAMUwARQBHAEEATAAgAFUAUwBFAFIA
IABWAEEAUgBJAEEAQgBMAEUAIAA4ADoAIAAgAAAxTABFAEcAQQBMACAAVQBTAEUAUgAgAFYAQQBS
AEkAQQBCAEwARQAgADkAOgAgACAAADNMAEUARwBBAEwAIABVAFMARQBSACAAVgBBAFIASQBBAEIA
TABFACAAMQAwADoAIAAgAAAzTABFAEcAQQBMACAAVQBTAEUAUgAgAFYAQQBSAEkAQQBCAEwARQAg
ADEAMQA6ACAAIAAAK0wARQBHAEEATAAgAFAASABPAE4ARQAgAEQAQQBUAEUAIAAyADoAIAAgAAAh
TABFAEcAQQBMACAAUABIAE8ATgBFACAAMwA6ACAAIAAAK0wARQBHAEEATAAgAFUAUwBFAFIAIABQ
AEgATwBOAEUAIAA0ADoAIAAgAAArQgBBAE4ASwBSAFUAUABUAEMAWQAgAEMASABBAFAAVABFAFIA
OgAgACAAAAlBAFQAVABZAAADQAAAA0MAAANJAAALQwBPAE0AQQBLAAADJQAAAyAAAAcsAEEALAAA
BywALgAsAAADLAAABQoADQAAM0MAbABpAGUAbgB0ACAAUgBlAGYAZQByAGUAbgBjAGUAIABOAHUA
bQBiAGUAcgA6ACAAABE7ACAATgBhAG0AZQA6ACAAACU7ACAATABvAGEAbgAgAFQAeQBwAGUAIABD
AG8AZABlADoAIAAAJzsAIABDAHUAcgByAGUAbgB0ACAAQgBhAGwAYQBuAGMAZQA6ACAAACM7ACAA
TgBlAHQAIABQAHIAaQBuAGMAaQBwAGwAZQA6ACAAADE7ACAATgBlAHQAIABBAHMAcwBvAGMAaQBh
AHQAZQBkACAAQwBvAHMAdABzADoAIAAAITsAIABOAGUAdAAgAEkAbgB0AGUAcgBlAHMAdAA6ACAA
ACU7ACAAUgBlAGMAbwB2AGUAcgBlAHIAIABDAG8AZABlADoAIAAAJzsAIABDAGgAYQByAGcAZQAt
AE8AZgBmACAARABhAHQAZQA6ACAAAVE7ACAAUgBlAGoAZQBjAHQAaQBvAG4AIABSAGUAYQBzAG8A
bgA6ACAAQgBhAGwAYQBuAGMAZQAgADwAIABvAHIAIAA9ACAAMAAuADAAMAAgAAAJQwAxADAAMAAA
DVIAQQBDADEAMAAwAAAJQwA1ADAANQAADVIAQQBDADUAMAA1AABfOwAgAFIAZQBqAGUAYwB0AGkA
bwBuACAAUgBlAGEAcwBvAG4AOgAgAEMAbABpAGUAbgB0ACAAYwBvAGQAZQAgAG4AbwB0ACAAZABl
AHQAZQByAG0AaQBuAGUAZAAhAAAJQQBVAFQATwAAIVAAQQBTAFQAIABEAFUARQAgAEIAQQBMAEEA
TgBDAEUAAAlQAFIASQBNAAADMAAAMUQAUABTACAASQBEAC8AUgBFAEMATwBWAEUAUgBFAFIAIABD
AE8ARABFADoAIAAgAAAbVQBTAEUAUgAgAEYASQBFAEwARAA6ACAAIAAASTsAIABSAGUAagBlAGMA
dABpAG8AbgAgAFIAZQBhAHMAbwBuADoAIABOAG8AIABTAHQAYQB0AHUAdABlACAAZABhAHQAZQAg
AAAhQwBMAEkARQBOAFQAIABTAFQAQQBUAFUAUwA6ACAAIAAAG04ATwBTAE8ATABEAEEAVABFAEgA
TwBMAEQAAAcgAC0AIAABHVMATwBVAFIAQwBFACAAQwBPAEQARQA6ACAAIAAALUwAQQBTAFQAIABD
AE8ATQBNAEUATgBUACAATABJAE4ARQAgADEAOgAgACAAAC1MAEEAUwBUACAAQwBPAE0ATQBFAE4A
VAAgAEwASQBOAEUAIAAyADoAIAAgAAAtTABBAFMAVAAgAEMATwBNAE0ARQBOAFQAIABMAEkATgBF
ACAAMwA6ACAAIAAAKUwAQQBTAFQAIABDAE8ATQBNAEUATgBUACAARABBAFQARQA6ACAAIAAAFU0A
TQAvAGQAZAAvAHkAeQB5AHkAACFTAEUAQwBPAE4ARAAgAE4AQQBNAEUAIAAyADoAIAAgAAAjTQBP
AE4AVABIAEwAWQAgAEkATgBDAE8ATQBFADoAIAAgAAAfTwBUAEgARQBSACAASQBOAEMATwBNAEUA
OgAgACAAACVNAE8ATgBUAEgATABZACAAUABBAFkATQBFAE4AVAA6ACAAIAAAKU8AVABIAEUAUgAg
AE8AQgBMAEkARwBBAFQASQBPAE4AUwA6ACAAIAAAIU8AVwBOAC8AUgBFAE4AVAAgAEMATwBEAEUA
OgAgACAAACVDAE8ATQBNAEkAUwBTAEkATwBOACAAUgBBAFQARQA6ACAAIAAAAzEAAAM1AAAdUABy
AG8AYwBlAHMAcwAgAFYAYQBsAHUAZQBzAAAFCgAKAAAJMAAuADAAMAAAA30AAAN7AAAHLgAwADAA
AAMuAAADLQABC2UAbgAtAFUAUwABEXkAeQB5AHkATQBNAGQAZAAAKUMATwBMAEwAQQBUAEUAUgBB
AEwAIAAyADoAIAAgAFYASQBOADoAIAAADzsAWQBFAEEAUgA6ACAAAA87AE0AQQBLAEUAOgAgAAAZ
OwBSAEUAUABPACAARABBAFQARQA6ACAAABk7AFMATwBMAEQAIABEAEEAVABFADoAIAAAGzsAUwBB
AEwARQAgAFAAUgBJAEMARQA6ACAAABFNAE0AZABkAHkAeQB5AHkAAAUtADAAAQNBAAADSgAABS0A
MQABA0IAAAMyAAADSwAABS0AMgABAzMAAANMAAAFLQAzAAEDRAAAAzQAAANNAAAFLQA0AAEDRQAA
A04AAAUtADUAAQNGAAADNgAAA08AAAUtADYAAQNHAAADNwAAA1AAAAUtADcAAQNIAAADOAAAA1EA
AAUtADgAAQM5AAADUgAABS0AOQABBToAIAAAAy8AAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUA
cgB0AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABB
AHMAcwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAA
aQBuAHMAdABlAGEAZAAuAAARTwB1AHQAcAB1AHQAIAAwAAATRQB4AGMAZQBwAHQAaQBvAG4AABNQ
AGwAYQBjAGUAbQBlAG4AdAAAC0wAZQBnAGEAbAAAFUMAbwBsAGwAYQB0AGUAcgBhAGwAAAtOAG8A
dABlAHMAAA9DAG8AbQBhAGsAZQByAAAnRQB4AGMAZQBwAHQAaQBvAG4AQwBvAG4AbgBlAGMAdABp
AG8AbgAAF2MAdQByAHIAZQBuAHQARgBpAGwAZQAAKUYAdQBsAGwASQBuAGIAbwB1AG4AZABEAGkA
cgBlAGMAdABvAHIAeQAAcVMAQwBfADAANwAyADEAYgBiADUAZAA1ADIANgA4ADQANgAwADAAYQAy
ADEAYQA5ADgAYwAzADAAZQBhADgAOAA5ADMAZgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUA
cwBvAHUAcgBjAGUAcwAADVIATQBTAEgARABSAACikmpIRPJCQa/mYYaOFCWHAAQgAQEIAyAAAQUg
AQEREQQgAQEOBiABARGAtQYVEjkCDg4HFRI5Ag4SPQcVEjkCDhJBBxUSOQIOEkUHFRI5Ag4SSQcg
AgETABMBAyAADgQAAQEOgVUHgO4VEk0BDg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4O
Dg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4O
Dg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4SURI9EkkVElUBEkUSWRJdEmES
ZQ4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODhUSaQEOEj0OEj0O
EkkOEW0CEW0OFRFxARF1DgIRbRFtEW0ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODhURcQERdQ4OEXUV
EXEBEXUVEXkCDhI9FRF9Ag4SPRURfQIOEj0VEXkCDhJJFRF9Ag4SSQgVEXkCDhJFFRF9Ag4SRRUR
eQIOEkEVEX0CDhJBEoCBAgUAAg4ODgQAAQIOCAABFRJNAQ4OBxUSgJUCDgIFIAIBHBgXEAECFRJN
AR4AFRJNAR4AFRKAlQIeAAIDCgEOBRUSTQEOCCAAFRJpARMABRUSaQEOBCAAEwAFIAIOCAgDIAAC
AgYOBgADDg4ODgUAAgIODgIGAgcGFRFxARF1BQABEW0OBhURcQERbQUgAQETAAcGFRFxARFtBhUS
VQESRQUgAQITAAYgARMBEwAFAAEOHQ4IIAUBCAgIAgUHAAICEW0RbQYVEXEBEXUFAAERdRwFIAER
dQ0DBhFtCAACEW0RbRFtBAAAEXUFIAEOHQMEIAEODgQAAQgOAgYIBAoBElEKIAAVEXkCEwATAQcV
EXkCDhI9CiAAFRF9AhMAEwEHFRF9Ag4SPQYgAR0OHQMEIAATAQQKARI9BxUReQIOEkkHFRF9Ag4S
SQQKARJJBAoBElkECgESXQQKARJhBAoBEmUFIAETAAgECgESRQMgAAgHFRF5Ag4SRQcVEX0CDhJF
BxUReQIOEkEHFRF9Ag4SQQQKARJBBSAAEoDhCiAGAQgODg4IEAIFBwMCDggEIAECDgUgAg4ODgUg
Ag4IDg0HAxKAhRF1FRFxARF1DgAFAg4OEoDlEYDpEBF1BwcCEoCFEXUDBwEODgcHFRI5Ag4ODg4C
AgMIBCABAwgGFRJVAR4AChABAQ4VEk0BHgAECgEeAAsgAwESgJ0dCBKAoQUgAgEIHAMHAQgHAAII
EoChDgUgAR0ICAUgABKA9QYgARKA+Q4FIAASgKkFIAASgP0GIAESgQEcBQAAEoEFBiABHBKBCQgA
ARKBDRGBEQUgABKBFQcgAgEOEoEVCLd6XFYZNOCJCImEXc2AgMyRCPoM7UpFUaeCCD4MCNWcw9ZX
BwYVEjkCDg4IBhUSOQIOEj0IBhUSOQIOEkEIBhUSOQIOEkUIBhUSOQIOEkkDBhIsAwYSMAMGEgwD
BhIQAwYSFAMGEhgDBhIcAwYSIAMGEiQEBhKApQQGEoCxBAYSgIUDBhI4AwYSPAgGFRKAlQIOAgsg
AwEODhUSVQESRQUgARFtDgkgARURcQERdQ4KIAcBDg4ODg4ODgYgAwEODg4GMAEBAR4ABCABAQIN
IAQBCB0IHRKAnRKAoQYgAQESgKUFAAASgLEFAAASgIUGAAEBEoCFBAAAEjgDAAABAygADgMoAAIF
KAASgKkFCAASgLEFCAASgIUECAASOAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRo
cm93cwEIAQACAAAAAAAoAQAjU0NfMDcyMWJiNWQ1MjY4NDYwMGEyMWE5OGMzMGVhODg5M2YAAAUB
AAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4w
AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0BAEAAAAAAAC0AAAAzsrv
vgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJz
aW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0
ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBB
RFC0AAAAjKEAAAAAAAAAAAAApqEAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJihAAAAAAAAAAAA
AAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWMAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDWUFIdAAABANZQUh0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAQwBfADAANwAyADEAYgBiADUAZAA1ADIANgA4ADQANgAwADAAYQAyADEAYQA5ADgAYwAz
ADAAZQBhADgAOAA5ADMAZgAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA3ADUAMAA2AC4AMgAwADYAOQA0AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAQwBfADAANwAyADEAYgBiADUAZAA1ADIANgA4ADQANgAwADAAYQAyADEAYQA5ADgAYwAzADAA
ZQBhADgAOAA5ADMAZgAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBDAF8AMAA3ADIAMQBiAGIANQBkADUAMgA2ADgANAA2ADAAMABhADIAMQBhADkA
OABjADMAMABlAGEAOAA4ADkAMwBmAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAQwBfADAANwAyADEAYgBiADUAZAA1ADIANgA4ADQANgAwADAAYQAyADEAYQA5ADgA
YwAzADAAZQBhADgAOAA5ADMAZgAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwA1ADAANgAuADIAMAA2ADkANAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA1ADAANgAuADIAMAA2ADkANAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAAC4MQAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0721bb5d52684600a21a98c30ea8893f</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">User::currentFile,User::FullInboundDirectory</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">49415fb11c9ac03e14b738627dfad86f</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">c7e07c537674560335bbfa700f595405d5b7ad81</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Create_CSVs\Process_Files\Script Component.Connections[ExceptionConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="ExceptionConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception]"
                      hasSideEffects="true"
                      name="Exception">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement]"
                      hasSideEffects="true"
                      name="Placement">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Placement].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal]"
                      hasSideEffects="true"
                      name="Legal">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Legal].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral]"
                      hasSideEffects="true"
                      name="Collateral">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Collateral].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes]"
                      hasSideEffects="true"
                      name="Notes">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Notes].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker]"
                      hasSideEffects="true"
                      name="Comaker">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Comaker].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Create_CSVs\Process_Files.Paths[Exception]"
                  endId="Package\Create_CSVs\Process_Files\Exceptions.Inputs[Flat File Destination Input]"
                  name="Exception"
                  startId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Exception]" />
                <path
                  refId="Package\Create_CSVs\Process_Files.Paths[Output 0]"
                  endId="Package\Create_CSVs\Process_Files\Artiva_Placement_File.Inputs[Flat File Destination Input]"
                  name="Output 0"
                  startId="Package\Create_CSVs\Process_Files\Script Component.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{CC68F0F5-2A65-4ADA-A569-C5854425F3B5}"
          DTS:ObjectName="{CC68F0F5-2A65-4ADA-A569-C5854425F3B5}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::currentFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="141,42"
          Id="Package\Create_CSVs\Process_Files"
          TopLeft="44,21" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="281,126"
          Size="281,169"
          Id="Package\Create_CSVs"
          TopLeft="65.5,65.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Create_CSVs\Process_Files">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="163,42"
          Id="Package\Create_CSVs\Process_Files\Script Component"
          TopLeft="295.5,122.5" />
        <NodeLayout
          Size="129,42"
          Id="Package\Create_CSVs\Process_Files\Exceptions"
          TopLeft="508,42" />
        <NodeLayout
          Size="182,42"
          Id="Package\Create_CSVs\Process_Files\Artiva_Placement_File"
          TopLeft="66,46" />
        <EdgeLayout
          Id="Package\Create_CSVs\Process_Files.Paths[Output 0]"
          TopLeft="351.166666666667,122.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-194.166666666667,-34.5"
              Start="0,0"
              End="-194.166666666667,-27">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-10.0012150668287" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-10.0012150668287"
                    Point2="0,-14.0012150668287"
                    Point3="-4,-14.0012150668287" />
                  <mssgle:LineSegment
                    End="-190.166666666667,-14.0012150668287" />
                  <mssgle:CubicBezierSegment
                    Point1="-190.166666666667,-14.0012150668287"
                    Point2="-194.166666666667,-14.0012150668287"
                    Point3="-194.166666666667,-18.0012150668287" />
                  <mssgle:LineSegment
                    End="-194.166666666667,-27" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-117.239055989584,-9.0012150668287,40.3114453125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Create_CSVs\Process_Files.Paths[Exception]"
          TopLeft="415.75,122.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="156.75,-38.5"
              Start="0,0"
              End="156.75,-31">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-9.24647887323944" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-9.24647887323944"
                    Point2="0,-13.2464788732394"
                    Point3="4,-13.2464788732394" />
                  <mssgle:LineSegment
                    End="152.75,-13.2464788732394" />
                  <mssgle:CubicBezierSegment
                    Point1="152.75,-13.2464788732394"
                    Point2="156.75,-13.2464788732394"
                    Point3="156.75,-17.2464788732394" />
                  <mssgle:LineSegment
                    End="156.75,-31" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="56.75806640625,-8.2464788732394,43.2338671875,11.3310546875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>