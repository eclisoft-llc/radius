<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/22/2020 10:04:20 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="DFW2-APPDEV-006"
  DTS:CreatorName="CORP\nokeke"
  DTS:DTSID="{D1FB435F-A4E2-47E4-A3A7-465FB744FFBD}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="Placement_Debug"
  DTS:PackageType="5"
  DTS:VersionBuild="81"
  DTS:VersionGUID="{E6B7FE9D-0924-44A6-834B-86A11A34F510}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ArtivaMT]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{3F9C42AB-CC01-48FE-AB21-48FBF22B1533}"
      DTS:ObjectName="ArtivaMT">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::PathArtivaMT]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaMT-THIRDPROD-Bradford-NSFMNT-0-6302021101909.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Data"
              DTS:DTSID="{B9BE821B-B339-400C-ABEA-6F3B56CA1DCE}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ArtivaNB]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{6BA63D7E-A803-4FC4-8557-6D56797A7B02}"
      DTS:ObjectName="ArtivaNB">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::PathArtiva]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaNB-THIRDPROD-Bradford-Placement-0-6302021101909.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Data"
              DTS:DTSID="{B9BE821B-B339-400C-ABEA-6F3B56CA1DCE}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ASCII]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{790969a2-8fea-429c-bb2c-e6fa37c4d30c}"
      DTS:ObjectName="ASCII">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ASCII]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ASCII.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{36928C88-5F2B-473F-BB91-F6F19C059A85}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Exceptions]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{8BC7EBBE-AF40-4AF2-BD82-908506364E32}"
      DTS:ObjectName="Exceptions">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExceptionReportFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ExceptionReport.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{36928C88-5F2B-473F-BB91-F6F19C059A85}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{5AB00B05-AEA0-476A-83E9-1EE7D6966F59}"
      DTS:ObjectName="ClientName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Bradford</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{CDDBC30C-AEB6-420D-A919-1F28CC53E4B2}"
      DTS:ObjectName="InboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Inbound\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{87ED83B2-3D1F-461A-B163-54B39926366F}"
      DTS:ObjectName="InboundFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*bradford*.dat</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{AEC2EB3E-C720-44A1-ADFC-D83AAE5D858B}"
      DTS:ObjectName="OutboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Outbound\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{484429D6-DA0B-4F8E-A63C-E9FF2ED146F4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]  +  @[User::CurrentFile]  + &quot;-ASCII.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ASCII">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ASCII.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{97B1865B-4BA5-44E5-9B09-C4695785EE78}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentFile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0AE017A4-2A48-4CDA-ACC6-C5EB8C85246E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="REPLACE(REPLACE(REPLACE(LEFT(  (DT_WSTR, 99) @[System::StartTime]  ,19)&#xA;,&quot;:&quot;,&quot;&quot;),&quot;/&quot;,&quot;&quot;),&quot; &quot;,&quot;&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DateStamp">
      <DTS:VariableValue
        DTS:DataType="8">6302021101909</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D131D9C3-3D87-41FD-978D-EAF224A860F4}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]  +  @[User::CurrentFile]  + &quot;-ExceptionReport.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExceptionReportFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ExceptionReport.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EE0B3C5B-F89F-47EE-8710-ED2322E65377}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath]+ @[$Package::InboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullInboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{199288EF-6C05-4AEE-95CE-19531D725341}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] + @[$Package::OutboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullOutboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4EE94A56-B51D-45E8-8A68-E41FA1221EB0}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]+ &quot;ArtivaNB-&quot;+  @[$Project::Namespace] +&quot;-&quot; + @[$Project::ClientName]  + &quot;-Placement-&quot; + @[User::CurrentFile]  + &quot;-&quot; + @[User::DateStamp] + &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PathArtiva">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaNB-THIRDPROD-Bradford-Placement-0-6302021101909.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3DF84568-CA7C-4C3D-89FE-162B0DCB2375}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]+ &quot;ArtivaMT-&quot;+  @[$Project::Namespace] +&quot;-&quot; + @[$Project::ClientName]  + &quot;-NSFMNT-&quot; + @[User::CurrentFile]  + &quot;-&quot; + @[User::DateStamp] + &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PathArtivaMT">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaMT-THIRDPROD-Bradford-NSFMNT-0-6302021101909.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BA6AA837-A3D8-4962-8485-8CBBF57AC7A6}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory] +  REPLACE( @[User::CurrentFile] , &quot;.dat&quot;, &quot;_&quot;+ @[User::DateStamp] + &quot;.dat&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RenameDst">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{64E93209-6A78-452F-9EBD-B6B8011C2E0D}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory] +  @[User::CurrentFile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RenameSrc">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{A3DA9B93-E867-46A7-B43F-7CBEBB8B3873}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="DTS.ForEachFileEnumerator.3"
        DTS:DTSID="{132AED95-1186-4C0F-BE32-2F358D85A508}"
        DTS:ObjectName="{132AED95-1186-4C0F-BE32-2F358D85A508}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::FullInboundDirectory]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[$Package::InboundFileMask]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\" />
            <FEFEProperty
              FileSpec="*bradford*.dat" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Data Flow Task"
          DTS:CreationName="SSIS.Pipeline.3"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{F610A586-9015-4D70-A9EC-470D454449A3}"
          DTS:ExecutableType="SSIS.Pipeline.3"
          DTS:LocaleID="-1"
          DTS:ObjectName="Data Flow Task"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="ArtivaMT">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaMT]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaMT]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Data" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="ArtivaNB">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaNB]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaNB]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Data" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\ASCII"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="ASCII">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\ASCII.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[ASCII]"
                      connectionManagerRefId="Package.ConnectionManagers[ASCII]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\ASCII.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ASCII.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\ASCII.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[ascii].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ASCII.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Message" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Exceptions"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Exceptions">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Message" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Script Component"
                  componentClassID="DTS.ManagedComponentWrapper.3"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="8">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="33">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public asciiBuffer asciiBuffer;

    public Output1Buffer Output1Buffer;

    public ExceptionsBuffer ExceptionsBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

        if (null != asciiBuffer)
        {
            asciiBuffer.SetEndOfRowset();
            asciiBuffer = null;
        }

        if (null != Output1Buffer)
        {
            Output1Buffer.SetEndOfRowset();
            Output1Buffer = null;
        }

        if (null != ExceptionsBuffer)
        {
            ExceptionsBuffer.SetEndOfRowset();
            ExceptionsBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"ascii"))
            {
                asciiBuffer = new asciiBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 1"))
            {
                Output1Buffer = new Output1Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Exceptions"))
            {
                ExceptionsBuffer = new ExceptionsBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 MTConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"MTConnection").ConnectionManager;
        }
    }

    public IDTSConnectionManager100 ExceptionConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ExceptionConnection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String CurrentFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["CurrentFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FullInboundDirectory
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FullInboundDirectory"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Xml.Linq;
using System.Globalization;
using RGS.ArtivaGeneralPurpose.Data.Records;
using FileHelpers;
using System.Data.Odbc;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();


        //conn = new OdbcConnection(Connections.ARTIVA.ConnectionString);
        //conn.Open();
        corp = new Dictionary<string, string>()
        {
{"01","The Bradford Exchange, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBEL01:BBEC01"},
{"03","The Ashton Drake Galleries, Ltd:Ashton Drake Galleries:Ashton Drake PO Box 855 Morton Grove IL 60053:1(800)634-5164 :BAGL03:BAGC03"},
{"07","Ardleigh Elliott & Sons, Limited:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BASL07:BASC07"},
{"09","The Hamilton Collection, Inc.:The Hamilton Collection:Hamilton Collection PO Box 842 Morton Grove IL 60053:1(800)545-2077:BHCL09:BHCC09"},
{"10","Hamilton Authenticated:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BHAL10:BHAC10"},
{"11","Van Hygan & Smythe, Inc:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BVSL11:BVSC11"},
{"12","Breed Perfect:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBPL12:BBPC12"},
{"14","Hawthorne Architectural Register, Ltd:Hawthorne:Hawthorne PO Box 886 Morton Grove IL 60053: 1(800)772-4277:BHAL14:BHAC14"},
{"15","Bradford Editions:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBEL15:BBEC15"},
{"16","Collectibles Today Network, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BCNL16:BCNC16"},
{"17","Bradford Authenticated:Bradford Authenticated/Mint:Bradford Authenticated/Mint PO Box 858 Morton Grove IL 60053: 1(800)323-8105:BBAL17:BBAC17"},
{"18","The Bradford Exchange Check Company, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBCL18:BBCC18"},
{"19","Studio Hummel:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BSHL19:BSHC19"},
{"40","The Bradford Exchange Online:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBOL40:BBOC40"},
{"41","The Ashton Drake Galleries Online:Ashton Drake Galleries:Ashton Drake PO Box 855 Morton Grove IL 60053:1(800)634-5164 :BAOL41:BAOC41"},
{"42","The Hamilton Collection Online:The Hamilton Collection:Hamilton Collection PO Box 842 Morton Grove IL 60053:1(800)545-2077:BHOL42:BHOC42"}


        };

        titles = new Dictionary<string, string>()
        {

            {"01","Mister"},
{"02","Mrs."},
{"03","Miss"},
{"04","Doctor"},
{"05","Reverend"},
{"06","Ms."},
{"07","Adjutant"},
{"08","Adjutant General"},
{"09","Admiral"},
{"10","Airman"},
{"11","Airman 1st Class"},
{"12","Airman 2nd Class"},
{"13","Airman 3rd Class"},
{"14","Attorney General"},
{"16","Brigadier General"},
{"17","Brother"},
{"18","Cadet"},
{"19","Captain"},
{"21","Chaplain"},
{"22","Chief Petty Officer"},
{"23","Chief Warrant Officer"},
{"24","Colonel"},
{"25","Commandant"},
{"26","Commander"},
{"28","Corporal"},
{"30","Ensign"},
{"31","Father"},
{"32","First Lieutenant"},
{"33","First Sargeant"},
{"34","Fleet Lieutenant"},
{"35","General"},
{"36","Governor"},
{"37","Group Captain"},
{"38","Honorable"},
{"40","Lieutenant"},
{"41","Lieutenant Colonel"},
{"42","Lieutenant Commander"},
{"43","Lieutenant General"},
{"44","Lieutenant Governor"},
{"45","Lieutenant Junior Grade"},
{"46","Lieutenant Major"},
{"47","Major"},
{"48","Major General"},
{"49","Master"},
{"50","Master Sergeant"},
{"51","Mayor"},
{"52","Midshipman"},
{"54","Monsignor"},
{"55","Most Reverend"},
{"56","Mother"},
{"57","Petty Officer"},
{"58","Private"},
{"59","Private First Class"},
{"60","Professor"},
{"61","Rabbi"},
{"62","Rear Admiral"},
{"63","Reverend Mother"},
{"64","Reverend Mother Superior"},
{"65","Right Reverend"},
{"66","Seaman"},
{"67","Seaman First Class"},
{"68","Seaman Second Class"},
{"69","Senator"},
{"70","Sergeant"},
{"71","Sergeant Major"},
{"72","Sister"},
{"73","Specialist First Class"},
{"74","Specialist Fourth Class"},
{"75","Specialist Second Class"},
{"76","Specialist Third Class"},
{"77","Staff Sergeant"},
{"78","Technical Sergeant"},
{"79","Very Reverend"},
{"80","Vice Admiral"},
{"81","Warrant Officer"}
        };


    }
    private bool _exceptionReportCreated = false;
    private bool ismt = false;
    private Dictionary<string, string> corp;
    private Dictionary<string, string> titles;

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();


        if (!_exceptionReportCreated)
            System.IO.File.Delete(Connections.ExceptionConnection.ConnectionString);

        if (!ismt)
            System.IO.File.Delete(Connections.MTConnection.ConnectionString);

        
    }

    public override void CreateNewOutputRows()
    {
        try
        {

            var Record20 = new PartyInformation_20();
            var Record10 = new AccountInformation_10();

            Record20.AddressLine = "Address ....";
            Record20.City = "City...";
            Record20.State = "State ...";
            Record10.SOLState = "State ...";

            AddPlacementRow(Record10);
            AddPlacementRow(Record20);


            /*
            string file = Variables.FullInboundDirectory + Variables.CurrentFile;

            LineTemplate lineTemplate03 = new LineTemplate(345, "Record03");


            lineTemplate03.AddFieldTemplate(new FieldTemplate("COLLECTION AGENCY ID", FieldType.AlphaNum, 0, 10));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("RECORD TYPE", FieldType.AlphaNum, 10, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SOURCE SYSTEM", FieldType.AlphaNum, 12, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("COUNTRY CODE", FieldType.AlphaNum, 14, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("CORP NUMBER", FieldType.AlphaNum, 16, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("CUSTOMER ID", FieldType.AlphaNum, 18, 9));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER", FieldType.AlphaNum, 27, 3));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ORDER NUMBER", FieldType.AlphaNum, 30, 12));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SEQUENCE NUMBER", FieldType.Packed, 42, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("OLD 6 DIGIT ID", FieldType.AlphaNum, 44, 6));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("PRODUCT DISCRIPTION", FieldType.AlphaNum, 50, 20));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SHIPMENT DATE", FieldType.Date, 70, 8));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ORIG ITEM AMOUNT", FieldType.Packed, 78, 5, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("UNPAID AMOUNT", FieldType.Packed, 83, 5, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("DEBT TYPE", FieldType.AlphaNum, 88, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ITEM DATE LAST PAID", FieldType.Date, 90, 8));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER2", FieldType.AlphaNum, 98, 115));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("PRODUCT ID", FieldType.AlphaNum, 213, 12));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("DIVISION", FieldType.AlphaNum, 225, 3));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER3", FieldType.AlphaNum, 228, 117));


            LineTemplate lineTemplate = new LineTemplate(345, "Record02");


            lineTemplate.AddFieldTemplate(new FieldTemplate("COLLECTION AGENCY ID", FieldType.AlphaNum, 0, 10));
            lineTemplate.AddFieldTemplate(new FieldTemplate("RECORD TYPE", FieldType.AlphaNum, 10, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("SOURCE SYSTEM", FieldType.AlphaNum, 12, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("COUNTRY CODE", FieldType.AlphaNum, 14, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CORP NUMBER", FieldType.AlphaNum, 16, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ID", FieldType.AlphaNum, 18, 9));
            lineTemplate.AddFieldTemplate(new FieldTemplate("FILLER", FieldType.AlphaNum, 27, 3));
            lineTemplate.AddFieldTemplate(new FieldTemplate("ORDER NUMBER", FieldType.AlphaNum, 30, 12));
            lineTemplate.AddFieldTemplate(new FieldTemplate("SEQUENCE NUMBER", FieldType.Packed, 42, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER LAST NAME", FieldType.AlphaNum, 44, 20));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER FIRST NAME", FieldType.AlphaNum, 64, 15));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER MIDDLE INITIAL", FieldType.AlphaNum, 79, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER TITLE", FieldType.AlphaNum, 80, 4));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ADDRESS", FieldType.AlphaNum, 84, 90));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ZIP", FieldType.AlphaNum, 174, 9));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUST TEL NUMBER", FieldType.AlphaNum, 183, 15));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER STATUS", FieldType.AlphaNum, 198, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER TOTAL OWING", FieldType.Packed, 199, 5, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER DATE LAST PAID", FieldType.Date, 204, 8));
            lineTemplate.AddFieldTemplate(new FieldTemplate("MAILING STATUS CODE", FieldType.AlphaNum, 212, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("FILLER2", FieldType.AlphaNum, 213, 132));

            EbcdicParser parser = new EbcdicParser(file, lineTemplate);
            EbcdicParser parser03 = new EbcdicParser(file, lineTemplate03);


            bool isrec2 = false;


            string[] corpval = null;
            
            Dictionary<string, rec03> rec3s = new Dictionary<string, rec03>();
            List<string> unknownrecs = new List<string>();
            List<string> rec2s = new List<string>();

            string cliphone = "";

            foreach (ParsedLine line in parser03.Lines)
            {
                if (line["RECORD TYPE"] == "03")
                {


                    rec3s.Add(line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"], new rec03(line["COLLECTION AGENCY ID"],
                line["CORP NUMBER"],
                line["COUNTRY CODE"],
                line["CUSTOMER ID"],
                line["ORDER NUMBER"],
                line["SEQUENCE NUMBER"],
                line["OLD 6 DIGIT ID"],
                line["PRODUCT DISCRIPTION"],
                line["SHIPMENT DATE"],
                line["ORIG ITEM AMOUNT"],
                line["UNPAID AMOUNT"],
                line["DEBT TYPE"],
                line["ITEM DATE LAST PAID"],
                line["PRODUCT ID"],
                line["DIVISION"]));
                }
                }
            
            
            foreach (ParsedLine line in parser.Lines)
            {

                if (line["RECORD TYPE"] != "03" && line["RECORD TYPE"] != "02" && line["RECORD TYPE"] != "99" && line["RECORD TYPE"] != "00")
                {

                    unknownrecs.Add(line["ORDER NUMBER"]);
                    
                }
                else
                if (line["RECORD TYPE"] == "02")
                {
                    asciiBuffer.AddRow();
                    asciiBuffer.Data = line["ORDER NUMBER"] + line["SEQUENCE NUMBER"].PadLeft(3, '0') + "," + String.Format("\"{0}\"", line["CUSTOMER ADDRESS"]) + "," + line["CUSTOMER ZIP"];
                    var Record10 = new AccountInformation_10();
                    var Record20 = new PartyInformation_20();
                    var rec203s = new List<AccountFreeFormText_203>();
                    var Record100 = new PlacementInformation_100();
                    var Record110 = new SegmentationScores_110();
                    var Record808 = new RetailClubInformation_808();
                    var Record112 = new ResponsiblePartyInfo_112();
                    var inote = new ImportantNote_INOTE();
                    isrec2 = true;
                    Record100.CreditorInternalCreditorID = line["COLLECTION AGENCY ID"];
                    rec2s.Add(line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"]);
                    if (line["COUNTRY CODE"] == "01")
                        Record20.Country = "US";
                    else
                    {
                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("Errored due to Non US account based on Country Code. Order Number: {0}", line["ORDER NUMBER"]);
                        continue;
                    }

                    if (corp.ContainsKey(line["CORP NUMBER"]))
                    {
                        corpval = corp[line["CORP NUMBER"]].Split(':');
                        Record808.LocationNumber = line["CORP NUMBER"];
                        Record100.LocationPracticeCode = corpval[4];
                        Record808.LocationName = corpval[0];
                        Record100.LocationPracticeName = corpval[1];
                        cliphone = corpval[3];

                    }

                    inote.Note = "automated bill pay phone number for client : " + cliphone;

                    Record100.CreditorInternalConsumerAccountNumber = line["CUSTOMER ID"];
                    Record808.CustomerID = line["CUSTOMER ID"];
                    Record10.ClientReferenceNumber = line["ORDER NUMBER"] + line["SEQUENCE NUMBER"].PadLeft(3,'0');
                    Record808.OrderNumber = line["ORDER NUMBER"];
                    Record808.ItemNumber = line["SEQUENCE NUMBER"];
                    Record20.LastName = line["CUSTOMER LAST NAME"];
                    Record20.FirstName = line["CUSTOMER FIRST NAME"];
                    Record112.MiddleName = line["CUSTOMER MIDDLE INITIAL"];
                    if(titles.ContainsKey(line["CUSTOMER TITLE"]))
                        Record112.ContactPrefix = titles[line["CUSTOMER TITLE"]];

                    string[] df = line["CUSTOMER ADDRESS"].Split(',');
                    string[] ad = df[0].Split(new[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
                    string city = ad[ad.Length - 1];
                    string state = df[df.Length - 1];
                    string address = df[0].Substring(0, line["CUSTOMER ADDRESS"].IndexOf(city));

                    Record20.AddressLine = address;
                    Record20.City = city;
                    Record20.State = state;
                    Record10.SOLState = state;
                    Record20.PostalCode = line["CUSTOMER ZIP"];
                    Record20.PrimaryPhoneNumber = line["CUST TEL NUMBER"];

                    AccountFreeFormText_203 cstatus = null;
                    if(!string.IsNullOrEmpty(line["CUSTOMER STATUS"]))
                        cstatus = new AccountFreeFormText_203 { FreeFormText = "Client status for the Consumer: " + line["CUSTOMER STATUS"] };

                    decimal amt = string.IsNullOrEmpty(line["CUSTOMER TOTAL OWING"]) ? 0 : Convert.ToDecimal(line["CUSTOMER TOTAL OWING"]);
                    Record808.TotalBalance = amt;
                    Record10.PrincipalInitalBalance = amt;
                    Record100.PrincipalBalanceAtPlacement = amt;
                    Record10.ClientLastPayDate = getDate(line["CUSTOMER DATE LAST PAID"]);

                    AccountFreeFormText_203 mstatus = null;
                    if(!string.IsNullOrEmpty(line["MAILING STATUS CODE"]))
                        mstatus = new AccountFreeFormText_203 { FreeFormText = "Client file filed Mail Status: " + line["MAILING STATUS CODE"] };
                    ConsumerFreeFormText_205 cid = null;

                    string k = line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"];

                    if (rec3s.ContainsKey(k))
                    {

                        if (!string.IsNullOrEmpty(rec3s[k].OLD6DIGITID))
                            cid = new ConsumerFreeFormText_205 { FreeFormText = "Client Old customer ID number: " + rec3s[k].OLD6DIGITID };
                        Record808.ItemDesscription = rec3s[k].PRODUCTDISCRIPTION;
                        DateTime? d = null;
                        if (string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                            d = Record10.ClientLastPayDate;
                        else
                            d = getDate(rec3s[k].SHIPMENTDATE);

                        Record10.DelinquencyDate = d;
                        Record808.DateShipped = d;
                        Record10.SOLDate = d;
                        Record10.ServiceDate = d;
                        Record100.BKEffectiveDate = d;

                        if (string.IsNullOrEmpty(line["CUSTOMER DATE LAST PAID"]) && string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                        {
                            ExceptionsBuffer.AddRow();
                            ExceptionsBuffer.Data = string.Format("No Date in file for Mandatory dates, account {0} on status =No sol date hold.", line["ORDER NUMBER"]);

                        }
                        else
                        if (!string.IsNullOrEmpty(line["CUSTOMER DATE LAST PAID"]) && string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                        {
                            _exceptionReportCreated = true;
                            ExceptionsBuffer.AddRow();
                            ExceptionsBuffer.Data = string.Format("Account {0} had no shipment date. Customer last paid date used instead.", line["ORDER NUMBER"]);


                        }

                        Record808.OrderTotal = string.IsNullOrEmpty(rec3s[k].ORIGITEMAMOUNT) ? 0 : Convert.ToDecimal(rec3s[k].ORIGITEMAMOUNT);
                        Record808.TotalPastDueAmount = string.IsNullOrEmpty(rec3s[k].UNPAIDAMOUNT) ? 0 : Convert.ToDecimal(rec3s[k].UNPAIDAMOUNT);

                        if (rec3s[k].DEBTTYPE == "01")
                            Record100.CollectionType = "regular";
                        /*else if (rec3s[k].DEBTTYPE == "02")
                        {

                            string str = string.Empty;
                            using (OdbcCommand cmd = new OdbcCommand(string.Format(" SELECT " +
                        "account.ARACID FROM %STARTTABLE ARCLIENT INNER JOIN ARACCOUNT account on ARCLID = ARACCLTID AND ARCLID IN ('BBEL01','BAGL03','BASL07','BHCL09','BHAL10','BVSL11'," +
                        "'BBPL12', 'BHAL14', 'BBEL15', 'BCNL16', 'BBAL17', 'BBCL18','BSHL19', 'BBOL40', 'BAOL41', 'BHOL42') " +
                        "JOIN ARENTITY ent ON account.ARACRPID = ent.ARENID " +
                        "JOIN ZZRETAILCLUB zz ON zz.ZZRCACID = account.ARACID " +
                                "WHERE account.ARACCLACCT = '{0}'"
                                 , rec3s[k].ORDERNUMBER + rec3s[k].SEQUENCENUMBER.PadLeft(3,'0')), conn, null))
                            {
                                if (conn.State != ConnectionState.Open)
                                    conn.Open();

                                cmd.CommandTimeout = 300;

                                var aracid = cmd.ExecuteScalar();

                                if (aracid == DBNull.Value || aracid == null || aracid.ToString() == "")
                                {
                                    _exceptionReportCreated = true;
                                    ExceptionsBuffer.AddRow();
                                    ExceptionsBuffer.Data = string.Format("No artiva account found for Order {0}", rec3s[k].ORDERNUMBER);

                                }
                                else
                                {
                                    str = "NSF 03 record received for this account from Client on " + DateTime.Today.ToString("mmddyyyy") + " in file " + Variables.CurrentFile + ". NSF amount goes to another agency. Balance will not be updated due to record being received.";
                                    AddPlacementRowNSF(new AccountFreeFormText_203 { AccountId = aracid.ToString(), FreeFormText = "label: " + str });
                                    ismt = true;
                                }
                            }


                        }

                        Record808.LastRemitDate = getDate(rec3s[k].ITEMDATELASTPAID);
                        Record808.ProductID = rec3s[k].PRODUCTID;
                        Record808.Room = rec3s[k].DIVISION;
                    } else
                    {

                        Record20.StatusCode = "HOLD";
                        AddPlacementRow(new AccountFreeFormText_203 { FreeFormText = "label: " + "Only record type 02 found for this order number " + line["ORDER NUMBER"] + " loaded data from that record.account on hold" });
                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("No Record type 3 recieved account {0} on hold.", line["ORDER NUMBER"]);
                    }


                    Record10.ClientID = Record100.LocationPracticeCode;
                    Record10.ListedDate = DateTime.Today;
                    Record100.IncomingFileName = Variables.CurrentFile;
                    Record100.DateLoaded = DateTime.Today;
                    Record10.SOLAgreementType = "OPEN";
                    Record20.RelationshipTypeKey = "PRIM";
                    Record10.DebtDescription = Record808.ProductID + " " + Record808.ItemDesscription;

                    AddPlacementRow(Record10);
                    AddPlacementRow(Record20);
                    AddPlacementRow(Record100);
                    AddPlacementRow(Record808);
                    AddPlacementRow(Record112);
                    AddPlacementRow(inote);

                    if (cstatus!=null)
                        AddPlacementRow(cstatus);
                    if (mstatus != null)
                        AddPlacementRow(mstatus);
                    if (cid != null)
                        AddPlacementRow(cid);


                }


            }

            if (isrec2 || rec3s.Count > 0)
            {
                foreach (var i in unknownrecs)
                {

                    _exceptionReportCreated = true;
                    ExceptionsBuffer.AddRow();
                    ExceptionsBuffer.Data = string.Format("Incorrect record type could not load, Record {0} sent by client but could not be loaded due to unexpected value", i);
                }
            }

            if (!isrec2 && rec3s.Count == 0)
            {

                _exceptionReportCreated = true;
                ExceptionsBuffer.AddRow();
                ExceptionsBuffer.Data = "Incorrect record types could not load. Record(unexpected value) sent by client but could not be loaded due to unexpected values.";

            }


                foreach (KeyValuePair<string,rec03> i in rec3s)
                {
                    string k = i.Value.COLLECTIONAGENCYID + i.Value.CORPNUMBER + "01" + i.Value.ORDERNUMBER + i.Value.SEQUENCENUMBER;
                    if (!rec2s.Contains(k))
                    {

                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("Only record type 03 found for this order number {0} could not load", i.Value.ORDERNUMBER);
                    }


                }
*/

        } catch(Exception e)
        {
            bool cancel = false;
            ComponentMetaData.FireError(10, "Process Values", e.Message + "@@" + e.StackTrace, "", 0, out cancel);
        }

    }

    public static byte[] ConvertEbcdicToAscii(byte[] ebcdicData)
    {
        // Create two different encodings.      
        Encoding ascii = Encoding.ASCII;
        Encoding ebcdic = Encoding.GetEncoding("IBM037");

        //Retutn Ascii Data 
        return Encoding.Convert(ebcdic, ascii, ebcdicData);
    }

    public static IEnumerable<string> GetLines(string str, bool removeEmptyLines = false)
    {
        return str.Split(new[] { "\r\n", "\r", "\n" },
            removeEmptyLines ? StringSplitOptions.RemoveEmptyEntries : StringSplitOptions.None);
    }

    private void add203(string label, string data, List<AccountFreeFormText_203> rec203s)
    {
        if (string.IsNullOrEmpty(data) || data == "0")
            return;

        rec203s.Add(new AccountFreeFormText_203 { FreeFormText = label + data });
    }

    private void add205(string label, string data, List<ConsumerFreeFormText_205> rec205s)
    {
        if (string.IsNullOrEmpty(data) || data == "0")
            return;
        
        rec205s.Add(new ConsumerFreeFormText_205 { FreeFormText = label + data });
    }

    private string getFormateddate(string str)
    {

        if (!string.IsNullOrEmpty(str))
        {
            str = str.Length < 8 && str.Substring(0, 1) != "0" ? "0" + str : str;
            str = str.Length < 8 ? str.Insert(2, "0") : str;

        }


        return str;
    }
    private DateTime? getDate(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue;
        else
            return null;
    }


    private void AddPlacementRow<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList);
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output0Buffer.AddRow();
        Output0Buffer.Data = recordString.ToUpper();
    }

    private void AddPlacementRowNSF<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList);
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output1Buffer.AddRow();
        Output1Buffer.Data = recordString.ToUpper();
    }
}


public class LineTemplate
{
    public Dictionary<string, FieldTemplate> FieldTemplateDictionary { get; set; }
    public string LineTemplateName { get; set; } //Just a name to distinguish your templates
    public int LineSize { get; set; } //bytes per "line"
    public int FieldsCount
    {
        get
        {
            return this.FieldTemplateDictionary.Count;
        }
    }

    //Constructor 
    public LineTemplate(int lineSize, string templateName)
    {
        if (lineSize <= 0)
        {
            throw new ArgumentOutOfRangeException("line length must be greater than zero");
        }
        this.FieldTemplateDictionary = new Dictionary<string, FieldTemplate>();
        this.LineTemplateName = templateName;
        this.LineSize = lineSize;
    }

    public void AddFieldTemplate(FieldTemplate fieldTemplate)
    {
        if ((fieldTemplate.StartPosition + fieldTemplate.FieldSize) > this.LineSize)
        {
            throw new Exception(String.Format("Field \"{0}\" exceeds line boundary", fieldTemplate.FieldName));
        }

        this.FieldTemplateDictionary.Add(fieldTemplate.FieldName, fieldTemplate);
    }

    public string GetFieldNamesCSV(bool addQuotes)
    {
        StringBuilder sb = new StringBuilder();
        int count = 0;

        foreach (FieldTemplate fieldTemplate in this.FieldTemplateDictionary.Values)
        {
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(fieldTemplate.FieldName);
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(this.FieldTemplateDictionary.Count < count ? "," : "");
            count++;
        }
        return sb.ToString();
    }


}

public enum FieldType
{
    AlphaNum, Packed, Binary, Numeric, Date,
    PackedDate, SourceBytesInHex, SourceBytesInDec
}

public class FieldTemplate
{
    public string FieldName { get; private set; }
    public FieldType Type { get; private set; }
    public int StartPosition { get; private set; }
    public int FieldSize { get; private set; }
    public int DecimalPlaces { get; private set; }   //Scale -- for numerical data only

    //Constructor 1 
    public FieldTemplate(string fieldName, FieldType fieldType,
        int startPosition, int fieldSize, int decimalPlaces)
    {
        this.ValidateInputParameters(fieldName, fieldType, startPosition, fieldSize, decimalPlaces);
        this.FieldName = fieldName.Trim();
        this.Type = fieldType;
        this.StartPosition = startPosition;
        this.FieldSize = fieldSize;
        this.DecimalPlaces = decimalPlaces;
    }

    //Constructor 2: Default decimalPlaces = 0
    public FieldTemplate(string fieldName, FieldType fieldType, int startPosition, int fieldSize)
        : this(fieldName, fieldType, startPosition, fieldSize, 0)
    {
        //decimalPlaces = 0
    }

    private void ValidateInputParameters(string fieldName,
      FieldType fieldType, int startPosition, int fieldSize, int decimalPlaces)
    {
        if (fieldName == null || fieldName.Trim().Length == 0)
        {
            throw new ArgumentNullException("Field name is required for a template");
        }
        if (startPosition < 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Start position cannot be negative for a field template \"{0}\"", fieldName));
        }
        if (fieldSize <= 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Filed size must be greater than zero for a field template \"{0}\"", fieldName));
        }
        if (fieldType == FieldType.Binary)
        {
            if (fieldSize != 2 && fieldSize != 4)
            {
                throw new Exception(String.Format(
                  "Incorrect number of bytes provided for a binary field template \"{0}\": {1}",
                  fieldName, fieldSize));
            }
        }
        if (decimalPlaces < 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Number of decimal places cannot be negative for a field template \"{0}\"", fieldName));
        }
        if (decimalPlaces > 6)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Number of decimal places exceeds limit for a field template \"{0}\"", fieldName));
        }
    }


}

public static class ParserUtilities
{
    public static void PrintError(string errMsg)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine(errMsg);
        Console.ForegroundColor = ConsoleColor.Gray;
    }

    public static void ConvertLineArrayToCsv(ParsedLine[] lines,
      string outputFilePath, bool includeColumnNames, bool addQuotes)
    {
        Console.WriteLine("{0}: Writing output file...", DateTime.Now);

        if (Uri.IsWellFormedUriString(outputFilePath, UriKind.RelativeOrAbsolute))
        {
            throw new Exception("Output file path is not valid");
        }
        if (lines == null || lines.Length == 0)
        {
            PrintError("Nothing to write");
            return;
        }

        try
        {
            if (File.Exists(outputFilePath))
            {
                File.Delete(outputFilePath);
            }

            using (TextWriter tw = new StreamWriter(outputFilePath, true))
            {
                if (includeColumnNames && lines.Length > 0)
                {
                    tw.WriteLine(lines[0].Line_Template.GetFieldNamesCSV(addQuotes));
                }
                foreach (ParsedLine line in lines)
                {
                    tw.WriteLine(line.GetParsedFieldValuesCSV(addQuotes));
                }
            }
            Console.WriteLine("{1}: Output file created {0}",
              Path.GetFileName(outputFilePath), DateTime.Now);
        }
        catch (Exception ex)
        {
            PrintError(ex.Message);
        }
    }

    public static string ConvertBytesToDec(byte[] bytes)
    {
        string result = "";
        foreach (byte b in bytes)
        {
            result += (int)b + " ";
        }
        return result.Trim();
    }

    public static byte[] ConvertHexStringToBytes(string hexStr)
    {
        if ((hexStr.Length + 1) % 3 != 0)
        {
            throw new Exception("Invalid hex string");
        }

        String[] strArray = hexStr.Split('-');
        byte[] byteArray = new byte[strArray.Length];

        for (int i = 0; i < strArray.Length; i++)
        {
            byteArray[i] = Convert.ToByte(strArray[i], 16);
        }

        return byteArray;
    }

    public static string RemoveNonAsciiChars(string text)
    {
        char[] chars = text.ToCharArray();

        for (int i = 0; i < chars.Length; i++)
        {
            if ((int)chars[i] < 32 || (int)chars[i] > 126)
            {
                chars[i] = ' '; //Convert non-printable char to "space"
            }
            else if (chars[i] == '"' || chars[i] == '^') //Remove quote char
            {
                chars[i] = ' ';
            }
        }

        return new String(chars).Trim();
    }

    public static byte[] ReadBytesRange(byte[] sourceBytes,
      int startPosition, int length, bool throwExceptionIfSourceArrayIsTooShort)
    {
        byte[] resultBytes;

        if (length <= 0)
        {
            throw new Exception("Invalid array length: " + length);
        }
        if (startPosition < 0)
        {
            throw new Exception("Invalid start position: " + length);
        }
        if (sourceBytes.Length < startPosition)
        {
            throw new Exception("Start position is outside of array bounds");
        }
        if (sourceBytes.Length - startPosition - length < 0)
        {
            if (throwExceptionIfSourceArrayIsTooShort)
            {
                throw new Exception("End position is outside of array bounds");
            }
            else
            {
                //Shorten the length of output array for remaining bytes
                length = sourceBytes.Length - startPosition;
            }
        }

        resultBytes = new byte[length];
        Array.Copy(sourceBytes, startPosition, resultBytes, 0, length);
        return resultBytes;
    }

    public static byte[] ReadBytesRange(byte[] sourceBytes, int startPosition, int length)
    {
        bool throwExceptionIfSourceArrayIsTooShort = true;
        byte[] resultBytes = ReadBytesRange(sourceBytes,
          startPosition, length, throwExceptionIfSourceArrayIsTooShort);
        return resultBytes;
    }
}


public class ParsedField
{
    public FieldTemplate Field_Template { get; private set; }
    public string Value { get; private set; }
    public byte[] OriginalBytes { get; private set; }
    public string OriginalBytesInHex
    {
        get
        {
            return BitConverter.ToString(this.OriginalBytes);
        }
    }
    public string OriginalBytesInDec
    {
        get
        {
            return ParserUtilities.ConvertBytesToDec(this.OriginalBytes);
        }
    }
    public bool ParsedSuccessfully { get; private set; }

    //Constructor
    public ParsedField(byte[] lineBytes, FieldTemplate fieldTemplate)
    {
        this.ParsedSuccessfully = true;
        this.Field_Template = fieldTemplate;
        this.Value = ParseField(lineBytes, fieldTemplate);
    }

    private string ParseField(byte[] lineBytes, FieldTemplate template)
    {
        if (lineBytes == null || lineBytes.Length == 0)
        {
            ParserUtilities.PrintError("Line bytes is null or empty");
            this.ParsedSuccessfully = false;
            return null;
        }
        if (lineBytes.Length < (template.StartPosition + template.FieldSize))
        {
            this.ParsedSuccessfully = false;
            throw new Exception(String.Format(
              "Field \"{0}\" length falls outside the line length", template.FieldName));
        }

        byte[] fieldBytes = new byte[template.FieldSize];
        Array.Copy(lineBytes, template.StartPosition, fieldBytes, 0, template.FieldSize);
        this.OriginalBytes = fieldBytes;

        if (this.Field_Template.Type == FieldType.AlphaNum)
        {
            return this.ConvertAlphaNumEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.Numeric)
        {
            return this.ConvertNumericEbcdic(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Packed)
        {
            return this.Unpack(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Binary)
        {
            return ConvertBinaryEbcdic(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Date)
        {
            return ConvertDateStrEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.PackedDate)
        {
            return ConvertPackedDateStrEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.SourceBytesInHex)
        {
            return this.OriginalBytesInHex;
        }
        else if (this.Field_Template.Type == FieldType.SourceBytesInDec)
        {
            return this.OriginalBytesInDec;
        }
        else
        {
            this.ParsedSuccessfully = false;
            throw new Exception(String.Format(
              "Unable to parse field \"{0}\". Unknown field type: {1}",
              template.FieldName, template.Type.ToString()));
        }
    }

    private string ConvertAlphaNumEbcdic(byte[] ebcdicBytes)
    {
        if (this.ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        //Encoding asciiEnc = Encoding.ASCII;
        //Encoding ebcdicEnc = Encoding.GetEncoding("IBM037");
        //string result = Encoding.ASCII.GetString(Encoding.Convert(ebcdicEnc, asciiEnc, ebcdicBytes));

        //Thank you sx2008
        Encoding ebcdicEnc = Encoding.GetEncoding("IBM037");
        string result = ebcdicEnc.GetString(ebcdicBytes); // convert EBCDIC Bytes -> Unicode string
        return result;
    }

    private string ConvertNumericEbcdic(byte[] ebcdicBytes, int decimalPlaces)
    {
        string tempNumStr = this.ConvertAlphaNumEbcdic(ebcdicBytes).Trim();

        if (tempNumStr == null || tempNumStr.Length == 0)
        {
            return "";
        }

        if (Regex.IsMatch(tempNumStr, @"^\d+$")) //Unsigned integer
        {
            string result = this.AdjustDecimalValues(Int64.Parse(tempNumStr), decimalPlaces);
            return result;
        }
        else if (Regex.IsMatch(tempNumStr, @"^\d+[A-R{}]$")) //Signed integer
        {
            string lastChar = tempNumStr.Substring(tempNumStr.Length - 1);

            switch (lastChar)
            {
                case "{":
                    tempNumStr = tempNumStr.Replace("{", "0");
                    break;
                case "A":
                    tempNumStr = tempNumStr.Replace("A", "1");
                    break;
                case "B":
                    tempNumStr = tempNumStr.Replace("B", "2");
                    break;
                case "C":
                    tempNumStr = tempNumStr.Replace("C", "3");
                    break;
                case "D":
                    tempNumStr = tempNumStr.Replace("D", "4");
                    break;
                case "E":
                    tempNumStr = tempNumStr.Replace("E", "5");
                    break;
                case "F":
                    tempNumStr = tempNumStr.Replace("F", "6");
                    break;
                case "G":
                    tempNumStr = tempNumStr.Replace("G", "7");
                    break;
                case "H":
                    tempNumStr = tempNumStr.Replace("H", "8");
                    break;
                case "I":
                    tempNumStr = tempNumStr.Replace("I", "9");
                    break;
                case "}":
                    tempNumStr = "-" + tempNumStr.Replace("}", "0");//Fixed
                    break;
                case "J":
                    tempNumStr = "-" + tempNumStr.Replace("J", "1");
                    break;
                case "K":
                    tempNumStr = "-" + tempNumStr.Replace("K", "2");
                    break;
                case "L":
                    tempNumStr = "-" + tempNumStr.Replace("L", "3");
                    break;
                case "M":
                    tempNumStr = "-" + tempNumStr.Replace("M", "4");
                    break;
                case "N":
                    tempNumStr = "-" + tempNumStr.Replace("N", "5");
                    break;
                case "O":
                    tempNumStr = "-" + tempNumStr.Replace("O", "6");
                    break;
                case "P":
                    tempNumStr = "-" + tempNumStr.Replace("P", "7");
                    break;
                case "Q":
                    tempNumStr = "-" + tempNumStr.Replace("Q", "8");
                    break;
                case "R":
                    tempNumStr = "-" + tempNumStr.Replace("R", "9");
                    break;
            }

            string result = this.AdjustDecimalValues(Int64.Parse(tempNumStr), decimalPlaces);
            return result;
        }
        else
        {
            this.ParsedSuccessfully = false;
            return tempNumStr;
        }
    }

    private string ConvertBinaryEbcdic(byte[] ebcdicBytes, int decimalPlaces)
    {
        if (this.ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        //BitConverter requires low order bytes goes first, followed by the higher order bytes. 
        //Bytes are stored in the file in the opposite order, thus need to reverse bytes
        Array.Reverse(ebcdicBytes);
        long tempNum;

        if (ebcdicBytes.Length == 2)
        {
            //If 2 bytes are provided -- assume it's a short
            tempNum = BitConverter.ToUInt16(ebcdicBytes, 0);
        }
        else if (ebcdicBytes.Length == 4)
        {
            //If 4 bytes are provided -- assume it's an int
            tempNum = BitConverter.ToInt32(ebcdicBytes, 0);
        }
        else
        {
            //Just in case
            throw new Exception(String.Format(
              "Incorrect number of bytes provided for a binary field: {1}", decimalPlaces));
        }

        string result = this.AdjustDecimalValues(tempNum, decimalPlaces);
        return result;
    }

    private string AdjustDecimalValues(long numericValue, int decimalPlaces)
    {
        if (decimalPlaces == 0)
        {
            return numericValue.ToString();
        }
        double result = numericValue / Math.Pow(10, decimalPlaces);
        return result.ToString();
    }

    private string ConvertDateStrEbcdic(byte[] ebcdicBytes)
    {
        string dateStr = this.ConvertAlphaNumEbcdic(ebcdicBytes).Trim();
        string result = this.ConvertDateStr(dateStr);
        return result;
    }

    private string ConvertPackedDateStrEbcdic(byte[] ebcdicBytes)
    {
        string dateStr = this.Unpack(ebcdicBytes, 0);
        string result = this.ConvertDateStr(dateStr);
        return result;
    }

    private string ConvertDateStr(string dateStr)
    {
        dateStr = dateStr.Trim();

        if (dateStr.Trim() == "" || dateStr == "0" ||
              dateStr == "0000000" || dateStr == "9999999")
        {
            return "";
        }
        if (Regex.IsMatch(dateStr, @"^\d{3,5}$"))
        {
            dateStr = dateStr.PadLeft(6, '0');
        }

        Match match = Regex.Match(dateStr, @"^(?<Year>\d{3})(?<Month>\d{2})
            (?<Day>\d{2})$"); //E.g.: 0801232 = 1980-12-31; 1811231 = 2080-12-31

        if (match.Success)
        {
            int year = Int32.Parse(match.Groups["Year"].Value) + 1900; //013 => 1913, 113 => 2013...
            int month = Int32.Parse(match.Groups["Month"].Value);
            int day = Int32.Parse(match.Groups["Day"].Value);

            try
            {
                DateTime tempDate = new DateTime(year, month, day);
                return tempDate.ToString("yyyy-MM-dd");
            }
            catch { }
        }

        if (Regex.IsMatch(dateStr, @"^\d{6}$"))
        {
            DateTime tempDate;
            if (DateTime.TryParseExact(dateStr, "yyMMdd",
                 CultureInfo.InvariantCulture, DateTimeStyles.None, out tempDate))
            {
                return tempDate.ToString("yyyy-MM-dd");
            }
        }

        this.ParsedSuccessfully = false;
        return dateStr;
    }

    private string Unpack(byte[] ebcdicBytes, int decimalPlaces)
    {
        if (ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        long lo = 0;
        long mid = 0;
        long hi = 0;
        bool isNegative;

        // this nybble stores only the sign, not a digit.  
        // "C" hex is positive, "D" hex is negative, and "F" hex is unsigned. 
        switch (Nibble(ebcdicBytes, 0))
        {
            case 0x0D:
                isNegative = true;
                break;
            case 0x0F:
            case 0x0C:
                isNegative = false;
                break;
            default:
                //throw new Exception("Bad sign nibble");
                this.ParsedSuccessfully = false;
                return this.ConvertAlphaNumEbcdic(ebcdicBytes);
        }
        long intermediate;
        long carry;
        long digit;
        for (int j = ebcdicBytes.Length * 2 - 1; j > 0; j--)
        {
            // multiply by 10
            intermediate = lo * 10;
            lo = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            intermediate = mid * 10 + carry;
            mid = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            intermediate = hi * 10 + carry;
            hi = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            // By limiting input length to 14, we ensure overflow will never occur

            digit = Nibble(ebcdicBytes, j);
            if (digit > 9)
            {
                //throw new Exception("Bad digit");
                this.ParsedSuccessfully = false;
                return this.ConvertAlphaNumEbcdic(ebcdicBytes);
            }
            intermediate = lo + digit;
            lo = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            if (carry > 0)
            {
                intermediate = mid + carry;
                mid = intermediate & 0xffffffff;
                carry = intermediate >> 32;
                if (carry > 0)
                {
                    intermediate = hi + carry;
                    hi = intermediate & 0xffffffff;
                    carry = intermediate >> 32;
                    // carry should never be non-zero. Back up with validation
                }
            }
        }

        decimal result = new Decimal((int)lo, (int)mid, (int)hi, isNegative, (byte)decimalPlaces);
        return result.ToString();
    }

    private int Nibble(byte[] ebcdicBytes, int nibbleNo)
    {
        int b = ebcdicBytes[ebcdicBytes.Length - 1 - nibbleNo / 2];
        return (nibbleNo % 2 == 0) ? (b & 0x0000000F) : (b >> 4);
    }

    private bool ByteArrayIsFullOf_0xFF(byte[] ebcdicBytes)
    {
        if (ebcdicBytes == null || ebcdicBytes.Length == 0)
        {
            return false;
        }
        foreach (byte b in ebcdicBytes)
        {
            if (b != 0xFF)
            {
                return false;
            }
        }
        return true;
    }
}


public class ParsedLine
{
    public LineTemplate Line_Template { get; private set; }
    public Dictionary<string, ParsedField> FieldDictionary
    { get; private set; } //= new Dictionary<string, ParsedField>();
    public string this[string fieldName]
    {
        get
        {
            return this.FieldDictionary[fieldName].Value.Trim();
        }
    }

    //Constructor
    public ParsedLine(LineTemplate lineTemplate, byte[] lineBytes)
    {
        this.Line_Template = lineTemplate;
        this.FieldDictionary = new Dictionary<string, ParsedField>();
        this.ParseLine(lineBytes, lineTemplate);
    }

    private void ParseLine(byte[] lineBytes, LineTemplate lineTemplate)
    {
        this.ValidateInputParameters(lineBytes, lineTemplate);

        foreach (var fieldTemplate in lineTemplate.FieldTemplateDictionary)
        {

            this.FieldDictionary.Add(fieldTemplate.Key,
              new ParsedField(lineBytes, lineTemplate.FieldTemplateDictionary[fieldTemplate.Key]));

        }
    }

    private void ValidateInputParameters(byte[] lineBytes, LineTemplate template)
    {
        if (lineBytes == null)
        {
            throw new ArgumentNullException("Line bytes required");
        }
        if (lineBytes.Length < template.LineSize)
        {
            throw new Exception(String.Format(
              "Bytes provided: {0}, line size: {1}", lineBytes.Length, template.LineSize));
        }
        if (template == null)
        {
            throw new ArgumentNullException("line template is required");
        }
        if (template.FieldsCount == 0)
        {
            throw new Exception("Field templates have not been defined in the line template");
        }
    }

    public string GetParsedFieldValuesCSV(bool addQuotes)
    {
        StringBuilder sb = new StringBuilder();
        int count = 0;

        foreach (ParsedField parsedField in this.FieldDictionary.Values)
        {
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(parsedField.Value);
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(this.FieldDictionary.Count < count ? "," : "");
            count++;
        }
        return sb.ToString();
    }
}

public class EbcdicParser
{
    public ParsedLine[] Lines { get; private set; }


    #region Constructors

    public EbcdicParser()
    {
        //Empty constructor
    }

    public EbcdicParser(byte[] allBytes, LineTemplate lineTemplate)
    {
        double expectedRows = (double)allBytes.Length / lineTemplate.LineSize;
        Console.WriteLine("{0}: Parsing started", DateTime.Now);
        Console.WriteLine("{1}: Line count est {0:#,###.00}", expectedRows, DateTime.Now);

        this.Lines = this.ParseAllLines(lineTemplate, allBytes);

        //Collect garbage
        GC.Collect();
        GC.WaitForPendingFinalizers();
        Console.WriteLine("{1}: {0} line(s) have been parsed", this.Lines.Count(), DateTime.Now);
    }

    public EbcdicParser(string sourceFilePath, LineTemplate lineTemplate)
        : this(File.ReadAllBytes(sourceFilePath), lineTemplate)
    {
        //Constructor with the file path
    }
    #endregion

    public ParsedLine[] ParseAllLines(LineTemplate lineTemplate, byte[] allBytes)
    {
        bool isSingleLine = false;
        this.ValidateInputParameters(lineTemplate, allBytes, isSingleLine);

        List<ParsedLine> parsedLines = new List<ParsedLine>();
        byte[] lineBytes = new byte[lineTemplate.LineSize];
        ParsedLine parsedLine;

        for (int i = 0; i < allBytes.Length; i += lineTemplate.LineSize)
        {
            if (i % 1000 == 0)
            {
                //Print progress
                Console.Write(i + "\r");
            }
            Array.Copy(allBytes, i, lineBytes, 0, lineTemplate.LineSize);
            parsedLine = this.ParseSingleLine(lineTemplate, lineBytes);
            parsedLines.Add(parsedLine);
        }
        return parsedLines.ToArray();
    }
    public ParsedLine[] ParseAllLines(LineTemplate lineTemplate, string sourceFilePath)
    {
        return this.ParseAllLines(lineTemplate, File.ReadAllBytes(sourceFilePath));
    }
    public ParsedLine ParseSingleLine(LineTemplate lineTemplate, byte[] lineBytes)
    {
        bool isSingleLine = true;
        this.ValidateInputParameters(lineTemplate, lineBytes, isSingleLine);
        ParsedLine parsedLine = new ParsedLine(lineTemplate, lineBytes);
        return parsedLine;
    }
    private bool ValidateInputParameters(LineTemplate lineTemplate, byte[] allBytes, bool isSingleLine)
    {
        if (allBytes == null)
        {
            throw new ArgumentNullException("Ebcdic data is not provided");
        }
        if (lineTemplate == null)
        {
            throw new ArgumentNullException("Line template is not provided");
        }
        if (lineTemplate.FieldsCount == 0)
        {
            throw new Exception("Line template must contain at least one field");
        }
        if (allBytes.Length < lineTemplate.LineSize)
        {
            throw new Exception("Data length is shorter than the line size");
        }
        if (isSingleLine && allBytes.Length != lineTemplate.LineSize)
        {
            throw new Exception("Bytes count doesn't equal to line size");
        }
        double expectedRows = (double)allBytes.Length / lineTemplate.LineSize;
        if (expectedRows % 1 != 0) //Expected number of rows is not a whole number
        {
            throw new Exception("Expected number of rows is not a whole number. Check line template.");
        }
        return true;
    }

    public void CreateCsvFile(string outputFilePath, bool includeColumnNames, bool addQuotes)
    {
        if (this.Lines == null || this.Lines.Length == 0)
        {
            throw new Exception("No lines have been parsed");
        }
        ParserUtilities.ConvertLineArrayToCsv(this.Lines, outputFilePath, includeColumnNames, addQuotes);
    }


}

public class rec03
{

    public string COLLECTIONAGENCYID  {get; private set;}
    public string CORPNUMBER { get; private set; }
    public string COUNTRYCODE { get; private set; }
    public string CUSTOMERID { get; private set; }
    public string ORDERNUMBER { get; private set; }
    public string SEQUENCENUMBER { get; private set; }


    public string OLD6DIGITID { get; private set; }
    public string PRODUCTDISCRIPTION { get; private set; }
    public string SHIPMENTDATE { get; private set; }
    public string ORIGITEMAMOUNT { get; private set; }
    public string UNPAIDAMOUNT { get; private set; }
    public string DEBTTYPE { get; private set; }
    public string ITEMDATELASTPAID { get; private set; }
    public string PRODUCTID { get; private set; }
    public string DIVISION { get; private set; }





    public rec03(string COLLECTIONAGENCYID, string CORPNUMBER, string COUNTRYCODE,
        string CUSTOMERID, string ORDERNUMBER, string SEQUENCENUMBER, string OLD6DIGITID, string PRODUCTDISCRIPTION, string SHIPMENTDATE, string ORIGITEMAMOUNT,
        string UNPAIDAMOUNT, string DEBTTYPE, string ITEMDATELASTPAID, string PRODUCTID, string DIVISION)
    {
        this.COLLECTIONAGENCYID = COLLECTIONAGENCYID;
        this.CORPNUMBER = CORPNUMBER;
        this.COUNTRYCODE = COUNTRYCODE;
        this.CUSTOMERID = CUSTOMERID;
        this.ORDERNUMBER = ORDERNUMBER;
        this.SEQUENCENUMBER = SEQUENCENUMBER;
        this.OLD6DIGITID = OLD6DIGITID;
        this.PRODUCTDISCRIPTION = PRODUCTDISCRIPTION;
        this.SHIPMENTDATE = SHIPMENTDATE;
        this.ORIGITEMAMOUNT = ORIGITEMAMOUNT;
        this.UNPAIDAMOUNT = UNPAIDAMOUNT;
        this.DEBTTYPE = DEBTTYPE;
        this.ITEMDATELASTPAID = ITEMDATELASTPAID;
        this.PRODUCTID = PRODUCTID;
        this.DIVISION = DIVISION;
    }

}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class asciiBuffer: ScriptBuffer

{
    public asciiBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class Output1Buffer: ScriptBuffer

{
    public Output1Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ExceptionsBuffer: ScriptBuffer

{
    public ExceptionsBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Settings.get_Default():SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Sett" +
    "ings")]

namespace SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{27CBC287-86BD-4253-963F-B8E77E14BE2B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</RootNamespace>
    <AssemblyName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="XElement.cs" />
    <Reference Include="FileHelpers, Version=3.3.0.0, Culture=neutral, PublicKeyToken=3e0c08d59cc3d657, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Software\1.1.0.0\FileHelpers.dll</HintPath>
    </Reference>
    <Reference Include="RGS.ArtivaGeneralPurpose, Version=1.20.0.0, Culture=neutral, PublicKeyToken=972530eacd4bf30a, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Software\1.1.0.0\RGS.ArtivaGeneralPurpose.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</msb:DisplayName>
		<msb:ProjectId>{83CA8FC3-D229-42B3-9A46-64EF494297DF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="XElement.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[XElement.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[internal class XElement
{
}]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPKE3GAAAAAAAAAAAOAAIiALATAAAIwAAAAIAAAAAAAAyqoA
AAAgAAAAwAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAAAAAQAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHiqAABPAAAAAMAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAOAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA0IoAAAAgAAAAjAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAwAAAAAYAAACOAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAOAAAAACAAAAlAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACs
qgAAAAAAAEgAAAACAAUAEEMAALBmAAABAAAAAAAAAMCpAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBEAAAoqEzAFAM0FAAAAAAAAAigSAAAKAnMTAAAKJXIB
AABwcgcAAHBvFAAACiVyBAEAcHIKAQBwbxQAAAolchECAHByFwIAcG8UAAAKJXIgAwBwciYDAHBv
FAAACiVyNwQAcHI9BABwbxQAAAolcjIFAHByOAUAcG8UAAAKJXIvBgBwcjUGAHBvFAAACiVyGAcA
cHIeBwBwbxQAAAolchEIAHByFwgAcG8UAAAKJXICCQBwcggJAHBvFAAACiVyDwoAcHIVCgBwbxQA
AAolcjILAHByOAsAcG8UAAAKJXJRDABwclcMAHBvFAAACiVyOg0AcHJADQBwbxQAAAolckEOAHBy
Rw4AcG8UAAAKJXJSDwBwclgPAHBvFAAACn0DAAAEAnMTAAAKJXIBAABwcmsQAHBvFAAACiVyeRAA
cHJ/EABwbxQAAAolcgQBAHByiRAAcG8UAAAKJXKTEABwcpkQAHBvFAAACiVypxAAcHKtEABwbxQA
AAolcr8QAHByxRAAcG8UAAAKJXIRAgBwcs0QAHBvFAAACiVy3xAAcHLlEABwbxQAAAolciADAHBy
BxEAcG8UAAAKJXI3BABwchcRAHBvFAAACiVyMgUAcHIlEQBwbxQAAAolci8GAHByRxEAcG8UAAAK
JXJpEQBwcm8RAHBvFAAACiVyGAcAcHKREQBwbxQAAAolcgIJAHBysxEAcG8UAAAKJXIPCgBwctcR
AHBvFAAACiVyMgsAcHLnEQBwbxQAAAolclEMAHBy8xEAcG8UAAAKJXIDEgBwcgkSAHBvFAAACiVy
GxIAcHIhEgBwbxQAAAolckkSAHByTxIAcG8UAAAKJXJ7EgBwcoESAHBvFAAACiVykRIAcHKXEgBw
bxQAAAolcq0SAHBysxIAcG8UAAAKJXLHEgBwcs0SAHBvFAAACiVy3xIAcHLlEgBwbxQAAAolcvMS
AHBy+RIAcG8UAAAKJXIHEwBwcg0TAHBvFAAACiVyLxMAcHI1EwBwbxQAAAolclMTAHByWRMAcG8U
AAAKJXJ7EwBwcoETAHBvFAAACiVykRMAcHKXEwBwbxQAAAolcqkTAHByrxMAcG8UAAAKJXLLEwBw
ctETAHBvFAAACiVyOg0AcHLlEwBwbxQAAAolckEOAHBy+xMAcG8UAAAKJXJSDwBwciEUAHBvFAAA
CiVySxQAcHJRFABwbxQAAAolcncUAHByfRQAcG8UAAAKJXKlFABwcqsUAHBvFAAACiVy2xQAcHLh
FABwbxQAAAolcgMVAHByCRUAcG8UAAAKJXIVFQBwchsVAHBvFAAACiVyNxUAcHI9FQBwbxQAAAol
cksVAHByURUAcG8UAAAKJXJxFQBwcncVAHBvFAAACiVygxUAcHKJFQBwbxQAAAolcp8VAHBypRUA
cG8UAAAKJXK5FQBwcr8VAHBvFAAACiVy2xUAcHLhFQBwbxQAAAolcu8VAHBy9RUAcG8UAAAKJXIR
FgBwchcWAHBvFAAACiVyJxYAcHItFgBwbxQAAAolclUWAHByWxYAcG8UAAAKJXJvFgBwcnUWAHBv
FAAACiVygRYAcHKHFgBwbxQAAAolcqEWAHBypxYAcG8UAAAKJXLHFgBwcs0WAHBvFAAACiVy/xYA
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
AAAAAIYA+RgGAJsAUEAAAAAAhgBnFwYAmwBYQAAAAACGAGoXVgGbAGBAAAAAAIYYkxMGAJsAgEAA
AAAAxgEaFwYAmwCEQAAAAACBABoFBgCbAPxAAAAAAMYAZRibBZsAgEAAAAAAxgEoFwYAnwDVQQAA
AACGGJMTqQWfAORBAAAAAIYI8BBQA6AABUIAAAAAhggBEVADoAAmQgAAAACGGJMTqQWgADVCAAAA
AIYIwAkrAKEAW0IAAAAAhggBGisAoQBQIAAAAACDGJMTBgChAIFCAAAAAJMImhKwBaEArUIAAAAA
kwgbC1cCoQC0QgAAAACTCCcLtgWhALxCAAAAAJYIhBe8BaIAw0IAAAAAhhiTEwYAogDLQgAAAACR
GJkT7QKiANhCAAAAAJMAZg/BBaIAAAABADEEAAABAL4TEBACAHMVAAABANUPAAACADwEAAADAMIT
AAABANUPAAACADwEAAADAMoTAAABAL4TAAABAPwIAAABAPcIAAABAPcIAAABAI4OAAABAI4OAAAB
AI4OAAABANQOAAACAEIKAAABAD4MAAABAIoVAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4O
AAABAAIKAAACAAULAAADAD0RAAAEALAOAAAFADkUAAABAAIKAAACAAULAAADAD0RAAAEALAOAAAB
AAIKAAACAAULAAADAD0RAAAEALAOAAAFADkUAAABAFcPAAABAIQVAAACAIwPAAADADUVAAAEAIoV
AAABAAgWAAABALcTAAABANIYAAABAKAVAAACAD0RAAADAKYPAAAEAB4YAAABAKAVAAACAD0RAAAD
AKYPAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAKwVAAACAD4MAAABAKwVAAACAGYMAAABAJQV
AAABAJQVAAACADkUAAABAJQVAAACADkUAAABAIEOAAACADkUAAABAJQVAAABAJQVAAABAK8TAAAB
AJQVAAACADkUAAABAJQVAAACAJcRAAABAJQVAAABAI4OAAABAI4OAAABAAIKAAABAFkMAAACAKwV
AAABAKwVAAACAFkMAAABAKwVAAACAGYMAAABAIoVAAABAI4OAAABAOcVAAACAFkMAAABAH0PAAAC
AFkMAAABAFkMAAACAOcVAAABAFkMAAACAH0PAAABAFkMAAACAKwVAAABAFkMAAACAOcVAAADAI4K
AAABAIwPAAACADUVAAADAIoVAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAAB
AI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABAI4OAAABADQC
AAACAG4DAAADAGcCAAAEANIBAAAFAI0DAAAGAEwDAAAHAA0CAAAIABgDAAAJAKICAAAKANIDAAAL
AK4DAAAMAIQCAAANAK4BAAAOAO8BAAAPAPQCAAABAJMSAAACAC0WAAADALoRAAABAI4OAAABAI4O
AAABAJMSAAACAC0WAAADALoRAAABAI4OAAABAI4OAAABAJMSAAACAC0WAAADALoRAAABAI4OAAAB
AI4OAAABAJMSAAACAC0WAAADALoRAAABAI4OAAABAI4OAAABACAXAAACANITAAADAMIWAAAEALoR
AAABAMIXAAABAMIXAAABAI4OAAABADoXCQCTEwEAEQCTEwYAGQCTEwoAKQCTExAAMQCTExAAOQCT
ExAAQQCTExAASQCTExAAUQCTExAAWQCTExAAYQCTExAAcQCTEwYA4QCTEwYAIQGTExAAYQGTEwYA
eQGTExUAaQCTEwYAUQFPDgYADACTEwYADAAWBSMAUQFaDgYAWQElDysAiQGNDC8AgQCTEwYAiQCT
EwYAgQCvCj4AgQAaGj4AgQCHDD4AiQBvDD4AUQEbBEsAkQBcCSsAkQA9CSsAmQE8F1EAkQFwE1gA
mQDZAmgAmQDdDm0AmQAWGHMAmQF+F34AmQE5GogAmQEfGo0AsQCTEwYAmQE8F5MAsQCGGD4AFAAW
BaAAuQCTEwYAuQCGGD4AHAAWBaAAmQGbD60AmQFND7EAmQErGo0AmQEPGLcA0QCTExAAyQBKF8oA
JACTE6AALACTEwYALAAWBaAAuQEDD+sAmQF+F/sAmQEiCQIBmQEqCYgAmQHEEisANADYF60AyQGT
ExAANACTEwYAmQFDFxABkQCTExAANAAWBSMA6QCTEwYANAAOFiUBPACFEzgBRADMF0sB6QDoCFAB
RABxGFYB0QGqCwYAaQA6DysAmQFKECsA2QGTExAAmQFDF1oB6QFPE2EB6QGlCi8AyQDtGHQB6QGl
CnkB+QEPD38BiQETF4gACQKTE4cBCQGlChAAEQIMCo0B6QGlCpIB4QE6DysAIQJmDqoBmQFGGbYB
mQGTE7sBKQKVGcYBMQI6D9cBmQBDD+QBOQJeD40AQQKyC/ABmQFND/UBKQK4C/4BMQJhAQUCMQLy
AAwCQQI6DysASQL1GBcCUQI6DysAmQF2FysCOQJgDzECWQIHF1YBEQGZFjkCYQIxED8CaQJtDisA
4QGyC0YCyQCTE0sCyQA6D1IC0QBDC1cCGQGTE2oCGQE6DysATAAxEIUCTACTEwYANACFE58CVADM
F7QCXABSGckCNAAxEIUCTAAWBSMAVABxGFYBTAAOFiUBZACFEzgBbADMF0sBTADYF60AbABxGFYB
cQJfF+0CcQLuFu0CeQLsF/ECiQHaFQEDdACTEwYA6QGUDC8AdAAWBaAAdAA+GR0DOQGTEyMDOQE6
EC8DOQEpEAEAgQKTExAAOQH5GAYAOQFnFwYAOQFqF1YBUQGTEwYAUQFHAjUDUQFBFj0DkQHAEEMD
iQJPCkkDkQKuElADUQEJFVYDmQIxEFwDUQHCGGMDoQKTGGkDuQKuCXADuQJaGXkDaQGTE38DgQGT
EwYAmQGkFowDAgANAN0DCAAkALUDCAAoALoDCAAsAL8DCAAwAMQDCAA0AMkDCAA4AM4DCAA8ANMD
CABAANgDLgALABsGLgATACQGLgAbAEMGLgAjAEwGLgArAHUGLgAzAHUGLgA7AHUGLgBDAEwGLgBL
AHsGLgBTAHUGLgBbAJIGYwBjALoDoQBrALoDwQBrALoD4QBrALoDIwFzANoGwAFrALoD4AFrALoD
AAJrALoDIAJrALoDIQJrALoDQAJrALoDQQJrALoDYAJrALoDYQJrALoDYwJ7ALoDgQJrALoDoQJr
ALoDowJrALoDwQJrALoD4QJrALoDAANrALoDAQNrALoDIANrALoDIQNrALoDQANrALoDQQNrALoD
YANrALoDYQNrALoDgANrALoDgQNrALoDoANrALoDoQNrALoDwANrALoDwQNrALoD4ANrALoD4QNr
ALoDAARrALoDAQRrALoDIARrALoDIQRrALoDQQRrALoDYQRrALoDgQRrALoDoQRrALoDwQRrALoD
4QRrALoDAQVrALoDIQVrALoDQQVrALoDYQVrALoDgAVrALoDoAVrALoDwAVrALoD4AVrALoD6QWD
AEMGAAZrALoDCQaDAEMGIAZrALoDgAZrALoDoAZrALoDwQZrALoDQAhrALoDYAhrALoDgAhrALoD
oAhrALoDYAlrALoDgAlrALoDoAprALoDwAprALoD4AprALoDAAtrALoDIAtrALoDQAtrALoDYAtr
ALoDgAtrALoDoAtrALoDwAtrALoD4AtrALoDAAxrALoDIAxrALoDQAxrALoDYAxrALoDgAxrALoD
oAxrALoDwAxrALoD4AxrALoDAA1rALoDIA1rALoDQA1rALoDYA1rALoDgA1rALoDoA1rALoDwA1r
ALoD4A1rALoDAA5rALoDIA5rALoDQA5rALoDNABjAL0A4AAWAWgBmQGiAbABwQHTAd0B6gH6ARMC
HQJcAnMCdwKMAs4CBwOHAwQAAQAGAAUACAAKAAkAEAAKABMACwAUAAwAIwANACUADgAnAA8AKQAR
ACsAEgAtABMALwAUADEAAADpGcYFAAAxCtAFAADLDtQFAADmF9QFAAD4CdAFAAAKC9gFAAAvEdQF
AACmDtQFAAArFNQFAAD6C90FAACIDtAFAADMFeIFAAAlGdAFAABfBNAFAACCGecFAAAfDOsFAAC5
GfAFAAA+EPoFAAB+Ff8FAAA0AtAFAABuA9AFAABnAtAFAADSAdAFAACNA9AFAABMA9AFAAANAtAF
AAAYA9AFAACiAtAFAADSA9AFAACuA9AFAACEAtAFAACuAdAFAADvAdAFAAD0AtAFAAA3BNAFAAAd
EOcFAAA3BNAFAAAdEOcFAAA3BNAFAAAdEOcFAAA3BNAFAAAdEOcFAAD0EAUGAAAFEQUGAADECdAF
AAAFGtAFAACeEgsGAABQCxEGAACIFxYGAgAOAAMAAQAPAAMAAgAQAAUAAQARAAUAAgASAAcAAQAT
AAcAAgAUAAkAAgAYAAsAAQAZAAsAAgAaAA0AAQAbAA0AAgAcAA8AAQAdAA8AAgAeABEAAQAfABEA
AgAgABMAAQAhABMAAgAsABUAAQAtABUAAgAuABcAAQAvABcAAgAwABkAAQAxABkAAgAyABsAAgAz
AB0AAgA0AB8AAQA1AB8AAgBCACEAAQBDACEAAgBEACMAAQBFACMAAgBGACUAAgBLACcAAQBMACcA
AgBVACkAAQBWACkAAgBXACsAAQBYACsAAgBZAC0AAQBaAC0AAgBbAC8AAQBcAC8AAgBdADEAAQBe
ADEAAgBfADMAAQBgADMAAgBhADUAAQBiADUAAgBjADcAAQBkADcAAgBlADkAAQBmADkAAgBnADsA
AQBoADsAAgBpAD0AAQBqAD0AAgBrAD8AAQBsAD8AAgBtAEEAAQBuAEEAAgBvAEMAAQBwAEMAAgBx
AEUAAQByAEUAAQB1AEcAAQB2AEkAAQB7AEsAAQB8AE0AAQCBAE8AAQCCAFEAAQCHAFMAAQCIAFUA
AgCSAFcAAgCTAFkAAgCVAFsAAgCWAF0AAgCYAF8AAgCZAGEAAQCaAGEAAgCbAGMAHACZAKYA2QDk
AAgBMAFDAX0CqwLAAt0C5QIWAwSAAAABAAAAqx5YTAAAAAAAAP4IAAAEAAAAAAAAAAAAAACRA0EE
AAAAAAsAAAAAAAAAAAAAAJoD8hcAAAAAAQABAAAAAAAAAAAAowORCwAAAAAEAAAAAAAAAAAAAACR
A0MQAAAAAAsAAAAAAAAAAAAAAJoDRBgAAAAACwAAAAAAAAAAAAAAmgPEEQAAAAALAAAAAAAAAAAA
AACaA+cRAAAAAAMAAgAHAAAAAAAAAKwDyhYAAAAABAAAAAAAAAAAAAAAkQMPCwAAAAAAAAAAAQAA
AHgUAAAAAAAAFwDfAwAAAAAZAN8DFgBBABYARgBzAPYACQH8AgEAbQACAG0AAAAAAABJRFRTQ29t
cG9uZW50TWV0YURhdGExMDAASURUU1ZhcmlhYmxlMTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbkNv
bGxlY3Rpb24xMDAASURUU1J1bnRpbWVDb25uZWN0aW9uMTAwAElEVFNDb25uZWN0aW9uTWFuYWdl
cjEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFsdWF0b3JDb250ZXh0MTAwAEFjY291bnRJbmZv
cm1hdGlvbl8xMABQYXJ0eUluZm9ybWF0aW9uXzIwAE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBM
aXN0YDEAVG9JbnQzMgBLZXlWYWx1ZVBhaXJgMgBEaWN0aW9uYXJ5YDIAQWNjb3VudEZyZWVGb3Jt
VGV4dF8yMDMAYWRkMjAzAHJlYzAzAEludDY0AENvbnN1bWVyRnJlZUZvcm1UZXh0XzIwNQBhZGQy
MDUAVG9VSW50MTYAPE1vZHVsZT4APFByaXZhdGVJbXBsZW1lbnRhdGlvbkRldGFpbHM+AEdDAGdl
dF9JVEVNREFURUxBU1RQQUlEAHNldF9JVEVNREFURUxBU1RQQUlEAGdldF9DVVNUT01FUklEAHNl
dF9DVVNUT01FUklEAGdldF9QUk9EVUNUSUQAc2V0X1BST0RVQ1RJRABnZXRfT0xENkRJR0lUSUQA
c2V0X09MRDZESUdJVElEAGdldF9DT0xMRUNUSU9OQUdFTkNZSUQAc2V0X0NPTExFQ1RJT05BR0VO
Q1lJRABHZXRPdXRwdXRJRABnZXRfQ09VTlRSWUNPREUAc2V0X0NPVU5UUllDT0RFAGdldF9ERUJU
VFlQRQBzZXRfREVCVFRZUEUAZ2V0X1NISVBNRU5UREFURQBzZXRfU0hJUE1FTlREQVRFAEJ5dGVB
cnJheUlzRnVsbE9mXzB4RkYAQWRkUGxhY2VtZW50Um93TlNGAGdldF9BU0NJSQBnZXRfRElWSVNJ
T04Ac2V0X0RJVklTSU9OAGdldF9QUk9EVUNURElTQ1JJUFRJT04Ac2V0X1BST0RVQ1RESVNDUklQ
VElPTgBTeXN0ZW0uSU8AZ2V0X1NFUVVFTkNFTlVNQkVSAHNldF9TRVFVRU5DRU5VTUJFUgBnZXRf
Q09SUE5VTUJFUgBzZXRfQ09SUE5VTUJFUgBnZXRfT1JERVJOVU1CRVIAc2V0X09SREVSTlVNQkVS
AGdldF9VTlBBSURBTU9VTlQAc2V0X1VOUEFJREFNT1VOVABnZXRfT1JJR0lURU1BTU9VTlQAc2V0
X09SSUdJVEVNQU1PVU5UAEdldEZpZWxkTmFtZXNDU1YAR2V0UGFyc2VkRmllbGRWYWx1ZXNDU1YA
dmFsdWVfXwBzZXRfRGF0YQBnZXRfQ29tcG9uZW50TWV0YURhdGEAZWJjZGljRGF0YQBkYXRhAG1z
Y29ybGliAFNvdXJjZUJ5dGVzSW5EZWMAZ2V0X09yaWdpbmFsQnl0ZXNJbkRlYwBDb252ZXJ0Qnl0
ZXNUb0RlYwBDb252ZXJ0TnVtZXJpY0ViY2RpYwBDb252ZXJ0QWxwaGFOdW1FYmNkaWMAQ29udmVy
dFBhY2tlZERhdGVTdHJFYmNkaWMAQ29udmVydERhdGVTdHJFYmNkaWMAQ29udmVydEJpbmFyeUVi
Y2RpYwBOdW1lcmljAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAEFkZABNYXJrT3V0cHV0c0Zp
bmlzaGVkAFBhY2tlZABfZXhjZXB0aW9uUmVwb3J0Q3JlYXRlZABQYXJzZWRGaWVsZABQYXJzZUZp
ZWxkADxJVEVNREFURUxBU1RQQUlEPmtfX0JhY2tpbmdGaWVsZAA8Q1VTVE9NRVJJRD5rX19CYWNr
aW5nRmllbGQAPFBST0RVQ1RJRD5rX19CYWNraW5nRmllbGQAPE9MRDZESUdJVElEPmtfX0JhY2tp
bmdGaWVsZAA8Q09MTEVDVElPTkFHRU5DWUlEPmtfX0JhY2tpbmdGaWVsZAA8Q09VTlRSWUNPREU+
a19fQmFja2luZ0ZpZWxkADxERUJUVFlQRT5rX19CYWNraW5nRmllbGQAPFNISVBNRU5UREFURT5r
X19CYWNraW5nRmllbGQAPERJVklTSU9OPmtfX0JhY2tpbmdGaWVsZAA8UFJPRFVDVERJU0NSSVBU
SU9OPmtfX0JhY2tpbmdGaWVsZAA8U0VRVUVOQ0VOVU1CRVI+a19fQmFja2luZ0ZpZWxkADxDT1JQ
TlVNQkVSPmtfX0JhY2tpbmdGaWVsZAA8T1JERVJOVU1CRVI+a19fQmFja2luZ0ZpZWxkADxVTlBB
SURBTU9VTlQ+a19fQmFja2luZ0ZpZWxkADxPUklHSVRFTUFNT1VOVD5rX19CYWNraW5nRmllbGQA
PEZpZWxkTmFtZT5rX19CYWNraW5nRmllbGQAPExpbmVUZW1wbGF0ZU5hbWU+a19fQmFja2luZ0Zp
ZWxkADxUeXBlPmtfX0JhY2tpbmdGaWVsZAA8RmllbGRfVGVtcGxhdGU+a19fQmFja2luZ0ZpZWxk
ADxMaW5lX1RlbXBsYXRlPmtfX0JhY2tpbmdGaWVsZAA8VmFsdWU+a19fQmFja2luZ0ZpZWxkADxG
aWVsZFNpemU+a19fQmFja2luZ0ZpZWxkADxMaW5lU2l6ZT5rX19CYWNraW5nRmllbGQAPFN0YXJ0
UG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxEZWNpbWFsUGxhY2VzPmtfX0JhY2tpbmdGaWVsZAA8
TGluZXM+a19fQmFja2luZ0ZpZWxkADxPcmlnaW5hbEJ5dGVzPmtfX0JhY2tpbmdGaWVsZAA8UGFy
c2VkU3VjY2Vzc2Z1bGx5PmtfX0JhY2tpbmdGaWVsZAA8RmllbGREaWN0aW9uYXJ5PmtfX0JhY2tp
bmdGaWVsZAA8RmllbGRUZW1wbGF0ZURpY3Rpb25hcnk+a19fQmFja2luZ0ZpZWxkAEFwcGVuZABV
cmlLaW5kAHJlY29yZABTQ182MmYyZTdhYjZjNjQ0NWNjYmYwMjdlYTZhZTFhZWU2ZQBSZXBsYWNl
AElzTnVsbE9yV2hpdGVTcGFjZQBnZXRfU3RhY2tUcmFjZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01l
c3NhZ2UAUmVhZEJ5dGVzUmFuZ2UARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBOaWJibGUARG91Ymxl
AFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9DdXJyZW50RmlsZQBDcmVh
dGVDc3ZGaWxlAENvbnNvbGUAZ2V0X0ZpZWxkTmFtZQBzZXRfRmllbGROYW1lAGZpZWxkTmFtZQBH
ZXRGaWxlTmFtZQBnZXRfTGluZVRlbXBsYXRlTmFtZQBzZXRfTGluZVRlbXBsYXRlTmFtZQB0ZW1w
bGF0ZU5hbWUAR2V0UnVudGltZUNvbm5lY3Rpb25CeU5hbWUARGF0ZVRpbWUAUGFyc2VkTGluZQBQ
YXJzZVNpbmdsZUxpbmUAaXNTaW5nbGVMaW5lAFBhcnNlTGluZQBXcml0ZUxpbmUAQWRkcmVzc0xp
bmUAQ29tbW9uRW5naW5lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAGdldF9UeXBl
AHNldF9UeXBlAEZpZWxkVHlwZQBmaWVsZFR5cGUAU3lzdGVtLkNvcmUAZ2V0X0N1bHR1cmUAc2V0
X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAGdldF9JbnZhcmlhbnRDdWx0dXJlAENhcHR1cmUAR2Vu
ZXJhbFB1cnBvc2VSZWNvcmRCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAFJHUy5BcnRpdmFH
ZW5lcmFsUHVycG9zZQBEaXNwb3NlAFBhcnNlAFJldmVyc2UAUGFja2VkRGF0ZQBnZXREYXRlAGdl
dEZvcm1hdGVkZGF0ZQBnZXRfRmllbGRfVGVtcGxhdGUAc2V0X0ZpZWxkX1RlbXBsYXRlAGdldF9M
aW5lX1RlbXBsYXRlAHNldF9MaW5lX1RlbXBsYXRlAEFkZEZpZWxkVGVtcGxhdGUAZmllbGRUZW1w
bGF0ZQBMaW5lVGVtcGxhdGUAbGluZVRlbXBsYXRlAHRlbXBsYXRlAFNPTFN0YXRlAEVkaXRvckJy
b3dzYWJsZVN0YXRlAERlbGV0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAERlZmF1bHRNZW1iZXJBdHRyaWJ1dGUA
Q29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUA
QXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAVG9CeXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUA
bnVtZXJpY1ZhbHVlAHZhbHVlAGdldF9GaWVsZFNpemUAc2V0X0ZpZWxkU2l6ZQBmaWVsZFNpemUA
Z2V0X0xpbmVTaXplAHNldF9MaW5lU2l6ZQBsaW5lU2l6ZQBHZXRFbmNvZGluZwBTeXN0ZW0uUnVu
dGltZS5WZXJzaW9uaW5nAFdyaXRlU3RyaW5nAElzV2VsbEZvcm1lZFVyaVN0cmluZwBnZXRfQ29u
bmVjdGlvblN0cmluZwBUb1N0cmluZwBHZXRTdHJpbmcAU3Vic3RyaW5nAGVyck1zZwBJc01hdGNo
AENvbXB1dGVTdHJpbmdIYXNoAE1hdGgAc291cmNlRmlsZVBhdGgAb3V0cHV0RmlsZVBhdGgAZ2V0
X0xlbmd0aABsZW5ndGgAQ29udmVydEViY2RpY1RvQXNjaWkAVXJpAFVucGFjawBEZWNpbWFsAGxh
YmVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTQ182MmYyZTdhYjZjNjQ0NWNjYmYwMjdlYTZhZTFh
ZWU2ZS5kbGwAc2V0X0RhdGFfSXNOdWxsAFNldE51bGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVt
AFRyaW0AQWxwaGFOdW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1
cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFZhbHVlQ29sbGVj
dGlvbgBnZXRfUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAEdyb3VwQ29sbGVjdGlvbgBnZXRf
TVRDb25uZWN0aW9uAGdldF9FeGNlcHRpb25Db25uZWN0aW9uAGdldF9TdGFydFBvc2l0aW9uAHNl
dF9TdGFydFBvc2l0aW9uAHN0YXJ0UG9zaXRpb24AQXJndW1lbnRPdXRPZlJhbmdlRXhjZXB0aW9u
AEFyZ3VtZW50TnVsbEV4Y2VwdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAG5pYmJsZU5v
AEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAAT3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EVFNQaXBlbGluZVdyYXAAY29ycABH
cm91cABTeXN0ZW0uTGlucQBDaGFyAElGb3JtYXRQcm92aWRlcgBTdHJpbmdCdWlsZGVyAE91dHB1
dDBCdWZmZXIAT3V0cHV0MUJ1ZmZlcgBQaXBlbGluZUJ1ZmZlcgBhc2NpaUJ1ZmZlcgBFeGNlcHRp
b25zQnVmZmVyAFNjcmlwdEJ1ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9Db25uZWN0aW9u
TWFuYWdlcgBUb1VwcGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAEViY2RpY1BhcnNlcgBTdHJl
YW1Xcml0ZXIAVGV4dFdyaXRlcgBCaXRDb252ZXJ0ZXIAc2V0X0ZvcmVncm91bmRDb2xvcgBDb25z
b2xlQ29sb3IARmlyZUVycm9yAFByaW50RXJyb3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0b3IA
Q29udmVydERhdGVTdHIAZGF0ZVN0cgBoZXhTdHIAc3RyAHJlYzIwM3MAcmVjMjA1cwBPdXRwdXRJ
RHMAU3lzdGVtLkRpYWdub3N0aWNzAFJHUy5BcnRpdmFHZW5lcmFsUHVycG9zZS5EYXRhLlJlY29y
ZHMAZ2V0X0RlY2ltYWxQbGFjZXMAc2V0X0RlY2ltYWxQbGFjZXMAZGVjaW1hbFBsYWNlcwBTeXN0
ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfNjJmMmU3YWI2
YzY0NDVjY2JmMDI3ZWE2YWUxYWVlNmUuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERl
YnVnZ2luZ01vZGVzAFBhcnNlclV0aWxpdGllcwBTQ182MmYyZTdhYjZjNjQ0NWNjYmYwMjdlYTZh
ZTFhZWU2ZS5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwB0aXRsZXMARGF0ZVRpbWVT
dHlsZXMAaW5jbHVkZUNvbHVtbk5hbWVzAGdldF9MaW5lcwBzZXRfTGluZXMAUGFyc2VBbGxMaW5l
cwBHZXRMaW5lcwByZW1vdmVFbXB0eUxpbmVzAGxpbmVzAGFkZFF1b3RlcwBlYmNkaWNCeXRlcwBz
b3VyY2VCeXRlcwBsaW5lQnl0ZXMAZ2V0X09yaWdpbmFsQnl0ZXMAc2V0X09yaWdpbmFsQnl0ZXMA
UmVhZEFsbEJ5dGVzAGFsbEJ5dGVzAENvbnZlcnRIZXhTdHJpbmdUb0J5dGVzAGJ5dGVzAGdldF9W
YWx1ZXMAQWRqdXN0RGVjaW1hbFZhbHVlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbklu
ZGV4ZXMAU2V0dGluZ3MAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAENvbm5lY3Rpb25z
AFN0cmluZ1NwbGl0T3B0aW9ucwBnZXRfR3JvdXBzAGdldF9DaGFycwBSZW1vdmVOb25Bc2NpaUNo
YXJzAEJ1ZmZlcnMARmlsZUhlbHBlcnMAVmFsaWRhdGVJbnB1dFBhcmFtZXRlcnMAV2FpdEZvclBl
bmRpbmdGaW5hbGl6ZXJzAGdldF9TdWNjZXNzAEV4aXN0cwBGaW5pc2hPdXRwdXRzAENyZWF0ZU5l
d091dHB1dFJvd3MAQ29uY2F0AEZvcm1hdABUcnlQYXJzZUV4YWN0AE9iamVjdABDb2xsZWN0AFNl
dEVuZE9mUm93c2V0AFBhZExlZnQAU3BsaXQAZ2V0X0RlZmF1bHQAaXNtdABYRWxlbWVudABVc2Vy
Q29tcG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQAZ2V0X0N1cnJlbnQAZ2V0
X0NvdW50AGdldF9GaWVsZHNDb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AEluc2Vy
dABDb252ZXJ0AHRocm93RXhjZXB0aW9uSWZTb3VyY2VBcnJheUlzVG9vU2hvcnQATWljcm9zb2Z0
LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAUHJpbWVPdXRwdXQATW92ZU5leHQAU3lzdGVtLlRleHQA
RnJlZUZvcm1UZXh0AEdldFZhbHVlV2l0aENvbnRleHQAU2NyaXB0Q29tcG9uZW50RXZhbENvbnRl
eHQAZ2V0X0V2YWx1YXRvckNvbnRleHQAQ29udmVydExpbmVBcnJheVRvQ3N2AGdldF9Ob3cAUG93
AEFkZFJvdwBBZGRQbGFjZW1lbnRSb3cAU291cmNlQnl0ZXNJbkhleABnZXRfT3JpZ2luYWxCeXRl
c0luSGV4AFJlZ2V4AFRvQXJyYXkAVG9DaGFyQXJyYXkAZ2V0X0tleQBnZXRfQXNzZW1ibHkAZ2V0
X1BhcnNlZFN1Y2Nlc3NmdWxseQBzZXRfUGFyc2VkU3VjY2Vzc2Z1bGx5AENvcHkAQmluYXJ5AGdl
dF9GaWVsZERpY3Rpb25hcnkAc2V0X0ZpZWxkRGljdGlvbmFyeQBnZXRfRmllbGRUZW1wbGF0ZURp
Y3Rpb25hcnkAc2V0X0ZpZWxkVGVtcGxhdGVEaWN0aW9uYXJ5AGdldF9GdWxsSW5ib3VuZERpcmVj
dG9yeQBDaXR5AG9wX0VxdWFsaXR5AG9wX0luZXF1YWxpdHkASXNOdWxsT3JFbXB0eQAAAAUwADEA
AID7VABoAGUAIABCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUALAAgAEwAdABkADoA
QgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4
AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8A
dgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBC
AEIARQBMADAAMQA6AEIAQgBFAEMAMAAxAAEFMAAzAACBBVQAaABlACAAQQBzAGgAdABvAG4AIABE
AHIAYQBrAGUAIABHAGEAbABsAGUAcgBpAGUAcwAsACAATAB0AGQAOgBBAHMAaAB0AG8AbgAgAEQA
cgBhAGsAZQAgAEcAYQBsAGwAZQByAGkAZQBzADoAQQBzAGgAdABvAG4AIABEAHIAYQBrAGUAIABQ
AE8AIABCAG8AeAAgADgANQA1ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAA
MAA1ADMAOgAxACgAOAAwADAAKQA2ADMANAAtADUAMQA2ADQAoAA6AEIAQQBHAEwAMAAzADoAQgBB
AEcAQwAwADMAAQUwADcAAIEHQQByAGQAbABlAGkAZwBoACAARQBsAGwAaQBvAHQAdAAgACYAIABT
AG8AbgBzACwAIABMAGkAbQBpAHQAZQBkADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4A
ZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4
ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgA
MAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBCAEEAUwBMADAANwA6AEIAQQBTAEMAMAA3AAEFMAA5
AACBD1QAaABlACAASABhAG0AaQBsAHQAbwBuACAAQwBvAGwAbABlAGMAdABpAG8AbgAsACAASQBu
AGMALgA6AFQAaABlACAASABhAG0AaQBsAHQAbwBuACAAQwBvAGwAbABlAGMAdABpAG8AbgA6AEgA
YQBtAGkAbAB0AG8AbgAgAEMAbwBsAGwAZQBjAHQAaQBvAG4AIABQAE8AIABCAG8AeAAgADgANAAy
ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMAOgAxACgAOAAwADAA
KQA1ADQANQAtADIAMAA3ADcAOgBCAEgAQwBMADAAOQA6AEIASABDAEMAMAA5AAEFMQAwAACA80gA
YQBtAGkAbAB0AG8AbgAgAEEAdQB0AGgAZQBuAHQAaQBjAGEAdABlAGQAOgBCAHIAYQBkAGYAbwBy
AGQAIABFAHgAYwBoAGEAbgBnAGUAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUA
IABQAE8AIABCAG8AeAAgADgAMwA2ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2
ADAAMAA1ADMAOgAxACgAOAAwADAAKQAzADIAMwAtADUANQA3ADcAoAA6AEIASABBAEwAMQAwADoA
QgBIAEEAQwAxADAAAQUxADEAAID1VgBhAG4AIABIAHkAZwBhAG4AIAAmACAAUwBtAHkAdABoAGUA
LAAgAEkAbgBjADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABm
AG8AcgBkACAARQB4AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQA
bwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1
ADUANwA3AKAAOgBCAFYAUwBMADEAMQA6AEIAVgBTAEMAMQAxAAEFMQAyAACA4UIAcgBlAGUAZAAg
AFAAZQByAGYAZQBjAHQAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAOgBCAHIA
YQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAIABQAE8AIABCAG8AeAAgADgAMwA2ACAATQBv
AHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMAOgAxACgAOAAwADAAKQAzADIA
MwAtADUANQA3ADcAoAA6AEIAQgBQAEwAMQAyADoAQgBCAFAAQwAxADIAAQUxADQAAIDxSABhAHcA
dABoAG8AcgBuAGUAIABBAHIAYwBoAGkAdABlAGMAdAB1AHIAYQBsACAAUgBlAGcAaQBzAHQAZQBy
ACwAIABMAHQAZAA6AEgAYQB3AHQAaABvAHIAbgBlADoASABhAHcAdABoAG8AcgBuAGUAIABQAE8A
IABCAG8AeAAgADgAOAA2ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1
ADMAOgCgADEAKAA4ADAAMAApADcANwAyAC0ANAAyADcANwA6AEIASABBAEwAMQA0ADoAQgBIAEEA
QwAxADQAAQUxADUAAIDpQgByAGEAZABmAG8AcgBkACAARQBkAGkAdABpAG8AbgBzADoAQgByAGEA
ZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABh
AG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8AdgBlACAA
SQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBCAEIARQBM
ADEANQA6AEIAQgBFAEMAMQA1AAEFMQA2AACBBUMAbwBsAGwAZQBjAHQAaQBiAGwAZQBzACAAVABv
AGQAYQB5ACAATgBlAHQAdwBvAHIAawAsACAATAB0AGQAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgA
YwBoAGEAbgBnAGUAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAIABQAE8AIABC
AG8AeAAgADgAMwA2ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMA
OgAxACgAOAAwADAAKQAzADIAMwAtADUANQA3ADcAoAA6AEIAQwBOAEwAMQA2ADoAQgBDAE4AQwAx
ADYAAQUxADcAAIEbQgByAGEAZABmAG8AcgBkACAAQQB1AHQAaABlAG4AdABpAGMAYQB0AGUAZAA6
AEIAcgBhAGQAZgBvAHIAZAAgAEEAdQB0AGgAZQBuAHQAaQBjAGEAdABlAGQALwBNAGkAbgB0ADoA
QgByAGEAZABmAG8AcgBkACAAQQB1AHQAaABlAG4AdABpAGMAYQB0AGUAZAAvAE0AaQBuAHQAIABQ
AE8AIABCAG8AeAAgADgANQA4ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAA
MAA1ADMAOgAgADEAKAA4ADAAMAApADMAMgAzAC0AOAAxADAANQA6AEIAQgBBAEwAMQA3ADoAQgBC
AEEAQwAxADcAAQUxADgAAIEXVABoAGUAIABCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBn
AGUAIABDAGgAZQBjAGsAIABDAG8AbQBwAGEAbgB5ACwAIABMAHQAZAA6AEIAcgBhAGQAZgBvAHIA
ZAAgAEUAeABjAGgAYQBuAGcAZQA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAg
AFAATwAgAEIAbwB4ACAAOAAzADYAIABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYA
MAAwADUAMwA6ADEAKAA4ADAAMAApADMAMgAzAC0ANQA1ADcANwCgADoAQgBCAEMATAAxADgAOgBC
AEIAQwBDADEAOAABBTEAOQAAgOFTAHQAdQBkAGkAbwAgAEgAdQBtAG0AZQBsADoAQgByAGEAZABm
AG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4A
ZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8AdgBlACAASQBM
ACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBCAFMASABMADEA
OQA6AEIAUwBIAEMAMQA5AAEFNAAwAACA/1QAaABlACAAQgByAGEAZABmAG8AcgBkACAARQB4AGMA
aABhAG4AZwBlACAATwBuAGwAaQBuAGUAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBn
AGUAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAIABQAE8AIABCAG8AeAAgADgA
MwA2ACAATQBvAHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMAOgAxACgAOAAw
ADAAKQAzADIAMwAtADUANQA3ADcAoAA6AEIAQgBPAEwANAAwADoAQgBCAE8AQwA0ADAAAQU0ADEA
AIEJVABoAGUAIABBAHMAaAB0AG8AbgAgAEQAcgBhAGsAZQAgAEcAYQBsAGwAZQByAGkAZQBzACAA
TwBuAGwAaQBuAGUAOgBBAHMAaAB0AG8AbgAgAEQAcgBhAGsAZQAgAEcAYQBsAGwAZQByAGkAZQBz
ADoAQQBzAGgAdABvAG4AIABEAHIAYQBrAGUAIABQAE8AIABCAG8AeAAgADgANQA1ACAATQBvAHIA
dABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMAOgAxACgAOAAwADAAKQA2ADMANAAt
ADUAMQA2ADQAoAA6AEIAQQBPAEwANAAxADoAQgBBAE8AQwA0ADEAAQU0ADIAAIERVABoAGUAIABI
AGEAbQBpAGwAdABvAG4AIABDAG8AbABsAGUAYwB0AGkAbwBuACAATwBuAGwAaQBuAGUAOgBUAGgA
ZQAgAEgAYQBtAGkAbAB0AG8AbgAgAEMAbwBsAGwAZQBjAHQAaQBvAG4AOgBIAGEAbQBpAGwAdABv
AG4AIABDAG8AbABsAGUAYwB0AGkAbwBuACAAUABPACAAQgBvAHgAIAA4ADQAMgAgAE0AbwByAHQA
bwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkANQA0ADUALQAy
ADAANwA3ADoAQgBIAE8ATAA0ADIAOgBCAEgATwBDADQAMgABDU0AaQBzAHQAZQByAAAFMAAyAAAJ
TQByAHMALgAACU0AaQBzAHMAAAUwADQAAA1EAG8AYwB0AG8AcgAABTAANQAAEVIAZQB2AGUAcgBl
AG4AZAAABTAANgAAB00AcwAuAAARQQBkAGoAdQB0AGEAbgB0AAAFMAA4AAAhQQBkAGoAdQB0AGEA
bgB0ACAARwBlAG4AZQByAGEAbAAAD0EAZABtAGkAcgBhAGwAAA1BAGkAcgBtAGEAbgAAIUEAaQBy
AG0AYQBuACAAMQBzAHQAIABDAGwAYQBzAHMAACFBAGkAcgBtAGEAbgAgADIAbgBkACAAQwBsAGEA
cwBzAAAFMQAzAAAhQQBpAHIAbQBhAG4AIAAzAHIAZAAgAEMAbABhAHMAcwAAIUEAdAB0AG8AcgBu
AGUAeQAgAEcAZQBuAGUAcgBhAGwAACNCAHIAaQBnAGEAZABpAGUAcgAgAEcAZQBuAGUAcgBhAGwA
AA9CAHIAbwB0AGgAZQByAAALQwBhAGQAZQB0AAAPQwBhAHAAdABhAGkAbgAABTIAMQAAEUMAaABh
AHAAbABhAGkAbgAABTIAMgAAJ0MAaABpAGUAZgAgAFAAZQB0AHQAeQAgAE8AZgBmAGkAYwBlAHIA
AAUyADMAACtDAGgAaQBlAGYAIABXAGEAcgByAGEAbgB0ACAATwBmAGYAaQBjAGUAcgAABTIANAAA
D0MAbwBsAG8AbgBlAGwAAAUyADUAABVDAG8AbQBtAGEAbgBkAGEAbgB0AAAFMgA2AAATQwBvAG0A
bQBhAG4AZABlAHIAAAUyADgAABFDAG8AcgBwAG8AcgBhAGwAAAUzADAAAA1FAG4AcwBpAGcAbgAA
BTMAMQAADUYAYQB0AGgAZQByAAAFMwAyAAAhRgBpAHIAcwB0ACAATABpAGUAdQB0AGUAbgBhAG4A
dAAABTMAMwAAHUYAaQByAHMAdAAgAFMAYQByAGcAZQBhAG4AdAAABTMANAAAIUYAbABlAGUAdAAg
AEwAaQBlAHUAdABlAG4AYQBuAHQAAAUzADUAAA9HAGUAbgBlAHIAYQBsAAAFMwA2AAARRwBvAHYA
ZQByAG4AbwByAAAFMwA3AAAbRwByAG8AdQBwACAAQwBhAHAAdABhAGkAbgAABTMAOAAAE0gAbwBu
AG8AcgBhAGIAbABlAAAVTABpAGUAdQB0AGUAbgBhAG4AdAAAJUwAaQBlAHUAdABlAG4AYQBuAHQA
IABDAG8AbABvAG4AZQBsAAApTABpAGUAdQB0AGUAbgBhAG4AdAAgAEMAbwBtAG0AYQBuAGQAZQBy
AAAFNAAzAAAlTABpAGUAdQB0AGUAbgBhAG4AdAAgAEcAZQBuAGUAcgBhAGwAAAU0ADQAACdMAGkA
ZQB1AHQAZQBuAGEAbgB0ACAARwBvAHYAZQByAG4AbwByAAAFNAA1AAAvTABpAGUAdQB0AGUAbgBh
AG4AdAAgAEoAdQBuAGkAbwByACAARwByAGEAZABlAAAFNAA2AAAhTABpAGUAdQB0AGUAbgBhAG4A
dAAgAE0AYQBqAG8AcgAABTQANwAAC00AYQBqAG8AcgAABTQAOAAAG00AYQBqAG8AcgAgAEcAZQBu
AGUAcgBhAGwAAAU0ADkAAA1NAGEAcwB0AGUAcgAABTUAMAAAH00AYQBzAHQAZQByACAAUwBlAHIA
ZwBlAGEAbgB0AAAFNQAxAAALTQBhAHkAbwByAAAFNQAyAAAVTQBpAGQAcwBoAGkAcABtAGEAbgAA
BTUANAAAE00AbwBuAHMAaQBnAG4AbwByAAAFNQA1AAAbTQBvAHMAdAAgAFIAZQB2AGUAcgBlAG4A
ZAAABTUANgAADU0AbwB0AGgAZQByAAAFNQA3AAAbUABlAHQAdAB5ACAATwBmAGYAaQBjAGUAcgAA
BTUAOAAAD1AAcgBpAHYAYQB0AGUAAAU1ADkAACdQAHIAaQB2AGEAdABlACAARgBpAHIAcwB0ACAA
QwBsAGEAcwBzAAAFNgAwAAATUAByAG8AZgBlAHMAcwBvAHIAAAU2ADEAAAtSAGEAYgBiAGkAAAU2
ADIAABlSAGUAYQByACAAQQBkAG0AaQByAGEAbAAABTYAMwAAH1IAZQB2AGUAcgBlAG4AZAAgAE0A
bwB0AGgAZQByAAAFNgA0AAAxUgBlAHYAZQByAGUAbgBkACAATQBvAHQAaABlAHIAIABTAHUAcABl
AHIAaQBvAHIAAAU2ADUAAB1SAGkAZwBoAHQAIABSAGUAdgBlAHIAZQBuAGQAAAU2ADYAAA1TAGUA
YQBtAGEAbgAABTYANwAAJVMAZQBhAG0AYQBuACAARgBpAHIAcwB0ACAAQwBsAGEAcwBzAAAFNgA4
AAAnUwBlAGEAbQBhAG4AIABTAGUAYwBvAG4AZAAgAEMAbABhAHMAcwAABTYAOQAAD1MAZQBuAGEA
dABvAHIAAAU3ADAAABFTAGUAcgBnAGUAYQBuAHQAAAU3ADEAAB1TAGUAcgBnAGUAYQBuAHQAIABN
AGEAagBvAHIAAAU3ADIAAA1TAGkAcwB0AGUAcgAABTcAMwAALVMAcABlAGMAaQBhAGwAaQBzAHQA
IABGAGkAcgBzAHQAIABDAGwAYQBzAHMAAAU3ADQAAC9TAHAAZQBjAGkAYQBsAGkAcwB0ACAARgBv
AHUAcgB0AGgAIABDAGwAYQBzAHMAAAU3ADUAAC9TAHAAZQBjAGkAYQBsAGkAcwB0ACAAUwBlAGMA
bwBuAGQAIABDAGwAYQBzAHMAAAU3ADYAAC1TAHAAZQBjAGkAYQBsAGkAcwB0ACAAVABoAGkAcgBk
ACAAQwBsAGEAcwBzAAAFNwA3AAAdUwB0AGEAZgBmACAAUwBlAHIAZwBlAGEAbgB0AAAFNwA4AAAl
VABlAGMAaABuAGkAYwBhAGwAIABTAGUAcgBnAGUAYQBuAHQAAAU3ADkAABtWAGUAcgB5ACAAUgBl
AHYAZQByAGUAbgBkAAAFOAAwAAAZVgBpAGMAZQAgAEEAZABtAGkAcgBhAGwAAAU4ADEAAB9XAGEA
cgByAGEAbgB0ACAATwBmAGYAaQBjAGUAcgAAGUEAZABkAHIAZQBzAHMAIAAuAC4ALgAuAAAPQwBp
AHQAeQAuAC4ALgAAE1MAdABhAHQAZQAgAC4ALgAuAAAdUAByAG8AYwBlAHMAcwAgAFYAYQBsAHUA
ZQBzAAAFQABAAAABAA1JAEIATQAwADMANwAABQ0ACgAAAw0AAAMKAAADMAAAC2UAbgAtAFUAUwAB
EXkAeQB5AHkATQBNAGQAZAAAC0MATwBNAEEASwAAAywAAAMuAAADLwAAA04AAEtsAGkAbgBlACAA
bABlAG4AZwB0AGgAIABtAHUAcwB0ACAAYgBlACAAZwByAGUAYQB0AGUAcgAgAHQAaABhAG4AIAB6
AGUAcgBvAABDRgBpAGUAbABkACAAIgB7ADAAfQAiACAAZQB4AGMAZQBlAGQAcwAgAGwAaQBuAGUA
IABiAG8AdQBuAGQAYQByAHkAAAMiAABLRgBpAGUAbABkACAAbgBhAG0AZQAgAGkAcwAgAHIAZQBx
AHUAaQByAGUAZAAgAGYAbwByACAAYQAgAHQAZQBtAHAAbABhAHQAZQAAeVMAdABhAHIAdAAgAHAA
bwBzAGkAdABpAG8AbgAgAGMAYQBuAG4AbwB0ACAAYgBlACAAbgBlAGcAYQB0AGkAdgBlACAAZgBv
AHIAIABhACAAZgBpAGUAbABkACAAdABlAG0AcABsAGEAdABlACAAIgB7ADAAfQAiAAB/RgBpAGwA
ZQBkACAAcwBpAHoAZQAgAG0AdQBzAHQAIABiAGUAIABnAHIAZQBhAHQAZQByACAAdABoAGEAbgAg
AHoAZQByAG8AIABmAG8AcgAgAGEAIABmAGkAZQBsAGQAIAB0AGUAbQBwAGwAYQB0AGUAIAAiAHsA
MAB9ACIAAICTSQBuAGMAbwByAHIAZQBjAHQAIABuAHUAbQBiAGUAcgAgAG8AZgAgAGIAeQB0AGUA
cwAgAHAAcgBvAHYAaQBkAGUAZAAgAGYAbwByACAAYQAgAGIAaQBuAGEAcgB5ACAAZgBpAGUAbABk
ACAAdABlAG0AcABsAGEAdABlACAAIgB7ADAAfQAiADoAIAB7ADEAfQAAgI1OAHUAbQBiAGUAcgAg
AG8AZgAgAGQAZQBjAGkAbQBhAGwAIABwAGwAYQBjAGUAcwAgAGMAYQBuAG4AbwB0ACAAYgBlACAA
bgBlAGcAYQB0AGkAdgBlACAAZgBvAHIAIABhACAAZgBpAGUAbABkACAAdABlAG0AcABsAGEAdABl
ACAAIgB7ADAAfQAiAACAg04AdQBtAGIAZQByACAAbwBmACAAZABlAGMAaQBtAGEAbAAgAHAAbABh
AGMAZQBzACAAZQB4AGMAZQBlAGQAcwAgAGwAaQBtAGkAdAAgAGYAbwByACAAYQAgAGYAaQBlAGwA
ZAAgAHQAZQBtAHAAbABhAHQAZQAgACIAewAwAH0AIgAAN3sAMAB9ADoAIABXAHIAaQB0AGkAbgBn
ACAAbwB1AHQAcAB1AHQAIABmAGkAbABlAC4ALgAuAAA7TwB1AHQAcAB1AHQAIABmAGkAbABlACAA
cABhAHQAaAAgAGkAcwAgAG4AbwB0ACAAdgBhAGwAaQBkAAAhTgBvAHQAaABpAG4AZwAgAHQAbwAg
AHcAcgBpAHQAZQAAOXsAMQB9ADoAIABPAHUAdABwAHUAdAAgAGYAaQBsAGUAIABjAHIAZQBhAHQA
ZQBkACAAewAwAH0AAAMgAAAlSQBuAHYAYQBsAGkAZAAgAGgAZQB4ACAAcwB0AHIAaQBuAGcAAC1J
AG4AdgBhAGwAaQBkACAAYQByAHIAYQB5ACAAbABlAG4AZwB0AGgAOgAgAAAxSQBuAHYAYQBsAGkA
ZAAgAHMAdABhAHIAdAAgAHAAbwBzAGkAdABpAG8AbgA6ACAAAFNTAHQAYQByAHQAIABwAG8AcwBp
AHQAaQBvAG4AIABpAHMAIABvAHUAdABzAGkAZABlACAAbwBmACAAYQByAHIAYQB5ACAAYgBvAHUA
bgBkAHMAAE9FAG4AZAAgAHAAbwBzAGkAdABpAG8AbgAgAGkAcwAgAG8AdQB0AHMAaQBkAGUAIABv
AGYAIABhAHIAcgBhAHkAIABiAG8AdQBuAGQAcwAAN0wAaQBuAGUAIABiAHkAdABlAHMAIABpAHMA
IABuAHUAbABsACAAbwByACAAZQBtAHAAdAB5AABhRgBpAGUAbABkACAAIgB7ADAAfQAiACAAbABl
AG4AZwB0AGgAIABmAGEAbABsAHMAIABvAHUAdABzAGkAZABlACAAdABoAGUAIABsAGkAbgBlACAA
bABlAG4AZwB0AGgAAGlVAG4AYQBiAGwAZQAgAHQAbwAgAHAAYQByAHMAZQAgAGYAaQBlAGwAZAAg
ACIAewAwAH0AIgAuACAAVQBuAGsAbgBvAHcAbgAgAGYAaQBlAGwAZAAgAHQAeQBwAGUAOgAgAHsA
MQB9AAALXgBcAGQAKwAkAAAZXgBcAGQAKwBbAEEALQBSAHsAfQBdACQAAQN7AAADQQAAA0IAAAND
AAADRAAAA0UAAANGAAADRwAAA0gAAANJAAADfQAAA0oAAANLAAADTAAAA00AAANPAAADUAAAA1EA
AANSAAADMQAAAzIAAAMzAAADNAAAAzUAAAM2AAADNwAAAzgAAAM5AAADLQABdUkAbgBjAG8AcgBy
AGUAYwB0ACAAbgB1AG0AYgBlAHIAIABvAGYAIABiAHkAdABlAHMAIABwAHIAbwB2AGkAZABlAGQA
IABmAG8AcgAgAGEAIABiAGkAbgBhAHIAeQAgAGYAaQBlAGwAZAA6ACAAewAxAH0AAA8wADAAMAAw
ADAAMAAwAAAPOQA5ADkAOQA5ADkAOQAAE14AXABkAHsAMwAsADUAfQAkAABzXgAoAD8APABZAGUA
YQByAD4AXABkAHsAMwB9ACkAKAA/ADwATQBvAG4AdABoAD4AXABkAHsAMgB9ACkACgAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAoAD8APABEAGEAeQA+AFwAZAB7ADIAfQApACQAAAlZAGUAYQByAAAL
TQBvAG4AdABoAAAHRABhAHkAABV5AHkAeQB5AC0ATQBNAC0AZABkAAEPXgBcAGQAewA2AH0AJAAA
DXkAeQBNAE0AZABkAAAnTABpAG4AZQAgAGIAeQB0AGUAcwAgAHIAZQBxAHUAaQByAGUAZAAAR0IA
eQB0AGUAcwAgAHAAcgBvAHYAaQBkAGUAZAA6ACAAewAwAH0ALAAgAGwAaQBuAGUAIABzAGkAegBl
ADoAIAB7ADEAfQAAM2wAaQBuAGUAIAB0AGUAbQBwAGwAYQB0AGUAIABpAHMAIAByAGUAcQB1AGkA
cgBlAGQAAHVGAGkAZQBsAGQAIAB0AGUAbQBwAGwAYQB0AGUAcwAgAGgAYQB2AGUAIABuAG8AdAAg
AGIAZQBlAG4AIABkAGUAZgBpAG4AZQBkACAAaQBuACAAdABoAGUAIABsAGkAbgBlACAAdABlAG0A
cABsAGEAdABlAAApewAwAH0AOgAgAFAAYQByAHMAaQBuAGcAIABzAHQAYQByAHQAZQBkAABBewAx
AH0AOgAgAEwAaQBuAGUAIABjAG8AdQBuAHQAIABlAHMAdAAgAHsAMAA6ACMALAAjACMAIwAuADAA
MAB9AABDewAxAH0AOgAgAHsAMAB9ACAAbABpAG4AZQAoAHMAKQAgAGgAYQB2AGUAIABiAGUAZQBu
ACAAcABhAHIAcwBlAGQAADdFAGIAYwBkAGkAYwAgAGQAYQB0AGEAIABpAHMAIABuAG8AdAAgAHAA
cgBvAHYAaQBkAGUAZAAAO0wAaQBuAGUAIAB0AGUAbQBwAGwAYQB0AGUAIABpAHMAIABuAG8AdAAg
AHAAcgBvAHYAaQBkAGUAZAAAW0wAaQBuAGUAIAB0AGUAbQBwAGwAYQB0AGUAIABtAHUAcwB0ACAA
YwBvAG4AdABhAGkAbgAgAGEAdAAgAGwAZQBhAHMAdAAgAG8AbgBlACAAZgBpAGUAbABkAABTRABh
AHQAYQAgAGwAZQBuAGcAdABoACAAaQBzACAAcwBoAG8AcgB0AGUAcgAgAHQAaABhAG4AIAB0AGgA
ZQAgAGwAaQBuAGUAIABzAGkAegBlAABNQgB5AHQAZQBzACAAYwBvAHUAbgB0ACAAZABvAGUAcwBu
ACcAdAAgAGUAcQB1AGEAbAAgAHQAbwAgAGwAaQBuAGUAIABzAGkAegBlAAGAh0UAeABwAGUAYwB0
AGUAZAAgAG4AdQBtAGIAZQByACAAbwBmACAAcgBvAHcAcwAgAGkAcwAgAG4AbwB0ACAAYQAgAHcA
aABvAGwAZQAgAG4AdQBtAGIAZQByAC4AIABDAGgAZQBjAGsAIABsAGkAbgBlACAAdABlAG0AcABs
AGEAdABlAC4AADNOAG8AIABsAGkAbgBlAHMAIABoAGEAdgBlACAAYgBlAGUAbgAgAHAAYQByAHMA
ZQBkAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUA
IABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBl
ACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAEU8AdQB0AHAA
dQB0ACAAMAAAC2EAcwBjAGkAaQAAEU8AdQB0AHAAdQB0ACAAMQAAFUUAeABjAGUAcAB0AGkAbwBu
AHMAABlNAFQAQwBvAG4AbgBlAGMAdABpAG8AbgAAJ0UAeABjAGUAcAB0AGkAbwBuAEMAbwBuAG4A
ZQBjAHQAaQBvAG4AABdDAHUAcgByAGUAbgB0AEYAaQBsAGUAAClGAHUAbABsAEkAbgBiAG8AdQBu
AGQARABpAHIAZQBjAHQAbwByAHkAAHFTAEMAXwA2ADIAZgAyAGUANwBhAGIANgBjADYANAA0ADUA
YwBjAGIAZgAwADIANwBlAGEANgBhAGUAMQBhAGUAZQA2AGUALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAOA9I1jhoNk+zeDqyvLBPAgAEIAEBCAMgAAEFIAEBEREE
IAEBDgYgAQERgLkGFRI9Ag4OByACARMAEwEDIAAOBAABAQ4JBwQSQRJFEkkCAgYOBAoBEkUECgES
QQUgABKAyQYAAw4ODg4KIAYBCA4ODggQAgQHARJNBAAAEk0FAAESTQ4KAAMdBRJNEk0dBQkgAh0O
HQ4RgNEEAAECDgUAAgIODgUAAg4ODgYVElUBElkFIAEBEwAGFRJVARJdAyAACAUgAg4ICAUgAg4I
DgwHAxJpEWUVEWEBEWUOAAUCDg4SgNURgNkQEWUGFRFhARFlAwcBDgYVElUBHgAKEAEBDhUSUQEe
AAQKAR4ABiABHQ4dAwUgAg4ODgcVEj0CDhIYBQACDg4cDgcEEnUIFRF9Ag4SGBIYCiAAFRJ5AhMA
EwEHFRJ5Ag4SGAogABURfQITABMBBxURfQIOEhgEIAATAQUgARJ1DgMgAAIGAAMODhwcBgABARGA
+QsHBBKAhR0SJAgSJAQAABFlBQACAQ4cBwACAg4RgQEFIAIBDgIEAAEODgYAAwEOHBwIBwUOHQUI
BQgHBwMdDh0FCAUAAgUOCAUHAh0DCAQgAB0DBSABAR0DBAcBHQUMAAUBEoEVCBKBFQgIAwcBAgUA
AQ4dBQYHAh0FERQFIAEOHQUFBwMODgkEAAEKDgQgAQ4IAwcBCgYAAQESgRUGAAIHHQUIBgACCB0F
CAMHAQ0FAAINDQ0NBwcSgIkICAgRZQ4RZQUgAg4IAwcAAhKAiQ4OBSAAEoExBiABEoEtDgQAAQgO
BiADAQgICAQgAQ4OBAAAEmkNBwkKCgoCCgoRgI0ICAggBQEICAgCBQMHAQgFBwIdBQgHFRI9Ag4S
IAYgARMBEwASBwIVEYCVAg4SGBURgJkCDhIYCyAAFRGAlQITABMBCBURgJUCDhIYCyAAFRGAmQIT
ABMBCBURgJkCDhIYBCAAEwAOBwQSdQgVEX0CDhIgEiAHFRJ5Ag4SIAcVEX0CDhIgAwAAAQoQAQEI
FRJRAR4ABAoBEiQFAAEdBQ4OBwUCFRJVARIkHQUSJAgGFRJVARIkBSAAHRMACyADARKAoR0IEoCl
BSACAQgcBwACCBKApQ4FIAEdCAgFIAASgUUGIAESgUkOBSAAEoCtBSAAEoFNBiABEoFRHAUAABKB
VQYgARwSgVkIAAESgV0RgWEFIAASgWUHIAIBDhKBZQQHAgkIBCABAwgIt3pcVhk04IkIiYRdzYCA
zJEI+gztSkVRp4IIPgwI1ZzD1lcEAAAAAAQBAAAABAIAAAAEAwAAAAQEAAAABAUAAAAEBgAAAAQH
AAAAAQACBgIHBhUSPQIODggGFRI9Ag4SGAIGCAMGERQDBhIYAwYdBQMGEhAIBhUSPQIOEiAEBh0S
JAMGEkQDBhJIAwYSMAMGEjQDBhI4AwYSPAQGEoCpBAYSgLUDBhJpAwYSUAYAAR0FHQUJAAIVElEB
Dg4CCyADAQ4OFRJVARJZCyADAQ4OFRJVARJdCSABFRFhARFlDgYwAQEBHgAJIAAVEj0CDhIYCiAB
ARUSPQIOEhgFIAIBCA4FIAEBEhgEIAEOAgQgABEUBSABAREUCSAFAQ4RFAgICAggBAEOERQICAkA
BAEdEiQOAgIJAAQdBR0FCAgCCAADHQUdBQgIBCAAEhgEIAAdBQUgAQEdBQQgAQECByACAR0FEhgH
IAIOHQUSGAYgAg4dBQgFIAIOCggGIAIIHQUIBSABAh0FBCAAEhAFIAEBEhAJIAAVEj0CDhIgCiAB
ARUSPQIOEiAHIAIBEhAdBQcgAgEdBRIQBSAAHRIkBiABAR0SJAYgAgEOEhAJIAIdEiQSEB0FCCAC
HRIkEhAOCCACEiQSEB0FCCADAhIQHQUCBiADAQ4CAhIgDwEODg4ODg4ODg4ODg4ODg4NIAQBCB0I
HRKAoRKApQYgAQESgKkFAAASgLUFAAEBEmkEAAASUAQAAQkOCSgAFRI9Ag4SGAMoAA4DKAAIBCgA
ERQEKAASGAQoAB0FAygAAgQoABIQCSgAFRI9Ag4SIAQoAQ4OBSgAHRIkBSgAEoCtBQgAEoC1BAgA
EmkECAASUAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAo
AQAjU0NfNjJmMmU3YWI2YzY0NDVjY2JmMDI3ZWE2YWUxYWVlNmUAAAUBAAAAABYBABFDb3B5cmln
aHQgQCAgMjAyMAAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0CQEABEl0ZW0AALQAAADOyu++AQAAAJEAAABsU3lz
dGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwg
Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5S
ZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACgqgAAAAAA
AAAAAAC6qgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArKoAAAAAAAAAAAAAAABfQ29yRGxsTWFp
bgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFjAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAWEyrHgAAAQBYTKsePwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AEMAXwA2ADIAZgAyAGUANwBhAGIANgBjADYANAA0ADUAYwBjAGIAZgAwADIANwBlAGEANgBhAGUA
MQBhAGUAZQA2AGUAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA4
ADUAMQAuADEAOQA1ADQANAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMA
XwA2ADIAZgAyAGUANwBhAGIANgBjADYANAA0ADUAYwBjAGIAZgAwADIANwBlAGEANgBhAGUAMQBh
AGUAZQA2AGUALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAQwBfADYAMgBmADIAZQA3AGEAYgA2AGMANgA0ADQANQBjAGMAYgBmADAAMgA3AGUAYQA2
AGEAZQAxAGEAZQBlADYAZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAEMAXwA2ADIAZgAyAGUANwBhAGIANgBjADYANAA0ADUAYwBjAGIAZgAwADIANwBlAGEANgBh
AGUAMQBhAGUAZQA2AGUAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAOAA1ADEALgAxADkANQA0ADQAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAOAA1ADEALgAxADkANQA0ADQAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAMAAAAzDoAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">User::CurrentFile,User::FullInboundDirectory</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">cfc051259b1ce59bd455822c88cdb62e</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">f7249825d7d467b173f57d12d997f34b5d602dc4</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Connections[MTConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaMT]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaMT]"
                      name="MTConnection" />
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Connections[ExceptionConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="ExceptionConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[ascii]"
                      hasSideEffects="true"
                      name="ascii">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[ascii].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[ascii].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1]"
                      hasSideEffects="true"
                      name="Output 1">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions]"
                      hasSideEffects="true"
                      name="Exceptions">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[ascii]"
                  endId="Package\Foreach Loop Container\Data Flow Task\ASCII.Inputs[Flat File Destination Input]"
                  name="ascii"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[ascii]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Exceptions]"
                  endId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input]"
                  name="Exceptions"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Output 0]"
                  endId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input]"
                  name="Output 0"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Output 1]"
                  endId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input]"
                  name="Output 1"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\File System Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{D29EFD04-8572-43F3-9435-6E689CFE6E47}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="File System Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="RenameFile"
              TaskOverwriteDestFile="True"
              TaskSourcePath="User::RenameSrc"
              TaskIsSourceVariable="True"
              TaskDestinationPath="User::RenameDst"
              TaskIsDestinationVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{B00450CA-139A-4D0A-A002-C6FFB9616E66}"
          DTS:From="Package\Foreach Loop Container\Data Flow Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\File System Task" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{85AA47CE-40AA-40D6-8CFB-1F8B43931E9F}"
          DTS:ObjectName="{85AA47CE-40AA-40D6-8CFB-1F8B43931E9F}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CurrentFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="150.666666666667,42"
          Id="Package\Foreach Loop Container\Data Flow Task"
          TopLeft="55,24" />
        <NodeLayout
          Size="158,42"
          Id="Package\Foreach Loop Container\File System Task"
          TopLeft="53,92" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="131.25,66">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,26"
              Start="0,0"
              End="0,18.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="253.333333333334,189.333333333334"
          Size="253.333333333334,232"
          Id="Package\Foreach Loop Container"
          TopLeft="327,116" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="120,42"
          Id="Package\Foreach Loop Container\Data Flow Task\ArtivaNB"
          TopLeft="221,197" />
        <NodeLayout
          Size="129.333333333334,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Exceptions"
          TopLeft="471,198" />
        <NodeLayout
          Size="121.333333333334,42"
          Id="Package\Foreach Loop Container\Data Flow Task\ArtivaMT"
          TopLeft="698,194" />
        <NodeLayout
          Size="108,42.6666666666667"
          Id="Package\Foreach Loop Container\Data Flow Task\ASCII"
          TopLeft="338.124994961545,272.315794599353" />
        <NodeLayout
          Size="162.666666666667,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Script Component"
          TopLeft="367,79" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[ascii]"
          TopLeft="432.866666666667,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-40.7416717051217,151.315794599353"
              Start="0,0"
              End="-40.7416717051217,143.815794599353">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.7083356268846" />
                  <mssgle:CubicBezierSegment
                    Point1="0,63.7083356268846"
                    Point2="0,67.7083356268846"
                    Point3="-4,67.7083356268846" />
                  <mssgle:LineSegment
                    End="-36.7416717051217,67.7083356268846" />
                  <mssgle:CubicBezierSegment
                    Point1="-36.7416717051217,67.7083356268846"
                    Point2="-40.7416717051217,67.7083356268846"
                    Point3="-40.7416717051217,71.7083356268846" />
                  <mssgle:LineSegment
                    End="-40.7416717051217,143.815794599353" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-30.3667538213108,72.7083356268846,19.9918359375,9.470703125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Output 1]"
          TopLeft="487.25,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="271.25,73"
              Start="0,0"
              End="271.25,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.1167002012072" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.1167002012072"
                    Point2="0,25.1167002012072"
                    Point3="4,25.1167002012072" />
                  <mssgle:LineSegment
                    End="267.25,25.1167002012072" />
                  <mssgle:CubicBezierSegment
                    Point1="267.25,25.1167002012072"
                    Point2="271.25,25.1167002012072"
                    Point3="271.25,29.1167002012072" />
                  <mssgle:LineSegment
                    End="271.25,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="115.6719140625,30.1167002012072,39.906171875,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Output 0]"
          TopLeft="448.5,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-167.5,76"
              Start="0,0"
              End="-167.5,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34"
                    Point2="0,38"
                    Point3="-4,38" />
                  <mssgle:LineSegment
                    End="-163.5,38" />
                  <mssgle:CubicBezierSegment
                    Point1="-163.5,38"
                    Point2="-167.5,38"
                    Point3="-167.5,42" />
                  <mssgle:LineSegment
                    End="-167.5,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-103.90572265625,43,40.3114453125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Exceptions]"
          TopLeft="474.333333333333,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="61.1666666666667,77"
              Start="0,0"
              End="61.1666666666667,69.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.2490886998785" />
                  <mssgle:CubicBezierSegment
                    Point1="0,27.2490886998785"
                    Point2="0,31.2490886998785"
                    Point3="4,31.2490886998785" />
                  <mssgle:LineSegment
                    End="57.1666666666667,31.2490886998785" />
                  <mssgle:CubicBezierSegment
                    Point1="57.1666666666667,31.2490886998785"
                    Point2="61.1666666666667,31.2490886998785"
                    Point3="61.1666666666667,35.2490886998785" />
                  <mssgle:LineSegment
                    End="61.1666666666667,69.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="6.51575520833334,36.2490886998785,48.13515625,11.3310546875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>