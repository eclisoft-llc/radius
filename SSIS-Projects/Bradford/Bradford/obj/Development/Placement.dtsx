<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="9/22/2020 10:04:20 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="DFW2-APPDEV-006"
  DTS:CreatorName="CORP\nokeke"
  DTS:DTSID="{A9467543-39A0-479D-AD03-6910ABF8C73D}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="15.0.2000.167"
  DTS:LocaleID="1033"
  DTS:ObjectName="Placement"
  DTS:PackageType="5"
  DTS:VersionBuild="73"
  DTS:VersionGUID="{DE8A9084-8562-4967-93B9-44EBAB50B3D6}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ARTIVA]"
      DTS:CreationName="ADO.NET:System.Data.Odbc.OdbcConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{21D9CA10-3555-4DE5-A9A3-50BD3E310AE7}"
      DTS:ObjectName="ARTIVA">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">"DSN="+  @[$Project::Namespace]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="DSN=THIRDPROD;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ArtivaMT]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{0f3254b3-cd06-42ca-93cd-245bb12dbfee}"
      DTS:ObjectName="ArtivaMT">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::PathArtivaMT]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaMT-THIRDPROD-Bradford-NSFMNT-0-6292021110649.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Data"
              DTS:DTSID="{27BFA756-0D05-4BD0-A7C7-5A2F5BD0B389}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ArtivaNB]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{382F4730-5FE6-4DC2-B09C-140FE5903AA3}"
      DTS:ObjectName="ArtivaNB">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::PathArtiva]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaNB-THIRDPROD-Bradford-Placement-0-6292021110649.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Data"
              DTS:DTSID="{27BFA756-0D05-4BD0-A7C7-5A2F5BD0B389}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Exceptions]"
      DTS:CreationName="FLATFILE"
      DTS:DelayValidation="True"
      DTS:DTSID="{20B9716C-E9DD-4633-ACDF-04582C42FC9F}"
      DTS:ObjectName="Exceptions">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::ExceptionReportFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ExceptionReport.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="5000"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Message"
              DTS:DTSID="{202C0599-76C1-4EC9-A04C-CC4DDAA51040}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{B67DAD59-1A6E-4A4B-944D-E82938BE813F}"
      DTS:ObjectName="ClientName">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Bradford</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{314E2F57-EB38-45DE-98C8-A8CF6E059DAF}"
      DTS:ObjectName="InboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Inbound\</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{2550797E-AC7D-411B-98F7-875ABA0CD2DA}"
      DTS:ObjectName="InboundFileMask">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">*bradford*.dat</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{CD24EBF4-DE58-4CB9-AD42-5DE15CFC9779}"
      DTS:ObjectName="OutboundDirectory">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">Outbound\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{41EA0CF4-7DCF-4BB2-A9B2-24E6FBE8E7C1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="CurrentFile">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{365EC417-926D-4BC2-9C5C-4915F1F245E1}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="REPLACE(REPLACE(REPLACE(LEFT(  (DT_WSTR, 99) @[System::StartTime]  ,19)&#xA;,&quot;:&quot;,&quot;&quot;),&quot;/&quot;,&quot;&quot;),&quot; &quot;,&quot;&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DateStamp">
      <DTS:VariableValue
        DTS:DataType="8">6292021110649</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{42107A5A-5D22-40F5-92B2-63D35F7A28AA}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]  +  @[User::CurrentFile]  + &quot;-ExceptionReport.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExceptionReportFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\0-ExceptionReport.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CCF3DE77-B55D-48AC-88C4-733A5FF1DCE2}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath]+ @[$Package::InboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullInboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DCEAD164-D4AD-4018-8144-720C9F081704}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::LocalPath] + @[$Package::OutboundDirectory]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FullOutboundDirectory">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{55BC944F-678A-4D16-99EA-81B5D14F2663}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]+ &quot;ArtivaNB-&quot;+  @[$Project::Namespace] +&quot;-&quot; + @[$Project::ClientName]  + &quot;-Placement-&quot; + @[User::CurrentFile]  + &quot;-&quot; + @[User::DateStamp] + &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PathArtiva">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaNB-THIRDPROD-Bradford-Placement-0-6292021110649.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5F1FCD57-E0D2-49CC-8E16-D3301FED4C48}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullOutboundDirectory]+ &quot;ArtivaMT-&quot;+  @[$Project::Namespace] +&quot;-&quot; + @[$Project::ClientName]  + &quot;-NSFMNT-&quot; + @[User::CurrentFile]  + &quot;-&quot; + @[User::DateStamp] + &quot;.csv&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PathArtivaMT">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Outbound\ArtivaMT-THIRDPROD-Bradford-NSFMNT-0-6292021110649.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E46368A6-E705-4753-B34D-DAB444132365}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory] +  REPLACE( @[User::CurrentFile] , &quot;.dat&quot;, &quot;_&quot;+ @[User::DateStamp] + &quot;.dat&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RenameDst">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5D58261D-8134-4EE3-8586-E34CD9E41E88}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FullInboundDirectory] +  @[User::CurrentFile]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="RenameSrc">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{A384D465-207E-4277-B969-756F81977777}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="DTS.ForEachFileEnumerator.3"
        DTS:DTSID="{9AC9722A-C84B-4A06-826A-C0066CF3E1F8}"
        DTS:ObjectName="{9AC9722A-C84B-4A06-826A-C0066CF3E1F8}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[User::FullInboundDirectory]</DTS:PropertyExpression>
        <DTS:PropertyExpression
          DTS:Name="FileSpec">@[$Package::InboundFileMask]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Bradford\Inbound\" />
            <FEFEProperty
              FileSpec="*bradford*.dat" />
            <FEFEProperty
              FileNameRetrievalType="1" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Data Flow Task"
          DTS:CreationName="SSIS.Pipeline.3"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{90A68EB2-5A24-4AF1-91F6-B922372B05BE}"
          DTS:ExecutableType="SSIS.Pipeline.3"
          DTS:LocaleID="-1"
          DTS:ObjectName="Data Flow Task"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="ArtivaMT">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaMT]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaMT]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Data" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="ArtivaNB">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaNB]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaNB]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input].ExternalColumns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Data" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Exceptions"
                  componentClassID="DTSAdapter.FlatFileDestination.3"
                  contactInfo="Flat File Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Flat File Destination"
                  localeId="1033"
                  name="Exceptions">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether the data will overwrite or append to the destination file."
                      name="Overwrite">true</property>
                    <property
                      dataType="System.Null"
                      description="Specifies the text to write to the destination file before any data is written."
                      expressionType="Notify"
                      name="Header" />
                    <property
                      dataType="System.Boolean"
                      description="When text qualifier is enabled, specifies whether the text qualifier in the data written to the destination file will be escaped or not."
                      name="EscapeQualifier">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="FlatFileConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input]"
                      hasSideEffects="true"
                      name="Flat File Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].Columns[Data]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="Data"
                          externalMetadataColumnId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input].ExternalColumns[Message]"
                          codePage="1252"
                          dataType="str"
                          length="5000"
                          name="Message" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Data Flow Task\Script Component"
                  componentClassID="DTS.ManagedComponentWrapper.3"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component"
                  version="8">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="33">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Output0Buffer Output0Buffer;

    public Output1Buffer Output1Buffer;

    public ExceptionsBuffer ExceptionsBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Output0Buffer)
        {
            Output0Buffer.SetEndOfRowset();
            Output0Buffer = null;
        }

        if (null != Output1Buffer)
        {
            Output1Buffer.SetEndOfRowset();
            Output1Buffer = null;
        }

        if (null != ExceptionsBuffer)
        {
            ExceptionsBuffer.SetEndOfRowset();
            ExceptionsBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 0"))
            {
                Output0Buffer = new Output0Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Output 1"))
            {
                Output1Buffer = new Output1Buffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Exceptions"))
            {
                ExceptionsBuffer = new ExceptionsBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 MTConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"MTConnection").ConnectionManager;
        }
    }

    public IDTSConnectionManager100 ARTIVA
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ARTIVA").ConnectionManager;
        }
    }

    public IDTSConnectionManager100 ExceptionConnection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"ExceptionConnection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String CurrentFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["CurrentFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

    public String FullInboundDirectory
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["FullInboundDirectory"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Linq;
using System.Xml.Linq;
using System.Globalization;
using RGS.ArtivaGeneralPurpose.Data.Records;
using FileHelpers;
using System.Data.Odbc;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();


        conn = new OdbcConnection(Connections.ARTIVA.ConnectionString);
        conn.Open();
        corp = new Dictionary<string, string>()
        {
{"01","The Bradford Exchange, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBEL01:BBEC01"},
{"03","The Ashton Drake Galleries, Ltd:Ashton Drake Galleries:Ashton Drake PO Box 855 Morton Grove IL 60053:1(800)634-5164 :BAGL03:BAGC03"},
{"07","Ardleigh Elliott & Sons, Limited:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BASL07:BASC07"},
{"09","The Hamilton Collection, Inc.:The Hamilton Collection:Hamilton Collection PO Box 842 Morton Grove IL 60053:1(800)545-2077:BHCL09:BHCC09"},
{"10","Hamilton Authenticated:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BHAL10:BHAC10"},
{"11","Van Hygan & Smythe, Inc:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BVSL11:BVSC11"},
{"12","Breed Perfect:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBPL12:BBPC12"},
{"14","Hawthorne Architectural Register, Ltd:Hawthorne:Hawthorne PO Box 886 Morton Grove IL 60053: 1(800)772-4277:BHAL14:BHAC14"},
{"15","Bradford Editions:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBEL15:BBEC15"},
{"16","Collectibles Today Network, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BCNL16:BCNC16"},
{"17","Bradford Authenticated:Bradford Authenticated/Mint:Bradford Authenticated/Mint PO Box 858 Morton Grove IL 60053: 1(800)323-8105:BBAL17:BBAC17"},
{"18","The Bradford Exchange Check Company, Ltd:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBCL18:BBCC18"},
{"19","Studio Hummel:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BSHL19:BSHC19"},
{"40","The Bradford Exchange Online:Bradford Exchange:Bradford Exchange PO Box 836 Morton Grove IL 60053:1(800)323-5577 :BBOL40:BBOC40"},
{"41","The Ashton Drake Galleries Online:Ashton Drake Galleries:Ashton Drake PO Box 855 Morton Grove IL 60053:1(800)634-5164 :BAOL41:BAOC41"},
{"42","The Hamilton Collection Online:The Hamilton Collection:Hamilton Collection PO Box 842 Morton Grove IL 60053:1(800)545-2077:BHOL42:BHOC42"}


        };

        titles = new Dictionary<string, string>()
        {

            {"01","Mister"},
{"02","Mrs."},
{"03","Miss"},
{"04","Doctor"},
{"05","Reverend"},
{"06","Ms."},
{"07","Adjutant"},
{"08","Adjutant General"},
{"09","Admiral"},
{"10","Airman"},
{"11","Airman 1st Class"},
{"12","Airman 2nd Class"},
{"13","Airman 3rd Class"},
{"14","Attorney General"},
{"16","Brigadier General"},
{"17","Brother"},
{"18","Cadet"},
{"19","Captain"},
{"21","Chaplain"},
{"22","Chief Petty Officer"},
{"23","Chief Warrant Officer"},
{"24","Colonel"},
{"25","Commandant"},
{"26","Commander"},
{"28","Corporal"},
{"30","Ensign"},
{"31","Father"},
{"32","First Lieutenant"},
{"33","First Sargeant"},
{"34","Fleet Lieutenant"},
{"35","General"},
{"36","Governor"},
{"37","Group Captain"},
{"38","Honorable"},
{"40","Lieutenant"},
{"41","Lieutenant Colonel"},
{"42","Lieutenant Commander"},
{"43","Lieutenant General"},
{"44","Lieutenant Governor"},
{"45","Lieutenant Junior Grade"},
{"46","Lieutenant Major"},
{"47","Major"},
{"48","Major General"},
{"49","Master"},
{"50","Master Sergeant"},
{"51","Mayor"},
{"52","Midshipman"},
{"54","Monsignor"},
{"55","Most Reverend"},
{"56","Mother"},
{"57","Petty Officer"},
{"58","Private"},
{"59","Private First Class"},
{"60","Professor"},
{"61","Rabbi"},
{"62","Rear Admiral"},
{"63","Reverend Mother"},
{"64","Reverend Mother Superior"},
{"65","Right Reverend"},
{"66","Seaman"},
{"67","Seaman First Class"},
{"68","Seaman Second Class"},
{"69","Senator"},
{"70","Sergeant"},
{"71","Sergeant Major"},
{"72","Sister"},
{"73","Specialist First Class"},
{"74","Specialist Fourth Class"},
{"75","Specialist Second Class"},
{"76","Specialist Third Class"},
{"77","Staff Sergeant"},
{"78","Technical Sergeant"},
{"79","Very Reverend"},
{"80","Vice Admiral"},
{"81","Warrant Officer"}
        };


    }
    private bool _exceptionReportCreated = false;
    private bool ismt = false;
    private Dictionary<string, string> corp;
    private Dictionary<string, string> titles;
    OdbcConnection conn;
    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();

        if (conn != null)
        {
            conn.Close();
            conn.Dispose();
        }
        if (!_exceptionReportCreated)
            System.IO.File.Delete(Connections.ExceptionConnection.ConnectionString);

        if (!ismt)
            System.IO.File.Delete(Connections.MTConnection.ConnectionString);

        
    }

    public override void CreateNewOutputRows()
    {
        try
        {
            string file = Variables.FullInboundDirectory + Variables.CurrentFile;

            LineTemplate lineTemplate03 = new LineTemplate(345, "Record03");


            lineTemplate03.AddFieldTemplate(new FieldTemplate("COLLECTION AGENCY ID", FieldType.AlphaNum, 0, 10));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("RECORD TYPE", FieldType.AlphaNum, 10, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SOURCE SYSTEM", FieldType.AlphaNum, 12, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("COUNTRY CODE", FieldType.AlphaNum, 14, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("CORP NUMBER", FieldType.AlphaNum, 16, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("CUSTOMER ID", FieldType.AlphaNum, 18, 9));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER", FieldType.AlphaNum, 27, 3));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ORDER NUMBER", FieldType.AlphaNum, 30, 12));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SEQUENCE NUMBER", FieldType.Packed, 42, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("OLD 6 DIGIT ID", FieldType.AlphaNum, 44, 6));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("PRODUCT DISCRIPTION", FieldType.AlphaNum, 50, 20));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("SHIPMENT DATE", FieldType.Date, 70, 8));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ORIG ITEM AMOUNT", FieldType.Packed, 78, 5, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("UNPAID AMOUNT", FieldType.Packed, 83, 5, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("DEBT TYPE", FieldType.AlphaNum, 88, 2));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("ITEM DATE LAST PAID", FieldType.Date, 90, 8));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER2", FieldType.AlphaNum, 98, 115));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("PRODUCT ID", FieldType.AlphaNum, 213, 12));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("DIVISION", FieldType.AlphaNum, 225, 3));
            lineTemplate03.AddFieldTemplate(new FieldTemplate("FILLER3", FieldType.AlphaNum, 228, 117));


            LineTemplate lineTemplate = new LineTemplate(345, "Record02");


            lineTemplate.AddFieldTemplate(new FieldTemplate("COLLECTION AGENCY ID", FieldType.AlphaNum, 0, 10));
            lineTemplate.AddFieldTemplate(new FieldTemplate("RECORD TYPE", FieldType.AlphaNum, 10, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("SOURCE SYSTEM", FieldType.AlphaNum, 12, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("COUNTRY CODE", FieldType.AlphaNum, 14, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CORP NUMBER", FieldType.AlphaNum, 16, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ID", FieldType.AlphaNum, 18, 9));
            lineTemplate.AddFieldTemplate(new FieldTemplate("FILLER", FieldType.AlphaNum, 27, 3));
            lineTemplate.AddFieldTemplate(new FieldTemplate("ORDER NUMBER", FieldType.AlphaNum, 30, 12));
            lineTemplate.AddFieldTemplate(new FieldTemplate("SEQUENCE NUMBER", FieldType.Packed, 42, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER LAST NAME", FieldType.AlphaNum, 44, 20));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER FIRST NAME", FieldType.AlphaNum, 64, 15));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER MIDDLE INITIAL", FieldType.AlphaNum, 79, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER TITLE", FieldType.AlphaNum, 80, 4));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ADDRESS", FieldType.AlphaNum, 84, 90));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER ZIP", FieldType.AlphaNum, 174, 9));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUST TEL NUMBER", FieldType.AlphaNum, 183, 15));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER STATUS", FieldType.AlphaNum, 198, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER TOTAL OWING", FieldType.Packed, 199, 5, 2));
            lineTemplate.AddFieldTemplate(new FieldTemplate("CUSTOMER DATE LAST PAID", FieldType.Date, 204, 8));
            lineTemplate.AddFieldTemplate(new FieldTemplate("MAILING STATUS CODE", FieldType.AlphaNum, 212, 1));
            lineTemplate.AddFieldTemplate(new FieldTemplate("FILLER2", FieldType.AlphaNum, 213, 132));

            EbcdicParser parser = new EbcdicParser(file, lineTemplate);
            EbcdicParser parser03 = new EbcdicParser(file, lineTemplate03);


            bool isrec2 = false;


            string[] corpval = null;
            
            Dictionary<string, rec03> rec3s = new Dictionary<string, rec03>();
            List<string> unknownrecs = new List<string>();
            List<string> rec2s = new List<string>();

            string cliphone = "";

            foreach (ParsedLine line in parser03.Lines)
            {
                if (line["RECORD TYPE"] == "03")
                {


                    rec3s.Add(line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"], new rec03(line["COLLECTION AGENCY ID"],
                line["CORP NUMBER"],
                line["COUNTRY CODE"],
                line["CUSTOMER ID"],
                line["ORDER NUMBER"],
                line["SEQUENCE NUMBER"],
                line["OLD 6 DIGIT ID"],
                line["PRODUCT DISCRIPTION"],
                line["SHIPMENT DATE"],
                line["ORIG ITEM AMOUNT"],
                line["UNPAID AMOUNT"],
                line["DEBT TYPE"],
                line["ITEM DATE LAST PAID"],
                line["PRODUCT ID"],
                line["DIVISION"]));
                }
                }
            
            
            foreach (ParsedLine line in parser.Lines)
            {

                if (line["RECORD TYPE"] != "03" && line["RECORD TYPE"] != "02" && line["RECORD TYPE"] != "99" && line["RECORD TYPE"] != "00")
                {

                    unknownrecs.Add(line["ORDER NUMBER"]);
                    
                }
                else
                if (line["RECORD TYPE"] == "02")
                {
                    var Record10 = new AccountInformation_10();
                    var Record20 = new PartyInformation_20();
                    var rec203s = new List<AccountFreeFormText_203>();
                    var Record100 = new PlacementInformation_100();
                    var Record110 = new SegmentationScores_110();
                    var Record808 = new RetailClubInformation_808();
                    var Record112 = new ResponsiblePartyInfo_112();
                    var inote = new ImportantNote_INOTE();
                    isrec2 = true;
                    Record100.CreditorInternalCreditorID = line["COLLECTION AGENCY ID"];
                    rec2s.Add(line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"]);
                    if (line["COUNTRY CODE"] == "01")
                        Record20.Country = "US";
                    else
                    {
                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("Errored due to Non US account based on Country Code. Order Number: {0}", line["ORDER NUMBER"]);
                        continue;
                    }

                    if (corp.ContainsKey(line["CORP NUMBER"]))
                    {
                        corpval = corp[line["CORP NUMBER"]].Split(':');
                        Record808.LocationNumber = line["CORP NUMBER"];
                        Record100.LocationPracticeCode = corpval[4];
                        Record808.LocationName = corpval[0];
                        Record100.LocationPracticeName = corpval[1];
                        cliphone = corpval[3];

                    }

                    inote.Note = "automated bill pay phone number for client : " + cliphone;

                    Record100.CreditorInternalConsumerAccountNumber = line["CUSTOMER ID"];
                    Record808.CustomerID = line["CUSTOMER ID"];
                    Record10.ClientReferenceNumber = line["ORDER NUMBER"] + line["SEQUENCE NUMBER"].PadLeft(3,'0');
                    Record808.OrderNumber = line["ORDER NUMBER"];
                    Record808.ItemNumber = line["SEQUENCE NUMBER"];
                    Record20.LastName = line["CUSTOMER LAST NAME"];
                    Record20.FirstName = line["CUSTOMER FIRST NAME"];
                    Record112.MiddleName = line["CUSTOMER MIDDLE INITIAL"];
                    if(titles.ContainsKey(line["CUSTOMER TITLE"]))
                        Record112.ContactPrefix = titles[line["CUSTOMER TITLE"]];

                    string[] df = line["CUSTOMER ADDRESS"].Split(',');
                    string[] ad = df[0].Split(new[] { "  " }, StringSplitOptions.RemoveEmptyEntries);
                    string city = ad[ad.Length - 1];
                    string state = df[df.Length - 1];
                    string address = df[0].Substring(0, line["CUSTOMER ADDRESS"].IndexOf(city));

                    Record20.AddressLine = address;
                    Record20.City = city;
                    Record20.State = state;
                    Record10.SOLState = state;
                    Record20.PostalCode = line["CUSTOMER ZIP"];
                    Record20.PrimaryPhoneNumber = line["CUST TEL NUMBER"];

                    AccountFreeFormText_203 cstatus = null;
                    if(!string.IsNullOrEmpty(line["CUSTOMER STATUS"]))
                        cstatus = new AccountFreeFormText_203 { FreeFormText = "Client status for the Consumer: " + line["CUSTOMER STATUS"] };

                    decimal amt = string.IsNullOrEmpty(line["CUSTOMER TOTAL OWING"]) ? 0 : Convert.ToDecimal(line["CUSTOMER TOTAL OWING"]);
                    Record808.TotalBalance = amt;
                    Record10.PrincipalInitalBalance = amt;
                    Record100.PrincipalBalanceAtPlacement = amt;
                    Record10.ClientLastPayDate = getDate(line["CUSTOMER DATE LAST PAID"]);

                    AccountFreeFormText_203 mstatus = null;
                    if(!string.IsNullOrEmpty(line["MAILING STATUS CODE"]))
                        mstatus = new AccountFreeFormText_203 { FreeFormText = "Client file filed Mail Status: " + line["MAILING STATUS CODE"] };
                    ConsumerFreeFormText_205 cid = null;

                    string k = line["COLLECTION AGENCY ID"] + line["CORP NUMBER"] + "01" + line["ORDER NUMBER"] + line["SEQUENCE NUMBER"];

                    if (rec3s.ContainsKey(k))
                    {

                        if (!string.IsNullOrEmpty(rec3s[k].OLD6DIGITID))
                            cid = new ConsumerFreeFormText_205 { FreeFormText = "Client Old customer ID number: " + rec3s[k].OLD6DIGITID };
                        Record808.ItemDesscription = rec3s[k].PRODUCTDISCRIPTION;
                        DateTime? d = null;
                        if (string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                            d = Record10.ClientLastPayDate;
                        else
                            d = getDate(rec3s[k].SHIPMENTDATE);

                        Record10.DelinquencyDate = d;
                        Record808.DateShipped = d;
                        Record10.SOLDate = d;
                        Record10.ServiceDate = d;
                        Record100.BKEffectiveDate = d;

                        if (string.IsNullOrEmpty(line["CUSTOMER DATE LAST PAID"]) && string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                        {
                            ExceptionsBuffer.AddRow();
                            ExceptionsBuffer.Data = string.Format("No Date in file for Mandatory dates, account {0} on status =No sol date hold.", line["ORDER NUMBER"]);

                        }
                        else
                        if (!string.IsNullOrEmpty(line["CUSTOMER DATE LAST PAID"]) && string.IsNullOrEmpty(rec3s[k].SHIPMENTDATE))
                        {
                            _exceptionReportCreated = true;
                            ExceptionsBuffer.AddRow();
                            ExceptionsBuffer.Data = string.Format("Account {0} had no shipment date. Customer last paid date used instead.", line["ORDER NUMBER"]);


                        }

                        Record808.OrderTotal = string.IsNullOrEmpty(rec3s[k].ORIGITEMAMOUNT) ? 0 : Convert.ToDecimal(rec3s[k].ORIGITEMAMOUNT);
                        Record808.TotalPastDueAmount = string.IsNullOrEmpty(rec3s[k].UNPAIDAMOUNT) ? 0 : Convert.ToDecimal(rec3s[k].UNPAIDAMOUNT);

                        if (rec3s[k].DEBTTYPE == "01")
                            Record100.CollectionType = "regular";
                        else if (rec3s[k].DEBTTYPE == "02")
                        {

                            string str = string.Empty;
                            using (OdbcCommand cmd = new OdbcCommand(string.Format(" SELECT " +
                        "account.ARACID FROM %STARTTABLE ARCLIENT INNER JOIN ARACCOUNT account on ARCLID = ARACCLTID AND ARCLID IN ('BBEL01','BAGL03','BASL07','BHCL09','BHAL10','BVSL11'," +
                        "'BBPL12', 'BHAL14', 'BBEL15', 'BCNL16', 'BBAL17', 'BBCL18','BSHL19', 'BBOL40', 'BAOL41', 'BHOL42') " +
                        "JOIN ARENTITY ent ON account.ARACRPID = ent.ARENID " +
                        "JOIN ZZRETAILCLUB zz ON zz.ZZRCACID = account.ARACID " +
                                "WHERE account.ARACCLACCT = '{0}'"
                                 , rec3s[k].ORDERNUMBER + rec3s[k].SEQUENCENUMBER.PadLeft(3,'0')), conn, null))
                            {
                                if (conn.State != ConnectionState.Open)
                                    conn.Open();

                                cmd.CommandTimeout = 300;

                                var aracid = cmd.ExecuteScalar();

                                if (aracid == DBNull.Value || aracid == null || aracid.ToString() == "")
                                {
                                    _exceptionReportCreated = true;
                                    ExceptionsBuffer.AddRow();
                                    ExceptionsBuffer.Data = string.Format("No artiva account found for Order {0}", rec3s[k].ORDERNUMBER);

                                }
                                else
                                {
                                    str = "NSF 03 record received for this account from Client on " + DateTime.Today.ToString("mmddyyyy") + " in file " + Variables.CurrentFile + ". NSF amount goes to another agency. Balance will not be updated due to record being received.";
                                    AddPlacementRowNSF(new AccountFreeFormText_203 { AccountId = aracid.ToString(), FreeFormText = "label: " + str });
                                    ismt = true;
                                }
                            }


                        }

                        Record808.LastRemitDate = getDate(rec3s[k].ITEMDATELASTPAID);
                        Record808.ProductID = rec3s[k].PRODUCTID;
                        Record808.Room = rec3s[k].DIVISION;
                    } else
                    {

                        Record20.StatusCode = "HOLD";
                        AddPlacementRow(new AccountFreeFormText_203 { FreeFormText = "label: " + "Only record type 02 found for this order number " + line["ORDER NUMBER"] + " loaded data from that record.account on hold" });
                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("No Record type 3 recieved account {0} on hold.", line["ORDER NUMBER"]);
                    }


                    Record10.ClientID = Record100.LocationPracticeCode;
                    Record10.ListedDate = DateTime.Today;
                    Record100.IncomingFileName = Variables.CurrentFile;
                    Record100.DateLoaded = DateTime.Today;
                    Record10.SOLAgreementType = "OPEN";
                    Record20.RelationshipTypeKey = "PRIM";
                    Record10.DebtDescription = Record808.ProductID + " " + Record808.ItemDesscription;

                    AddPlacementRow(Record10);
                    AddPlacementRow(Record20);
                    AddPlacementRow(Record100);
                    AddPlacementRow(Record808);
                    AddPlacementRow(Record112);
                    AddPlacementRow(inote);

                    if (cstatus!=null)
                        AddPlacementRow(cstatus);
                    if (mstatus != null)
                        AddPlacementRow(mstatus);
                    if (cid != null)
                        AddPlacementRow(cid);


                }


            }

            if (isrec2 || rec3s.Count > 0)
            {
                foreach (var i in unknownrecs)
                {

                    _exceptionReportCreated = true;
                    ExceptionsBuffer.AddRow();
                    ExceptionsBuffer.Data = string.Format("Incorrect record type could not load, Record {0} sent by client but could not be loaded due to unexpected value", i);
                }
            }

            if (!isrec2 && rec3s.Count == 0)
            {

                _exceptionReportCreated = true;
                ExceptionsBuffer.AddRow();
                ExceptionsBuffer.Data = "Incorrect record types could not load. Record(unexpected value) sent by client but could not be loaded due to unexpected values.";

            }


                foreach (KeyValuePair<string,rec03> i in rec3s)
                {
                    string k = i.Value.COLLECTIONAGENCYID + i.Value.CORPNUMBER + "01" + i.Value.ORDERNUMBER + i.Value.SEQUENCENUMBER;
                    if (!rec2s.Contains(k))
                    {

                        _exceptionReportCreated = true;
                        ExceptionsBuffer.AddRow();
                        ExceptionsBuffer.Data = string.Format("Only record type 03 found for this order number {0} could not load", i.Value.ORDERNUMBER);
                    }


                }

            
        } catch(Exception e)
        {
            bool cancel = false;
            ComponentMetaData.FireError(10, "Process Values", e.Message + "@@" + e.StackTrace, "", 0, out cancel);
        }

    }

    public static byte[] ConvertEbcdicToAscii(byte[] ebcdicData)
    {
        // Create two different encodings.      
        Encoding ascii = Encoding.ASCII;
        Encoding ebcdic = Encoding.GetEncoding("IBM037");

        //Retutn Ascii Data 
        return Encoding.Convert(ebcdic, ascii, ebcdicData);
    }

    public static IEnumerable<string> GetLines(string str, bool removeEmptyLines = false)
    {
        return str.Split(new[] { "\r\n", "\r", "\n" },
            removeEmptyLines ? StringSplitOptions.RemoveEmptyEntries : StringSplitOptions.None);
    }

    private void add203(string label, string data, List<AccountFreeFormText_203> rec203s)
    {
        if (string.IsNullOrEmpty(data) || data == "0")
            return;

        rec203s.Add(new AccountFreeFormText_203 { FreeFormText = label + data });
    }

    private void add205(string label, string data, List<ConsumerFreeFormText_205> rec205s)
    {
        if (string.IsNullOrEmpty(data) || data == "0")
            return;
        
        rec205s.Add(new ConsumerFreeFormText_205 { FreeFormText = label + data });
    }

    private string getFormateddate(string str)
    {

        if (!string.IsNullOrEmpty(str))
        {
            str = str.Length < 8 && str.Substring(0, 1) != "0" ? "0" + str : str;
            str = str.Length < 8 ? str.Insert(2, "0") : str;

        }


        return str;
    }
    private DateTime? getDate(string d)
    {

        CultureInfo enUS = new CultureInfo("en-US");
        DateTime dateValue;
        bool isdate = DateTime.TryParseExact(getFormateddate(d), "yyyyMMdd", enUS,
                          DateTimeStyles.None, out dateValue);

        if (isdate)
            return dateValue;
        else
            return null;
    }


    private void AddPlacementRow<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList);
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output0Buffer.AddRow();
        Output0Buffer.Data = recordString.ToUpper();
    }

    private void AddPlacementRowNSF<T>(T record) where T : GeneralPurposeRecordBase
    {
        var recordList = new List<T>();
        recordList.Add(record);
        var recordString = CommonEngine.WriteString<T>(recordList);
        string recordType = recordString.Split(',')[0];

        if (string.IsNullOrWhiteSpace(recordType.Replace(recordString, "").Replace("COMAK", "").Replace(",", "").Replace(".", "").Replace("0", "").Replace("/", "").Replace("N", "")))
            return;

        Output1Buffer.AddRow();
        Output1Buffer.Data = recordString.ToUpper();
    }
}


public class LineTemplate
{
    public Dictionary<string, FieldTemplate> FieldTemplateDictionary { get; set; }
    public string LineTemplateName { get; set; } //Just a name to distinguish your templates
    public int LineSize { get; set; } //bytes per "line"
    public int FieldsCount
    {
        get
        {
            return this.FieldTemplateDictionary.Count;
        }
    }

    //Constructor 
    public LineTemplate(int lineSize, string templateName)
    {
        if (lineSize <= 0)
        {
            throw new ArgumentOutOfRangeException("line length must be greater than zero");
        }
        this.FieldTemplateDictionary = new Dictionary<string, FieldTemplate>();
        this.LineTemplateName = templateName;
        this.LineSize = lineSize;
    }

    public void AddFieldTemplate(FieldTemplate fieldTemplate)
    {
        if ((fieldTemplate.StartPosition + fieldTemplate.FieldSize) > this.LineSize)
        {
            throw new Exception(String.Format("Field \"{0}\" exceeds line boundary", fieldTemplate.FieldName));
        }

        this.FieldTemplateDictionary.Add(fieldTemplate.FieldName, fieldTemplate);
    }

    public string GetFieldNamesCSV(bool addQuotes)
    {
        StringBuilder sb = new StringBuilder();
        int count = 0;

        foreach (FieldTemplate fieldTemplate in this.FieldTemplateDictionary.Values)
        {
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(fieldTemplate.FieldName);
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(this.FieldTemplateDictionary.Count < count ? "," : "");
            count++;
        }
        return sb.ToString();
    }


}

public enum FieldType
{
    AlphaNum, Packed, Binary, Numeric, Date,
    PackedDate, SourceBytesInHex, SourceBytesInDec
}

public class FieldTemplate
{
    public string FieldName { get; private set; }
    public FieldType Type { get; private set; }
    public int StartPosition { get; private set; }
    public int FieldSize { get; private set; }
    public int DecimalPlaces { get; private set; }   //Scale -- for numerical data only

    //Constructor 1 
    public FieldTemplate(string fieldName, FieldType fieldType,
        int startPosition, int fieldSize, int decimalPlaces)
    {
        this.ValidateInputParameters(fieldName, fieldType, startPosition, fieldSize, decimalPlaces);
        this.FieldName = fieldName.Trim();
        this.Type = fieldType;
        this.StartPosition = startPosition;
        this.FieldSize = fieldSize;
        this.DecimalPlaces = decimalPlaces;
    }

    //Constructor 2: Default decimalPlaces = 0
    public FieldTemplate(string fieldName, FieldType fieldType, int startPosition, int fieldSize)
        : this(fieldName, fieldType, startPosition, fieldSize, 0)
    {
        //decimalPlaces = 0
    }

    private void ValidateInputParameters(string fieldName,
      FieldType fieldType, int startPosition, int fieldSize, int decimalPlaces)
    {
        if (fieldName == null || fieldName.Trim().Length == 0)
        {
            throw new ArgumentNullException("Field name is required for a template");
        }
        if (startPosition < 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Start position cannot be negative for a field template \"{0}\"", fieldName));
        }
        if (fieldSize <= 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Filed size must be greater than zero for a field template \"{0}\"", fieldName));
        }
        if (fieldType == FieldType.Binary)
        {
            if (fieldSize != 2 && fieldSize != 4)
            {
                throw new Exception(String.Format(
                  "Incorrect number of bytes provided for a binary field template \"{0}\": {1}",
                  fieldName, fieldSize));
            }
        }
        if (decimalPlaces < 0)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Number of decimal places cannot be negative for a field template \"{0}\"", fieldName));
        }
        if (decimalPlaces > 6)
        {
            throw new ArgumentOutOfRangeException(String.Format(
              "Number of decimal places exceeds limit for a field template \"{0}\"", fieldName));
        }
    }


}

public static class ParserUtilities
{
    public static void PrintError(string errMsg)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine(errMsg);
        Console.ForegroundColor = ConsoleColor.Gray;
    }

    public static void ConvertLineArrayToCsv(ParsedLine[] lines,
      string outputFilePath, bool includeColumnNames, bool addQuotes)
    {
        Console.WriteLine("{0}: Writing output file...", DateTime.Now);

        if (Uri.IsWellFormedUriString(outputFilePath, UriKind.RelativeOrAbsolute))
        {
            throw new Exception("Output file path is not valid");
        }
        if (lines == null || lines.Length == 0)
        {
            PrintError("Nothing to write");
            return;
        }

        try
        {
            if (File.Exists(outputFilePath))
            {
                File.Delete(outputFilePath);
            }

            using (TextWriter tw = new StreamWriter(outputFilePath, true))
            {
                if (includeColumnNames && lines.Length > 0)
                {
                    tw.WriteLine(lines[0].Line_Template.GetFieldNamesCSV(addQuotes));
                }
                foreach (ParsedLine line in lines)
                {
                    tw.WriteLine(line.GetParsedFieldValuesCSV(addQuotes));
                }
            }
            Console.WriteLine("{1}: Output file created {0}",
              Path.GetFileName(outputFilePath), DateTime.Now);
        }
        catch (Exception ex)
        {
            PrintError(ex.Message);
        }
    }

    public static string ConvertBytesToDec(byte[] bytes)
    {
        string result = "";
        foreach (byte b in bytes)
        {
            result += (int)b + " ";
        }
        return result.Trim();
    }

    public static byte[] ConvertHexStringToBytes(string hexStr)
    {
        if ((hexStr.Length + 1) % 3 != 0)
        {
            throw new Exception("Invalid hex string");
        }

        String[] strArray = hexStr.Split('-');
        byte[] byteArray = new byte[strArray.Length];

        for (int i = 0; i < strArray.Length; i++)
        {
            byteArray[i] = Convert.ToByte(strArray[i], 16);
        }

        return byteArray;
    }

    public static string RemoveNonAsciiChars(string text)
    {
        char[] chars = text.ToCharArray();

        for (int i = 0; i < chars.Length; i++)
        {
            if ((int)chars[i] < 32 || (int)chars[i] > 126)
            {
                chars[i] = ' '; //Convert non-printable char to "space"
            }
            else if (chars[i] == '"' || chars[i] == '^') //Remove quote char
            {
                chars[i] = ' ';
            }
        }

        return new String(chars).Trim();
    }

    public static byte[] ReadBytesRange(byte[] sourceBytes,
      int startPosition, int length, bool throwExceptionIfSourceArrayIsTooShort)
    {
        byte[] resultBytes;

        if (length <= 0)
        {
            throw new Exception("Invalid array length: " + length);
        }
        if (startPosition < 0)
        {
            throw new Exception("Invalid start position: " + length);
        }
        if (sourceBytes.Length < startPosition)
        {
            throw new Exception("Start position is outside of array bounds");
        }
        if (sourceBytes.Length - startPosition - length < 0)
        {
            if (throwExceptionIfSourceArrayIsTooShort)
            {
                throw new Exception("End position is outside of array bounds");
            }
            else
            {
                //Shorten the length of output array for remaining bytes
                length = sourceBytes.Length - startPosition;
            }
        }

        resultBytes = new byte[length];
        Array.Copy(sourceBytes, startPosition, resultBytes, 0, length);
        return resultBytes;
    }

    public static byte[] ReadBytesRange(byte[] sourceBytes, int startPosition, int length)
    {
        bool throwExceptionIfSourceArrayIsTooShort = true;
        byte[] resultBytes = ReadBytesRange(sourceBytes,
          startPosition, length, throwExceptionIfSourceArrayIsTooShort);
        return resultBytes;
    }
}


public class ParsedField
{
    public FieldTemplate Field_Template { get; private set; }
    public string Value { get; private set; }
    public byte[] OriginalBytes { get; private set; }
    public string OriginalBytesInHex
    {
        get
        {
            return BitConverter.ToString(this.OriginalBytes);
        }
    }
    public string OriginalBytesInDec
    {
        get
        {
            return ParserUtilities.ConvertBytesToDec(this.OriginalBytes);
        }
    }
    public bool ParsedSuccessfully { get; private set; }

    //Constructor
    public ParsedField(byte[] lineBytes, FieldTemplate fieldTemplate)
    {
        this.ParsedSuccessfully = true;
        this.Field_Template = fieldTemplate;
        this.Value = ParseField(lineBytes, fieldTemplate);
    }

    private string ParseField(byte[] lineBytes, FieldTemplate template)
    {
        if (lineBytes == null || lineBytes.Length == 0)
        {
            ParserUtilities.PrintError("Line bytes is null or empty");
            this.ParsedSuccessfully = false;
            return null;
        }
        if (lineBytes.Length < (template.StartPosition + template.FieldSize))
        {
            this.ParsedSuccessfully = false;
            throw new Exception(String.Format(
              "Field \"{0}\" length falls outside the line length", template.FieldName));
        }

        byte[] fieldBytes = new byte[template.FieldSize];
        Array.Copy(lineBytes, template.StartPosition, fieldBytes, 0, template.FieldSize);
        this.OriginalBytes = fieldBytes;

        if (this.Field_Template.Type == FieldType.AlphaNum)
        {
            return this.ConvertAlphaNumEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.Numeric)
        {
            return this.ConvertNumericEbcdic(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Packed)
        {
            return this.Unpack(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Binary)
        {
            return ConvertBinaryEbcdic(fieldBytes, template.DecimalPlaces);
        }
        else if (this.Field_Template.Type == FieldType.Date)
        {
            return ConvertDateStrEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.PackedDate)
        {
            return ConvertPackedDateStrEbcdic(fieldBytes);
        }
        else if (this.Field_Template.Type == FieldType.SourceBytesInHex)
        {
            return this.OriginalBytesInHex;
        }
        else if (this.Field_Template.Type == FieldType.SourceBytesInDec)
        {
            return this.OriginalBytesInDec;
        }
        else
        {
            this.ParsedSuccessfully = false;
            throw new Exception(String.Format(
              "Unable to parse field \"{0}\". Unknown field type: {1}",
              template.FieldName, template.Type.ToString()));
        }
    }

    private string ConvertAlphaNumEbcdic(byte[] ebcdicBytes)
    {
        if (this.ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        //Encoding asciiEnc = Encoding.ASCII;
        //Encoding ebcdicEnc = Encoding.GetEncoding("IBM037");
        //string result = Encoding.ASCII.GetString(Encoding.Convert(ebcdicEnc, asciiEnc, ebcdicBytes));

        //Thank you sx2008
        Encoding ebcdicEnc = Encoding.GetEncoding("IBM037");
        string result = ebcdicEnc.GetString(ebcdicBytes); // convert EBCDIC Bytes -> Unicode string
        return result;
    }

    private string ConvertNumericEbcdic(byte[] ebcdicBytes, int decimalPlaces)
    {
        string tempNumStr = this.ConvertAlphaNumEbcdic(ebcdicBytes).Trim();

        if (tempNumStr == null || tempNumStr.Length == 0)
        {
            return "";
        }

        if (Regex.IsMatch(tempNumStr, @"^\d+$")) //Unsigned integer
        {
            string result = this.AdjustDecimalValues(Int64.Parse(tempNumStr), decimalPlaces);
            return result;
        }
        else if (Regex.IsMatch(tempNumStr, @"^\d+[A-R{}]$")) //Signed integer
        {
            string lastChar = tempNumStr.Substring(tempNumStr.Length - 1);

            switch (lastChar)
            {
                case "{":
                    tempNumStr = tempNumStr.Replace("{", "0");
                    break;
                case "A":
                    tempNumStr = tempNumStr.Replace("A", "1");
                    break;
                case "B":
                    tempNumStr = tempNumStr.Replace("B", "2");
                    break;
                case "C":
                    tempNumStr = tempNumStr.Replace("C", "3");
                    break;
                case "D":
                    tempNumStr = tempNumStr.Replace("D", "4");
                    break;
                case "E":
                    tempNumStr = tempNumStr.Replace("E", "5");
                    break;
                case "F":
                    tempNumStr = tempNumStr.Replace("F", "6");
                    break;
                case "G":
                    tempNumStr = tempNumStr.Replace("G", "7");
                    break;
                case "H":
                    tempNumStr = tempNumStr.Replace("H", "8");
                    break;
                case "I":
                    tempNumStr = tempNumStr.Replace("I", "9");
                    break;
                case "}":
                    tempNumStr = "-" + tempNumStr.Replace("}", "0");//Fixed
                    break;
                case "J":
                    tempNumStr = "-" + tempNumStr.Replace("J", "1");
                    break;
                case "K":
                    tempNumStr = "-" + tempNumStr.Replace("K", "2");
                    break;
                case "L":
                    tempNumStr = "-" + tempNumStr.Replace("L", "3");
                    break;
                case "M":
                    tempNumStr = "-" + tempNumStr.Replace("M", "4");
                    break;
                case "N":
                    tempNumStr = "-" + tempNumStr.Replace("N", "5");
                    break;
                case "O":
                    tempNumStr = "-" + tempNumStr.Replace("O", "6");
                    break;
                case "P":
                    tempNumStr = "-" + tempNumStr.Replace("P", "7");
                    break;
                case "Q":
                    tempNumStr = "-" + tempNumStr.Replace("Q", "8");
                    break;
                case "R":
                    tempNumStr = "-" + tempNumStr.Replace("R", "9");
                    break;
            }

            string result = this.AdjustDecimalValues(Int64.Parse(tempNumStr), decimalPlaces);
            return result;
        }
        else
        {
            this.ParsedSuccessfully = false;
            return tempNumStr;
        }
    }

    private string ConvertBinaryEbcdic(byte[] ebcdicBytes, int decimalPlaces)
    {
        if (this.ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        //BitConverter requires low order bytes goes first, followed by the higher order bytes. 
        //Bytes are stored in the file in the opposite order, thus need to reverse bytes
        Array.Reverse(ebcdicBytes);
        long tempNum;

        if (ebcdicBytes.Length == 2)
        {
            //If 2 bytes are provided -- assume it's a short
            tempNum = BitConverter.ToUInt16(ebcdicBytes, 0);
        }
        else if (ebcdicBytes.Length == 4)
        {
            //If 4 bytes are provided -- assume it's an int
            tempNum = BitConverter.ToInt32(ebcdicBytes, 0);
        }
        else
        {
            //Just in case
            throw new Exception(String.Format(
              "Incorrect number of bytes provided for a binary field: {1}", decimalPlaces));
        }

        string result = this.AdjustDecimalValues(tempNum, decimalPlaces);
        return result;
    }

    private string AdjustDecimalValues(long numericValue, int decimalPlaces)
    {
        if (decimalPlaces == 0)
        {
            return numericValue.ToString();
        }
        double result = numericValue / Math.Pow(10, decimalPlaces);
        return result.ToString();
    }

    private string ConvertDateStrEbcdic(byte[] ebcdicBytes)
    {
        string dateStr = this.ConvertAlphaNumEbcdic(ebcdicBytes).Trim();
        string result = this.ConvertDateStr(dateStr);
        return result;
    }

    private string ConvertPackedDateStrEbcdic(byte[] ebcdicBytes)
    {
        string dateStr = this.Unpack(ebcdicBytes, 0);
        string result = this.ConvertDateStr(dateStr);
        return result;
    }

    private string ConvertDateStr(string dateStr)
    {
        dateStr = dateStr.Trim();

        if (dateStr.Trim() == "" || dateStr == "0" ||
              dateStr == "0000000" || dateStr == "9999999")
        {
            return "";
        }
        if (Regex.IsMatch(dateStr, @"^\d{3,5}$"))
        {
            dateStr = dateStr.PadLeft(6, '0');
        }

        Match match = Regex.Match(dateStr, @"^(?<Year>\d{3})(?<Month>\d{2})
            (?<Day>\d{2})$"); //E.g.: 0801232 = 1980-12-31; 1811231 = 2080-12-31

        if (match.Success)
        {
            int year = Int32.Parse(match.Groups["Year"].Value) + 1900; //013 => 1913, 113 => 2013...
            int month = Int32.Parse(match.Groups["Month"].Value);
            int day = Int32.Parse(match.Groups["Day"].Value);

            try
            {
                DateTime tempDate = new DateTime(year, month, day);
                return tempDate.ToString("yyyy-MM-dd");
            }
            catch { }
        }

        if (Regex.IsMatch(dateStr, @"^\d{6}$"))
        {
            DateTime tempDate;
            if (DateTime.TryParseExact(dateStr, "yyMMdd",
                 CultureInfo.InvariantCulture, DateTimeStyles.None, out tempDate))
            {
                return tempDate.ToString("yyyy-MM-dd");
            }
        }

        this.ParsedSuccessfully = false;
        return dateStr;
    }

    private string Unpack(byte[] ebcdicBytes, int decimalPlaces)
    {
        if (ByteArrayIsFullOf_0xFF(ebcdicBytes))
        {
            return "";
        }

        long lo = 0;
        long mid = 0;
        long hi = 0;
        bool isNegative;

        // this nybble stores only the sign, not a digit.  
        // "C" hex is positive, "D" hex is negative, and "F" hex is unsigned. 
        switch (Nibble(ebcdicBytes, 0))
        {
            case 0x0D:
                isNegative = true;
                break;
            case 0x0F:
            case 0x0C:
                isNegative = false;
                break;
            default:
                //throw new Exception("Bad sign nibble");
                this.ParsedSuccessfully = false;
                return this.ConvertAlphaNumEbcdic(ebcdicBytes);
        }
        long intermediate;
        long carry;
        long digit;
        for (int j = ebcdicBytes.Length * 2 - 1; j > 0; j--)
        {
            // multiply by 10
            intermediate = lo * 10;
            lo = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            intermediate = mid * 10 + carry;
            mid = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            intermediate = hi * 10 + carry;
            hi = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            // By limiting input length to 14, we ensure overflow will never occur

            digit = Nibble(ebcdicBytes, j);
            if (digit > 9)
            {
                //throw new Exception("Bad digit");
                this.ParsedSuccessfully = false;
                return this.ConvertAlphaNumEbcdic(ebcdicBytes);
            }
            intermediate = lo + digit;
            lo = intermediate & 0xffffffff;
            carry = intermediate >> 32;
            if (carry > 0)
            {
                intermediate = mid + carry;
                mid = intermediate & 0xffffffff;
                carry = intermediate >> 32;
                if (carry > 0)
                {
                    intermediate = hi + carry;
                    hi = intermediate & 0xffffffff;
                    carry = intermediate >> 32;
                    // carry should never be non-zero. Back up with validation
                }
            }
        }

        decimal result = new Decimal((int)lo, (int)mid, (int)hi, isNegative, (byte)decimalPlaces);
        return result.ToString();
    }

    private int Nibble(byte[] ebcdicBytes, int nibbleNo)
    {
        int b = ebcdicBytes[ebcdicBytes.Length - 1 - nibbleNo / 2];
        return (nibbleNo % 2 == 0) ? (b & 0x0000000F) : (b >> 4);
    }

    private bool ByteArrayIsFullOf_0xFF(byte[] ebcdicBytes)
    {
        if (ebcdicBytes == null || ebcdicBytes.Length == 0)
        {
            return false;
        }
        foreach (byte b in ebcdicBytes)
        {
            if (b != 0xFF)
            {
                return false;
            }
        }
        return true;
    }
}


public class ParsedLine
{
    public LineTemplate Line_Template { get; private set; }
    public Dictionary<string, ParsedField> FieldDictionary
    { get; private set; } //= new Dictionary<string, ParsedField>();
    public string this[string fieldName]
    {
        get
        {
            return this.FieldDictionary[fieldName].Value.Trim();
        }
    }

    //Constructor
    public ParsedLine(LineTemplate lineTemplate, byte[] lineBytes)
    {
        this.Line_Template = lineTemplate;
        this.FieldDictionary = new Dictionary<string, ParsedField>();
        this.ParseLine(lineBytes, lineTemplate);
    }

    private void ParseLine(byte[] lineBytes, LineTemplate lineTemplate)
    {
        this.ValidateInputParameters(lineBytes, lineTemplate);

        foreach (var fieldTemplate in lineTemplate.FieldTemplateDictionary)
        {

            this.FieldDictionary.Add(fieldTemplate.Key,
              new ParsedField(lineBytes, lineTemplate.FieldTemplateDictionary[fieldTemplate.Key]));

        }
    }

    private void ValidateInputParameters(byte[] lineBytes, LineTemplate template)
    {
        if (lineBytes == null)
        {
            throw new ArgumentNullException("Line bytes required");
        }
        if (lineBytes.Length < template.LineSize)
        {
            throw new Exception(String.Format(
              "Bytes provided: {0}, line size: {1}", lineBytes.Length, template.LineSize));
        }
        if (template == null)
        {
            throw new ArgumentNullException("line template is required");
        }
        if (template.FieldsCount == 0)
        {
            throw new Exception("Field templates have not been defined in the line template");
        }
    }

    public string GetParsedFieldValuesCSV(bool addQuotes)
    {
        StringBuilder sb = new StringBuilder();
        int count = 0;

        foreach (ParsedField parsedField in this.FieldDictionary.Values)
        {
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(parsedField.Value);
            sb.Append(addQuotes ? "\"" : "");
            sb.Append(this.FieldDictionary.Count < count ? "," : "");
            count++;
        }
        return sb.ToString();
    }
}

public class EbcdicParser
{
    public ParsedLine[] Lines { get; private set; }


    #region Constructors

    public EbcdicParser()
    {
        //Empty constructor
    }

    public EbcdicParser(byte[] allBytes, LineTemplate lineTemplate)
    {
        double expectedRows = (double)allBytes.Length / lineTemplate.LineSize;
        Console.WriteLine("{0}: Parsing started", DateTime.Now);
        Console.WriteLine("{1}: Line count est {0:#,###.00}", expectedRows, DateTime.Now);

        this.Lines = this.ParseAllLines(lineTemplate, allBytes);

        //Collect garbage
        GC.Collect();
        GC.WaitForPendingFinalizers();
        Console.WriteLine("{1}: {0} line(s) have been parsed", this.Lines.Count(), DateTime.Now);
    }

    public EbcdicParser(string sourceFilePath, LineTemplate lineTemplate)
        : this(File.ReadAllBytes(sourceFilePath), lineTemplate)
    {
        //Constructor with the file path
    }
    #endregion

    public ParsedLine[] ParseAllLines(LineTemplate lineTemplate, byte[] allBytes)
    {
        bool isSingleLine = false;
        this.ValidateInputParameters(lineTemplate, allBytes, isSingleLine);

        List<ParsedLine> parsedLines = new List<ParsedLine>();
        byte[] lineBytes = new byte[lineTemplate.LineSize];
        ParsedLine parsedLine;

        for (int i = 0; i < allBytes.Length; i += lineTemplate.LineSize)
        {
            if (i % 1000 == 0)
            {
                //Print progress
                Console.Write(i + "\r");
            }
            Array.Copy(allBytes, i, lineBytes, 0, lineTemplate.LineSize);
            parsedLine = this.ParseSingleLine(lineTemplate, lineBytes);
            parsedLines.Add(parsedLine);
        }
        return parsedLines.ToArray();
    }
    public ParsedLine[] ParseAllLines(LineTemplate lineTemplate, string sourceFilePath)
    {
        return this.ParseAllLines(lineTemplate, File.ReadAllBytes(sourceFilePath));
    }
    public ParsedLine ParseSingleLine(LineTemplate lineTemplate, byte[] lineBytes)
    {
        bool isSingleLine = true;
        this.ValidateInputParameters(lineTemplate, lineBytes, isSingleLine);
        ParsedLine parsedLine = new ParsedLine(lineTemplate, lineBytes);
        return parsedLine;
    }
    private bool ValidateInputParameters(LineTemplate lineTemplate, byte[] allBytes, bool isSingleLine)
    {
        if (allBytes == null)
        {
            throw new ArgumentNullException("Ebcdic data is not provided");
        }
        if (lineTemplate == null)
        {
            throw new ArgumentNullException("Line template is not provided");
        }
        if (lineTemplate.FieldsCount == 0)
        {
            throw new Exception("Line template must contain at least one field");
        }
        if (allBytes.Length < lineTemplate.LineSize)
        {
            throw new Exception("Data length is shorter than the line size");
        }
        if (isSingleLine && allBytes.Length != lineTemplate.LineSize)
        {
            throw new Exception("Bytes count doesn't equal to line size");
        }
        double expectedRows = (double)allBytes.Length / lineTemplate.LineSize;
        if (expectedRows % 1 != 0) //Expected number of rows is not a whole number
        {
            throw new Exception("Expected number of rows is not a whole number. Check line template.");
        }
        return true;
    }

    public void CreateCsvFile(string outputFilePath, bool includeColumnNames, bool addQuotes)
    {
        if (this.Lines == null || this.Lines.Length == 0)
        {
            throw new Exception("No lines have been parsed");
        }
        ParserUtilities.ConvertLineArrayToCsv(this.Lines, outputFilePath, includeColumnNames, addQuotes);
    }


}

public class rec03
{

    public string COLLECTIONAGENCYID  {get; private set;}
    public string CORPNUMBER { get; private set; }
    public string COUNTRYCODE { get; private set; }
    public string CUSTOMERID { get; private set; }
    public string ORDERNUMBER { get; private set; }
    public string SEQUENCENUMBER { get; private set; }


    public string OLD6DIGITID { get; private set; }
    public string PRODUCTDISCRIPTION { get; private set; }
    public string SHIPMENTDATE { get; private set; }
    public string ORIGITEMAMOUNT { get; private set; }
    public string UNPAIDAMOUNT { get; private set; }
    public string DEBTTYPE { get; private set; }
    public string ITEMDATELASTPAID { get; private set; }
    public string PRODUCTID { get; private set; }
    public string DIVISION { get; private set; }





    public rec03(string COLLECTIONAGENCYID, string CORPNUMBER, string COUNTRYCODE,
        string CUSTOMERID, string ORDERNUMBER, string SEQUENCENUMBER, string OLD6DIGITID, string PRODUCTDISCRIPTION, string SHIPMENTDATE, string ORIGITEMAMOUNT,
        string UNPAIDAMOUNT, string DEBTTYPE, string ITEMDATELASTPAID, string PRODUCTID, string DIVISION)
    {
        this.COLLECTIONAGENCYID = COLLECTIONAGENCYID;
        this.CORPNUMBER = CORPNUMBER;
        this.COUNTRYCODE = COUNTRYCODE;
        this.CUSTOMERID = CUSTOMERID;
        this.ORDERNUMBER = ORDERNUMBER;
        this.SEQUENCENUMBER = SEQUENCENUMBER;
        this.OLD6DIGITID = OLD6DIGITID;
        this.PRODUCTDISCRIPTION = PRODUCTDISCRIPTION;
        this.SHIPMENTDATE = SHIPMENTDATE;
        this.ORIGITEMAMOUNT = ORIGITEMAMOUNT;
        this.UNPAIDAMOUNT = UNPAIDAMOUNT;
        this.DEBTTYPE = DEBTTYPE;
        this.ITEMDATELASTPAID = ITEMDATELASTPAID;
        this.PRODUCTID = PRODUCTID;
        this.DIVISION = DIVISION;
    }

}]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Output0Buffer: ScriptBuffer

{
    public Output0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class Output1Buffer: ScriptBuffer

{
    public Output1Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ExceptionsBuffer: ScriptBuffer

{
    public ExceptionsBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String Data
    {
        set
        {
            this[0] = value;
        }
    }
    public bool Data_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Settings.get_Default():SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Sett" +
    "ings")]

namespace SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{27CBC287-86BD-4253-963F-B8E77E14BE2B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</RootNamespace>
    <AssemblyName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="XElement.cs" />
    <Reference Include="FileHelpers, Version=3.3.0.0, Culture=neutral, PublicKeyToken=3e0c08d59cc3d657, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Software\1.1.0.0\FileHelpers.dll</HintPath>
    </Reference>
    <Reference Include="RGS.ArtivaGeneralPurpose, Version=1.20.0.0, Culture=neutral, PublicKeyToken=972530eacd4bf30a, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Users\nnaem\Documents\CERBERUS-LAPTOP\radius\Software\1.1.0.0\RGS.ArtivaGeneralPurpose.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</msb:DisplayName>
		<msb:ProjectId>{83CA8FC3-D229-42B3-9A46-64EF494297DF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="XElement.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[XElement.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[internal class XElement
{
}]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_62f2e7ab6c6445ccbf027ea6ae1aee6e.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMJz1mAAAAAAAAAAAOAAIiALATAAALIAAAAIAAAAAAAAltEA
AAAgAAAA4AAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAAAgAQAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAETRAABPAAAAAOAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAAABAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAnLEAAAAgAAAAsgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAA4AAAAAYAAAC0AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAAABAAACAAAAugAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAB4
0QAAAAAAAEgAAAACAAUA0FMAALx8AAABAAAAAAAAAIzQAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBEAAAoqEzAFAPMFAAAAAAAAAigSAAAKAgJ7LQAABG+N
AAAGbxMAAApzFAAACn0FAAAEAnsFAAAEbxUAAAoCcxYAAAolcgEAAHByBwAAcG8XAAAKJXIEAQBw
cgoBAHBvFwAACiVyEQIAcHIXAgBwbxcAAAolciADAHByJgMAcG8XAAAKJXI3BABwcj0EAHBvFwAA
CiVyMgUAcHI4BQBwbxcAAAolci8GAHByNQYAcG8XAAAKJXIYBwBwch4HAHBvFwAACiVyEQgAcHIX
CABwbxcAAAolcgIJAHByCAkAcG8XAAAKJXIPCgBwchUKAHBvFwAACiVyMgsAcHI4CwBwbxcAAAol
clEMAHByVwwAcG8XAAAKJXI6DQBwckANAHBvFwAACiVyQQ4AcHJHDgBwbxcAAAolclIPAHByWA8A
cG8XAAAKfQMAAAQCcxYAAAolcgEAAHByaxAAcG8XAAAKJXJ5EABwcn8QAHBvFwAACiVyBAEAcHKJ
EABwbxcAAAolcpMQAHBymRAAcG8XAAAKJXKnEABwcq0QAHBvFwAACiVyvxAAcHLFEABwbxcAAAol
chECAHByzRAAcG8XAAAKJXLfEABwcuUQAHBvFwAACiVyIAMAcHIHEQBwbxcAAAolcjcEAHByFxEA
cG8XAAAKJXIyBQBwciURAHBvFwAACiVyLwYAcHJHEQBwbxcAAAolcmkRAHBybxEAcG8XAAAKJXIY
BwBwcpERAHBvFwAACiVyAgkAcHKzEQBwbxcAAAolcg8KAHBy1xEAcG8XAAAKJXIyCwBwcucRAHBv
FwAACiVyUQwAcHLzEQBwbxcAAAolcgMSAHByCRIAcG8XAAAKJXIbEgBwciESAHBvFwAACiVySRIA
cHJPEgBwbxcAAAolcnsSAHBygRIAcG8XAAAKJXKREgBwcpcSAHBvFwAACiVyrRIAcHKzEgBwbxcA
AAolcscSAHByzRIAcG8XAAAKJXLfEgBwcuUSAHBvFwAACiVy8xIAcHL5EgBwbxcAAAolcgcTAHBy
DRMAcG8XAAAKJXIvEwBwcjUTAHBvFwAACiVyUxMAcHJZEwBwbxcAAAolcnsTAHBygRMAcG8XAAAK
JXKREwBwcpcTAHBvFwAACiVyqRMAcHKvEwBwbxcAAAolcssTAHBy0RMAcG8XAAAKJXI6DQBwcuUT
AHBvFwAACiVyQQ4AcHL7EwBwbxcAAAolclIPAHByIRQAcG8XAAAKJXJLFABwclEUAHBvFwAACiVy
dxQAcHJ9FABwbxcAAAolcqUUAHByqxQAcG8XAAAKJXLbFABwcuEUAHBvFwAACiVyAxUAcHIJFQBw
bxcAAAolchUVAHByGxUAcG8XAAAKJXI3FQBwcj0VAHBvFwAACiVySxUAcHJRFQBwbxcAAAolcnEV
AHBydxUAcG8XAAAKJXKDFQBwcokVAHBvFwAACiVynxUAcHKlFQBwbxcAAAolcrkVAHByvxUAcG8X
AAAKJXLbFQBwcuEVAHBvFwAACiVy7xUAcHL1FQBwbxcAAAolchEWAHByFxYAcG8XAAAKJXInFgBw
ci0WAHBvFwAACiVyVRYAcHJbFgBwbxcAAAolcm8WAHBydRYAcG8XAAAKJXKBFgBwcocWAHBvFwAA
CiVyoRYAcHKnFgBwbxcAAAolcscWAHByzRYAcG8XAAAKJXL/FgBwcgUXAHBvFwAACiVyIxcAcHIp
FwBwbxcAAAolcjcXAHByPRcAcG8XAAAKJXJjFwBwcmkXAHBvFwAACiVykRcAcHKXFwBwbxcAAAol
cqcXAHByrRcAcG8XAAAKJXK/FwBwcsUXAHBvFwAACiVy4xcAcHLpFwBwbxcAAAolcvcXAHBy/RcA
cG8XAAAKJXIrGABwcjEYAHBvFwAACiVyYRgAcHJnGABwbxcAAAolcpcYAHBynRgAcG8XAAAKJXLL
GABwctEYAHBvFwAACiVy7xgAcHL1GABwbxcAAAolchsZAHByIRkAcG8XAAAKJXI9GQBwckMZAHBv
FwAACiVyXRkAcHJjGQBwbxcAAAp9BAAABCoAEzABAF8AAAAAAAAAAigYAAAKAnsFAAAELBYCewUA
AARvGQAACgJ7BQAABG8aAAAKAnsBAAAELRUCey0AAARvjgAABm8TAAAKKBsAAAoCewIAAAQtFQJ7
LQAABG+MAAAGbxMAAAooGwAACioAGzASAM8QAAABAAARAnsuAAAEb5EAAAYCey4AAARvkAAABigc
AAAKIFkBAABygxkAcHMVAAAGCgZylRkAcBYWHwpzIwAABm8WAAAGBnK/GQBwFh8KGHMjAAAGbxYA
AAYGctcZAHAWHwwYcyMAAAZvFgAABgZy8xkAcBYfDhhzIwAABm8WAAAGBnINGgBwFh8QGHMjAAAG
bxYAAAYGciUaAHAWHxIfCXMjAAAGbxYAAAYGcj0aAHAWHxsZcyMAAAZvFgAABgZySxoAcBYfHh8M
cyMAAAZvFgAABgZyZRoAcBcfKhhzIwAABm8WAAAGBnKFGgBwFh8sHHMjAAAGbxYAAAYGcqMaAHAW
HzIfFHMjAAAGbxYAAAYGcssaAHAaH0YecyMAAAZvFgAABgZy5xoAcBcfThsYcyIAAAZvFgAABgZy
CRsAcBcfUxsYcyIAAAZvFgAABgZyJRsAcBYfWBhzIwAABm8WAAAGBnI5GwBwGh9aHnMjAAAGbxYA
AAYGcmEbAHAWH2Ifc3MjAAAGbxYAAAYGcnEbAHAWINUAAAAfDHMjAAAGbxYAAAYGcocbAHAWIOEA
AAAZcyMAAAZvFgAABgZymRsAcBYg5AAAAB91cyMAAAZvFgAABiBZAQAAcqkbAHBzFQAABgsHcpUZ
AHAWFh8KcyMAAAZvFgAABgdyvxkAcBYfChhzIwAABm8WAAAGB3LXGQBwFh8MGHMjAAAGbxYAAAYH
cvMZAHAWHw4YcyMAAAZvFgAABgdyDRoAcBYfEBhzIwAABm8WAAAGB3IlGgBwFh8SHwlzIwAABm8W
AAAGB3I9GgBwFh8bGXMjAAAGbxYAAAYHcksaAHAWHx4fDHMjAAAGbxYAAAYHcmUaAHAXHyoYcyMA
AAZvFgAABgdyuxsAcBYfLB8UcyMAAAZvFgAABgdy4RsAcBYfQB8PcyMAAAZvFgAABgdyCRwAcBYf
TxdzIwAABm8WAAAGB3I5HABwFh9QGnMjAAAGbxYAAAYHclccAHAWH1QfWnMjAAAGbxYAAAYHcnkc
AHAWIK4AAAAfCXMjAAAGbxYAAAYHcpMcAHAWILcAAAAfD3MjAAAGbxYAAAYHcrMcAHAWIMYAAAAX
cyMAAAZvFgAABgdy0xwAcBcgxwAAABsYcyIAAAZvFgAABgdy/RwAcBogzAAAAB5zIwAABm8WAAAG
B3ItHQBwFiDUAAAAF3MjAAAGbxYAAAYHcmEbAHAWINUAAAAghAAAAHMjAAAGbxYAAAYlB3NPAAAG
DAZzTwAABhYNFBMEcx0AAAoTBXMeAAAKEwZzHgAAChMHclUdAHATCG9LAAAGEwkWEwo4NwEAABEJ
EQqaEwsRC3K/GQBwb0YAAAZyBAEAcCgfAAAKOQ8BAAARBRuNOwAAASUWEQtylRkAcG9GAAAGoiUX
EQtyDRoAcG9GAAAGoiUYcgEAAHCiJRkRC3JLGgBwb0YAAAaiJRoRC3JlGgBwb0YAAAaiKCAAAAoR
C3KVGQBwb0YAAAYRC3INGgBwb0YAAAYRC3LzGQBwb0YAAAYRC3IlGgBwb0YAAAYRC3JLGgBwb0YA
AAYRC3JlGgBwb0YAAAYRC3KFGgBwb0YAAAYRC3KjGgBwb0YAAAYRC3LLGgBwb0YAAAYRC3LnGgBw
b0YAAAYRC3IJGwBwb0YAAAYRC3IlGwBwb0YAAAYRC3I5GwBwb0YAAAYRC3JxGwBwb0YAAAYRC3KH
GwBwb0YAAAZzcwAABm8hAAAKEQoXWBMKEQoRCY5pP77+//8Ib0sAAAYTCRYTCjgECgAAEQkRCpoT
DBEMcr8ZAHBvRgAABnIEAQBwKCIAAAosYBEMcr8ZAHBvRgAABnJ5EABwKCIAAAosSBEMcr8ZAHBv
RgAABnJXHQBwKCIAAAosMBEMcr8ZAHBvRgAABnJdHQBwKCIAAAosGBEGEQxySxoAcG9GAAAGbyMA
AAo4fwkAABEMcr8ZAHBvRgAABnJ5EABwKB8AAAo5ZAkAAHMkAAAKEw1zJQAAChMOcyYAAAomcycA
AAoTD3MoAAAKJnMpAAAKExBzKgAAChMRcysAAAoTEhcNEQ8RDHKVGQBwb0YAAAZ9LAAAChEHG407
AAABJRYRDHKVGQBwb0YAAAaiJRcRDHINGgBwb0YAAAaiJRhyAQAAcKIlGREMcksaAHBvRgAABqIl
GhEMcmUaAHBvRgAABqIoIAAACm8jAAAKEQxy8xkAcG9GAAAGcgEAAHAoHwAACiwOEQ5yYx0AcH0t
AAAKKzgCF30BAAAEAnsxAAAEb4MAAAYCezEAAARyaR0AcBEMcksaAHBvRgAABiguAAAKb4EAAAY4
ZQgAAAJ7AwAABBEMcg0aAHBvRgAABm8vAAAKLGMCewMAAAQRDHINGgBwb0YAAAZvMAAACheNPQAA
ASUWHzqdbzEAAAoTBBEQEQxyDRoAcG9GAAAGfTIAAAoRDxEEGpp9MwAAChEQEQQWmn00AAAKEQ8R
BBeafTUAAAoRBBmaEwgREnL4HQBwEQgoHAAACn02AAAKEQ8RDHIlGgBwb0YAAAZ9NwAAChEQEQxy
JRoAcG9GAAAGfTgAAAoRDREMcksaAHBvRgAABhEMcmUaAHBvRgAABhkfMG85AAAKKBwAAAp9OgAA
ChEQEQxySxoAcG9GAAAGfTsAAAoREBEMcmUaAHBvRgAABn08AAAKEQ4RDHK7GwBwb0YAAAZ9PQAA
ChEOEQxy4RsAcG9GAAAGfT4AAAoREREMcgkcAHBvRgAABn0/AAAKAnsEAAAEEQxyORwAcG9GAAAG
by8AAAosHhERAnsEAAAEEQxyORwAcG9GAAAGbzAAAAp9QAAAChEMclccAHBvRgAABheNPQAAASUW
HyydbzEAAAoTExETFpoXjTsAAAElFnJUHgBwohdvQQAACiWOaRdZmhMUERMRE45pF1maExURExaa
FhEMclccAHBvRgAABhEUb0IAAApvQwAAChMWEQ4RFn1EAAAKEQ4RFH1FAAAKEQ4RFX1GAAAKEQ0R
FX1HAAAKEQ4RDHJ5HABwb0YAAAZ9SAAAChEOEQxykxwAcG9GAAAGfUkAAAoUExcRDHKzHABwb0YA
AAYoSgAACi0jc0sAAAolcloeAHARDHKzHABwb0YAAAYoHAAACn1MAAAKExcRDHLTHABwb0YAAAYo
SgAACi0TEQxy0xwAcG9GAAAGKE0AAAorBX5OAAAKExgREBEYc08AAAp9UAAAChENERh9UQAAChEP
ERhzTwAACn1SAAAKEQ0CEQxy/RwAcG9GAAAGKAoAAAZ9UwAAChQTGREMci0dAHBvRgAABihKAAAK
LSNzSwAACiVynB4AcBEMci0dAHBvRgAABigcAAAKfUwAAAoTGRQTGhuNOwAAASUWEQxylRkAcG9G
AAAGoiUXEQxyDRoAcG9GAAAGoiUYcgEAAHCiJRkRDHJLGgBwb0YAAAaiJRoRDHJlGgBwb0YAAAai
KCAAAAoTGxEFERtvVAAACjnFAwAAEQURG29VAAAKb2EAAAYoSgAACi0lc1YAAAolctweAHARBREb
b1UAAApvYQAABigcAAAKfVcAAAoTGhEQEQURG29VAAAKb2MAAAZ9WAAAChIc/hUGAAAbEQURG29V
AAAKb2UAAAYoSgAACiwLEQ17UwAAChMcKxYCEQURG29VAAAKb2UAAAYoCgAABhMcEQ0RHH1ZAAAK
ERARHH1aAAAKEQ0RHH1bAAAKEQ0RHH1cAAAKEQ8RHH1dAAAKEQxy/RwAcG9GAAAGKEoAAAosQxEF
ERtvVQAACm9lAAAGKEoAAAosLgJ7MQAABG+DAAAGAnsxAAAEchwfAHARDHJLGgBwb0YAAAYoLgAA
Cm+BAAAGK1sRDHL9HABwb0YAAAYoSgAACi1IEQURG29VAAAKb2UAAAYoSgAACiwzAhd9AQAABAJ7
MQAABG+DAAAGAnsxAAAEcrkfAHARDHJLGgBwb0YAAAYoLgAACm+BAAAGERARBREbb1UAAApvZwAA
BihKAAAKLRURBREbb1UAAApvZwAABihNAAAKKwV+TgAACnNPAAAKfV4AAAoREBEFERtvVQAACm9p
AAAGKEoAAAotFREFERtvVQAACm9pAAAGKE0AAAorBX5OAAAKc08AAAp9XwAAChEFERtvVQAACm9r
AAAGcgEAAHAoHwAACiwREQ9ySiAAcH1gAAAKOHIBAAARBREbb1UAAApvawAABnJ5EABwKB8AAAo5
VQEAAH5hAAAKEx1yWiAAcBEFERtvVQAACm9dAAAGEQURG29VAAAKb18AAAYZHzBvOQAACigcAAAK
KC4AAAoCewUAAAQUc2IAAAoTHgJ7BQAABG9jAAAKFy4LAnsFAAAEbxUAAAoRHiAsAQAAb2QAAAoR
Hm9lAAAKEx8RH35mAAAKLhcRHywTER9vZwAACnJVHQBwKB8AAAosNwIXfQEAAAQCezEAAARvgwAA
BgJ7MQAABHKFIwBwEQURG29VAAAKb10AAAYoLgAACm+BAAAGK3objTsAAAElFnLRIwBwoiUXKGgA
AAoTIBIgckEkAHAoaQAACqIlGHJTJABwoiUZAnsuAAAEb5AAAAaiJRpyZyQAcKIoIAAAChMdAnNL
AAAKJREfb2cAAAp9agAACiVyJiUAcBEdKBwAAAp9TAAACigBAAArAhd9AgAABN4MER4sBxEeb2sA
AArcERACEQURG29VAAAKb20AAAYoCgAABn1sAAAKERARBREbb1UAAApvbwAABn1tAAAKERARBREb
b1UAAApvcQAABn1uAAAKK2sRDnI2JQBwfW8AAAoCc0sAAAolckAlAHARDHJLGgBwb0YAAAZysCUA
cChwAAAKfUwAAAooAgAAKwIXfQEAAAQCezEAAARvgwAABgJ7MQAABHIMJgBwEQxySxoAcG9GAAAG
KC4AAApvgQAABhENEQ97MwAACn1xAAAKEQ0oaAAACnNyAAAKfXMAAAoRDwJ7LgAABG+QAAAGfXQA
AAoRDyhoAAAKc3IAAAp9dQAAChENcmomAHB9dgAAChEOcnQmAHB9dwAAChENERB7bQAACnJ+JgBw
ERB7WAAACihwAAAKfXgAAAoCEQ0oAwAAKwIRDigEAAArAhEPKAUAACsCERAoBgAAKwIRESgHAAAr
AhESKAgAACsRFywIAhEXKAIAACsRGSwIAhEZKAIAACsRGiwIAhEaKAkAACsRChdYEwoRChEJjmk/
8fX//wktChEFb3kAAAoWMVYRBm96AAAKEyErMhIhKHsAAAoTIgIXfQEAAAQCezEAAARvgwAABgJ7
MQAABHKCJgBwESIoLgAACm+BAAAGEiEofAAACi3F3g4SIf4WBwAAG29rAAAK3AktKxEFb3kAAAot
IgIXfQEAAAQCezEAAARvgwAABgJ7MQAABHJjJwBwb4EAAAYRBW99AAAKEyM4mAAAABIjKH4AAAoT
JBuNOwAAASUWEiQofwAACm9VAAAGoiUXEiQofwAACm9XAAAGoiUYcgEAAHCiJRkSJCh/AAAKb10A
AAaiJRoSJCh/AAAKb18AAAaiKCAAAAoTJREHESVvgAAACi0zAhd9AQAABAJ7MQAABG+DAAAGAnsx
AAAEcmYoAHASJCh/AAAKb10AAAYoLgAACm+BAAAGEiMogQAACjpc////3g4SI/4WCAAAG29rAAAK
3N45EyYWEycCKIIAAAofCnLtKABwESZvgwAACnILKQBwESZvhAAACihwAAAKclUdAHAWEidvhQAA
Ct4AKgBBZAAAAgAAAKMMAAABAQAApA0AAAwAAAAAAAAAAgAAAFYPAAA/AAAAlQ8AAA4AAAAAAAAA
AgAAANoPAACrAAAAhRAAAA4AAAAAAAAAAAAAAAAAAACVEAAAlRAAADkAAAAhAAABEzADABgAAAAC
AAARKIYAAAoKchEpAHAohwAACgYCKIgAAAoqsgIZjTsAAAElFnIfKQBwoiUXciUpAHCiJRhyKSkA
cKIDLQMWKwEXb0EAAAoqvgQoSgAACi0NBHItKQBwKB8AAAosASoFc0sAAAolAwQoHAAACn1MAAAK
b4kAAAoqvgQoSgAACi0NBHItKQBwKB8AAAosASoFc1YAAAolAwQoHAAACn1XAAAKb4oAAAoqAAAA
EzADAFEAAAAAAAAAAyhKAAAKLUcDb4sAAAoeLxQDFhdvQwAACnItKQBwKCIAAAotAwMrC3ItKQBw
AygcAAAKEAEDb4sAAAoeMgMDKwwDGHItKQBwb4wAAAoQAQMqAAAAEzAFADMAAAADAAARcjEpAHBz
jQAACgoCAygJAAAGcj0pAHAGFhIBKI4AAAosBwdzcgAACioSAv4VBgAAGwgqABMwBQCvAAAABAAA
EXOPAAAKJQNvkAAACigKAAArCgYXjT0AAAElFh8snW8xAAAKFpoGclUdAHBvkgAACnJPKQBwclUd
AHBvkgAACnJbKQBwclUdAHBvkgAACnJfKQBwclUdAHBvkgAACnItKQBwclUdAHBvkgAACnJjKQBw
clUdAHBvkgAACnJnKQBwclUdAHBvkgAACiiTAAAKLAEqAnsvAAAEb3cAAAYCey8AAAQGb5QAAApv
dQAABioAEzAFAK8AAAAEAAARc48AAAolA2+QAAAKKAoAACsKBheNPQAAASUWHyydbzEAAAoWmgZy
VR0AcG+SAAAKck8pAHByVR0AcG+SAAAKclspAHByVR0AcG+SAAAKcl8pAHByVR0AcG+SAAAKci0p
AHByVR0AcG+SAAAKcmMpAHByVR0AcG+SAAAKcmcpAHByVR0AcG+SAAAKKJMAAAosASoCezAAAARv
fQAABgJ7MAAABAZvlAAACm97AAAGKh4CKIYAAAYqHgJ7BgAABCoiAgN9BgAABCoeAnsHAAAEKiIC
A30HAAAEKh4CewgAAAQqIgIDfQgAAAQqMgIoDgAABm+VAAAKKr4CKBEAAAoDFjALcmspAHBzlgAA
CnoCc5cAAAooDwAABgIEKBEAAAYCAygTAAAGKvoDbxwAAAYDbx4AAAZYAigSAAAGMRZytykAcANv
GAAABiguAAAKc5gAAAp6AigOAAAGA28YAAAGA2+ZAAAKKgAAGzADAKEAAAAFAAARc5oAAAoKFgsC
KA4AAAZvmwAACm+cAAAKDCtmEgIonQAACg0GAy0HclUdAHArBXL7KQBwb54AAAomBglvGAAABm+e
AAAKJgYDLQdyVR0AcCsFcvspAHBvngAACiYGAigOAAAGb5UAAAoHMgdyVR0AcCsFclspAHBvngAA
CiYHF1gLEgIonwAACi2R3g4SAv4WDgAAG29rAAAK3AZvZwAACioAAAABEAAAAgAZAHOMAA4AAAAA
HgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiICA30TAAAEKh4CexQAAAQqIgIDfRQAAAQqHgJ7FQAA
BCoiAgN9FQAABCoeAnsWAAAEKiICA30WAAAEKvoCKBEAAAoCAwQFDgQOBSgkAAAGAgNvoAAACigZ
AAAGAgQoGwAABgIFKB0AAAYCDgQoHwAABgIOBSghAAAGKjYCAwQFDgQWKCIAAAYqAAATMAMAmQAA
AAAAAAADLA0Db6AAAApviwAACi0Lcv8pAHBzoQAACnoFFi8RcksqAHADKC4AAApzlgAACnoOBBYw
EXLFKgBwAyguAAAKc5YAAAp6BBgzIg4EGC4dDgQaLhhyRSsAcAMOBIxLAAABKKIAAApzmAAACnoO
BRYvEXLaKwBwAyguAAAKc5YAAAp6DgUcMRFyaSwAcAMoLgAACnOWAAAKeipSHwwoowAACgIopAAA
Ch0oowAACioAABswAwDCAAAABgAAEXLuLABwKKUAAAqMHAAAASimAAAKAxYopwAACiwLciYtAHBz
mAAACnoCLAQCji0LcmItAHAoJQAABioAAyioAAAKLAYDKBsAAAoDF3OpAAAKCgQsGAKOLBQGAhaa
b0IAAAYFbxcAAAZvqgAACgILFgwrFQcImg0GCQVvSgAABm+qAAAKCBdYDAgHjmky5d4KBiwGBm9r
AAAK3HKELQBwAyirAAAKKKUAAAqMHAAAASisAAAK3gxvgwAACiglAAAG3gAqAAABHAAAAgBRAD6P
AAoAAAAAAAA7AHq1AAwhAAABEzADADcAAAAHAAARclUdAHAKAgsWDCseBwiRDQYJEwQSBCitAAAK
cn4mAHAocAAACgoIF1gMCAeOaTLcBm+gAAAKKgATMAUATwAAAAgAABECb4sAAAoXWBldLAtyvi0A
cHOYAAAKegIXjT0AAAElFh8tnW8xAAAKCgaOaY1SAAABCxYMKxEHCAYImh8QKK4AAAqcCBdYDAgG
jmky6QcqABMwAwBJAAAACQAAEQJvrwAACgoWCyssBgeTHyAyBwYHkx9+MQcGBx8gnSsTBgeTHyIu
BwYHkx9eMwUGBx8gnQcXWAsHBo5pMs4Gc7AAAAoooAAACioAAAATMAUAeQAAAAoAABEEFjAXcuQt
AHAPAiitAAAKKBwAAApzmAAACnoDFi8XchIuAHAPAiitAAAKKBwAAApzmAAACnoCjmkDLwtyRC4A
cHOYAAAKegKOaQNZBFkWLxUFLAtymC4AcHOYAAAKegKOaQNZEAIEjVIAAAEKAgMGFgQosQAACgYq
AAAAEzAEAAwAAAALAAARFwoCAwQGKCoAAAYqHgJ7FwAABCoiAgN9FwAABCoeAnsYAAAEKiICA30Y
AAAEKh4CexkAAAQqIgIDfRkAAAQqMgIoMAAABiiyAAAKKjICKDAAAAYoJwAABioeAnsaAAAEKiIC
A30aAAAEKo4CKBEAAAoCFyg1AAAGAgQoLQAABgICAwQoNwAABigvAAAGKgAAEzAFAGABAAAMAAAR
AywEA44tE3LoLgBwKCUAAAYCFig1AAAGFCoDjmkEbxwAAAYEbx4AAAZYLx0CFig1AAAGciAvAHAE
bxgAAAYoLgAACnOYAAAKegRvHgAABo1SAAABCgMEbxwAAAYGFgRvHgAABiixAAAKAgYoMQAABgIo
LAAABm8aAAAGLQgCBig4AAAGKgIoLAAABm8aAAAGGTMOAgYEbyAAAAYoOQAABioCKCwAAAZvGgAA
BhczDgIGBG8gAAAGKD8AAAYqAigsAAAGbxoAAAYYMw4CBgRvIAAABig6AAAGKgIoLAAABm8aAAAG
GjMIAgYoPAAABioCKCwAAAZvGgAABhszCAIGKD0AAAYqAigsAAAGbxoAAAYcMwcCKDIAAAYqAigs
AAAGbxoAAAYdMwcCKDMAAAYqAhYoNQAABnKCLwBwBG8YAAAGBG8aAAAGCxIB/hYFAAACb2cAAAoo
ogAACnOYAAAKeoICAyhBAAAGLAZyVR0AcCpyESkAcCiHAAAKA2+zAAAKKgAAABMwBABfBQAADQAA
EQIDKDgAAAZvoAAACgoGLAgGb4sAAAotBnJVHQBwKgZy7C8AcCi0AAAKLA4CBii1AAAKBCg7AAAG
KgZy+C8AcCi0AAAKOQ0FAAAGBm+LAAAKF1lvtgAACgsHKJkAAAYMCCA+AAzKQpoAAAAIIMz2C8Q1
SQggE/ILwTUbCCCA8AvAO30BAAAIIBPyC8E7XQEAADizBAAACCCm8wvCO4wBAAAIIDn1C8M7bAEA
AAggzPYLxDv4AAAAOI0EAAAIIIX7C8c1Gwgg8vkLxjsKAQAACCCF+wvHO+oAAAA4agQAAAggGP0L
yDvWAQAACCCr/gvJO7YBAAAIID4ADMo76gEAADhEBAAACCAdCAzPNUkIIGQDDMw1Gwgg0QEMyzu1
AQAACCBkAwzMOywBAAA4GQQAAAgg9wQMzTsHAQAACCCKBgzOO1ABAAAIIB0IDM87MAEAADjzAwAA
CCCPEQzVNRsIIPwPDNQ7qwEAAAggjxEM1TuLAQAAONADAAAIILUUDNc7pQEAAAggqEgM+DvdAAAA
CCAaUgz+QK8DAAAHchIwAHAoHwAACjqUAQAAOJoDAAAHchYwAHAoHwAACjqVAQAAOIUDAAAHchow
AHAoHwAACjqWAQAAOHADAAAHch4wAHAoHwAACjqXAQAAOFsDAAAHciIwAHAoHwAACjqYAQAAOEYD
AAAHciYwAHAoHwAACjqZAQAAODEDAAAHciowAHAoHwAACjqaAQAAOBwDAAAHci4wAHAoHwAACjqb
AQAAOAcDAAAHcjIwAHAoHwAACjqcAQAAOPICAAAHcjYwAHAoHwAACjqdAQAAON0CAAAHcjowAHAo
HwAACjqeAQAAOMgCAAAHcj4wAHAoHwAACjqpAQAAOLMCAAAHckIwAHAoHwAACjq0AQAAOJ4CAAAH
ckYwAHAoHwAACjq/AQAAOIkCAAAHckowAHAoHwAACjrKAQAAOHQCAAAHcmcpAHAoHwAACjrVAQAA
OF8CAAAHck4wAHAoHwAACjrdAQAAOEoCAAAHclIwAHAoHwAACjrlAQAAODUCAAAHclYwAHAoHwAA
CjrtAQAAOCACAAAHclowAHAoHwAACjr1AQAAOAsCAAAGchIwAHByLSkAcG+SAAAKCjj1AQAABnIW
MABwcl4wAHBvkgAACgo43wEAAAZyGjAAcHJiMABwb5IAAAoKOMkBAAAGch4wAHByZjAAcG+SAAAK
CjizAQAABnIiMABwcmowAHBvkgAACgo4nQEAAAZyJjAAcHJuMABwb5IAAAoKOIcBAAAGciowAHBy
cjAAcG+SAAAKCjhxAQAABnIuMABwcnYwAHBvkgAACgo4WwEAAAZyMjAAcHJ6MABwb5IAAAoKOEUB
AAAGcjYwAHByfjAAcG+SAAAKCjgvAQAAcoIwAHAGcjowAHByLSkAcG+SAAAKKBwAAAoKOA8BAABy
gjAAcAZyPjAAcHJeMABwb5IAAAooHAAACgo47wAAAHKCMABwBnJCMABwcmIwAHBvkgAACigcAAAK
CjjPAAAAcoIwAHAGckYwAHByZjAAcG+SAAAKKBwAAAoKOK8AAABygjAAcAZySjAAcHJqMABwb5IA
AAooHAAACgo4jwAAAHKCMABwBnJnKQBwcm4wAHBvkgAACigcAAAKCitycoIwAHAGck4wAHBycjAA
cG+SAAAKKBwAAAoKK1VygjAAcAZyUjAAcHJ2MABwb5IAAAooHAAACgorOHKCMABwBnJWMABwcnow
AHBvkgAACigcAAAKCisbcoIwAHAGclowAHByfjAAcG+SAAAKKBwAAAoKAgYotQAACgQoOwAABioC
Fig1AAAGBioAEzADAFYAAAAOAAARAgMoQQAABiwGclUdAHAqAyi3AAAKA45pGDMLAxYouAAACm4K
KycDjmkaMwsDFii5AAAKagorFnKGMABwBIxLAAABKC4AAApzmAAACnoCBgQoOwAABioAABMwAwAn
AAAADwAAEQQtCA8BKLoAAAoqA2wjAAAAAAAAJEAEbCi7AAAKWwoSACi8AAAKKgATMAIAFQAAAAQA
ABECAyg4AAAGb6AAAAoKAgYoPgAABioAAAATMAMAEQAAAAQAABECAxYoPwAABgoCBig+AAAGKgAA
ABswBQAiAQAAEAAAEQNvoAAAChABA2+gAAAKclUdAHAoHwAACi0nA3ItKQBwKB8AAAotGgNy/DAA
cCgfAAAKLQ0DcgwxAHAoHwAACiwGclUdAHAqA3IcMQBwKLQAAAosCwMcHzBvOQAAChABA3IwMQBw
KL0AAAoKBm++AAAKLHQGb78AAApypDEAcG/AAAAKb8EAAAoowgAACiBsBwAAWAsGb78AAApyrjEA
cG/AAAAKb8EAAAoowgAACgwGb78AAApyujEAcG/AAAAKb8EAAAoowgAACg0SBAcICSjDAAAKEgRy
wjEAcChpAAAKEwXeOybeAANy2DEAcCi0AAAKLCIDcugxAHAoxAAAChYSBiiOAAAKLA0SBnLCMQBw
KGkAAAoqAhYoNQAABgMqEQUqAAABEAAAAADKABrkAAMNAAABEzAGABQBAAARAAARAgMoQQAABiwG
clUdAHAqFmoKFmoLFmoMAgMWKEAAAAYTBxEHHwxZRQQAAAAGAAAAAgAAAAoAAAAGAAAAKwgXDSsT
Fg0rDwIWKDUAAAYCAyg4AAAGKgOOaRhaF1kTCDiRAAAABh8KalolFW5fCh8gYxMEBx8KaloRBFgl
FW5fCx8gYxMECB8KaloRBFglFW5fDB8gYxMEAgMRCChAAAAGahMFEQUfCWoxDwIWKDUAAAYCAyg4
AAAGKgYRBVglFW5fCh8gYxMEEQQWajEiBxEEWCUVbl8LHyBjEwQRBBZqMQ4IEQRYJRVuXwwfIGMT
BBEIF1kTCBEIFj1n////EgYGaQdpCGkJBNIoxQAAChIGKMYAAAoqEzAEABoAAAASAAARAwOOaRdZ
BBhbWZEKBBhdLAQGGmMqBh8PXyoAABMwAgAnAAAAEwAAEQMsBAOOLQIWKgMKFgsrEAYHkSD/AAAA
LgIWKgcXWAsHBo5pMuoXKh4CexsAAAQqIgIDfRsAAAQqHgJ7HAAABCoiAgN9HAAABCpeAihEAAAG
A2/HAAAKby4AAAZvoAAACiqGAigRAAAKAgMoQwAABgJzyAAACihFAAAGAgQDKEgAAAYqABswBQBi
AAAAFAAAEQIDBChJAAAGBG8OAAAGb8kAAAoKKzISACjKAAAKCwIoRAAABhIBKMsAAAoDBG8OAAAG
EgEoywAACm/MAAAKczYAAAZvzQAAChIAKM4AAAotxd4OEgD+FhAAABtvawAACtwqAAABEAAAAgAU
AD9TAA4AAAAAEzADAF4AAAAAAAAAAy0LcvYxAHBzoQAACnoDjmkEbxIAAAYvI3IeMgBwA45pjEsA
AAEEbxIAAAaMSwAAASiiAAAKc5gAAAp6BC0LcmYyAHBzoQAACnoEbxQAAAYtC3KaMgBwc5gAAAp6
KgAAGzADAKEAAAAVAAARc5oAAAoKFgsCKEQAAAZvzwAACm/QAAAKDCtmEgIo0QAACg0GAy0HclUd
AHArBXL7KQBwb54AAAomBglvLgAABm+eAAAKJgYDLQdyVR0AcCsFcvspAHBvngAACiYGAihEAAAG
b9IAAAoHMgdyVR0AcCsFclspAHBvngAACiYHF1gLEgIo0wAACi2R3g4SAv4WEwAAG29rAAAK3AZv
ZwAACioAAAABEAAAAgAZAHOMAA4AAAAAHgJ7HQAABCoiAgN9HQAABCoAAAATMAQAfgAAAA8AABEC
KBEAAAoDjmlsBG8SAAAGbFsKchAzAHAopQAACowcAAABKKYAAApyOjMAcAaMWAAAASilAAAKjBwA
AAEorAAACgICBAMoUAAABihMAAAGKNQAAAoo1QAACnJ8MwBwAihLAAAGKAsAACuMSwAAASilAAAK
jBwAAAEorAAACio6AgMo1wAACgQoTgAABioAAAATMAUAfAAAABYAABEWCgIDBAYoUwAABiZz2AAA
CgsDbxIAAAaNUgAAAQwWEwQrSxEEIOgDAABdLRYSBCitAAAKciUpAHAoHAAACijZAAAKBBEECBYD
bxIAAAYosQAACgIDCChSAAAGDQcJb9oAAAoRBANvEgAABlgTBBEEBI5pMq4Hb9sAAAoqOgIDBCjX
AAAKKFAAAAYqABMwBAAUAAAACwAAERcKAgMEBihTAAAGJgMEc0cAAAYqEzACAIwAAAAAAAAABC0L
csAzAHBzoQAACnoDLQty+DMAcHOhAAAKegNvFAAABi0LcjQ0AHBzmAAACnoEjmkDbxIAAAYvC3KQ
NABwc5gAAAp6BSwWBI5pA28SAAAGLgty5DQAcHOYAAAKegSOaWwDbxIAAAZsWyMAAAAAAADwP10j
AAAAAAAAAAAuC3IyNQBwc5gAAAp6FyquAihLAAAGLAkCKEsAAAaOLQtyuzUAcHOYAAAKegIoSwAA
BgMEBSgmAAAGKh4Cex4AAAQqIgIDfR4AAAQqHgJ7HwAABCoiAgN9HwAABCoeAnsgAAAEKiICA30g
AAAEKh4CeyEAAAQqIgIDfSEAAAQqHgJ7IgAABCoiAgN9IgAABCoeAnsjAAAEKiICA30jAAAEKh4C
eyQAAAQqIgIDfSQAAAQqHgJ7JQAABCoiAgN9JQAABCoeAnsmAAAEKiICA30mAAAEKh4CeycAAAQq
IgIDfScAAAQqHgJ7KAAABCoiAgN9KAAABCoeAnspAAAEKiICA30pAAAEKh4CeyoAAAQqIgIDfSoA
AAQqHgJ7KwAABCoiAgN9KwAABCoeAnssAAAEKiICA30sAAAEKgATMAIAfAAAAAAAAAACKBEAAAoC
AyhWAAAGAgQoWAAABgIFKFoAAAYCDgQoXAAABgIOBSheAAAGAg4GKGAAAAYCDgcoYgAABgIOCChk
AAAGAg4JKGYAAAYCDgooaAAABgIOCyhqAAAGAg4MKGwAAAYCDg0obgAABgIODihwAAAGAg4PKHIA
AAYqKgIDBAUo3AAACiomAhYDKN0AAAoqWgMsCAIWKN4AAAoqcu81AHBz3wAACnoeAijgAAAKKh4C
KOEAAAoqHgIo4gAACip+AijjAAAKAgJziwAABn0tAAAEAgJzjwAABn0uAAAEKgYqAAATMAIATwAA
AAAAAAACey8AAAQsEgJ7LwAABG94AAAGAhR9LwAABAJ7MAAABCwSAnswAAAEb34AAAYCFH0wAAAE
AnsxAAAELBICezEAAARvhAAABgIUfTEAAAQqABMwBQCjAAAAEgAAERYKOIIAAAAEBpQOBHKMNgBw
KOQAAAozGQIFBpoCBAaUKOUAAAoOBHN0AAAGfS8AAAQEBpQOBHKeNgBwKOQAAAozGQIFBpoCBAaU
KOUAAAoOBHN6AAAGfTAAAAQEBpQOBHKwNgBwKOQAAAozGQIFBpoCBAaUKOUAAAoOBHOAAAAGfTEA
AAQGF1gKBgM/d////wJvigAABgJvhwAABgIoiAAABio6AigRAAAKAgN9MgAABCqCAnsyAAAEb4IA
AApv5gAACnLGNgBwb+cAAApv6AAACiqCAnsyAAAEb4IAAApv5gAACnLgNgBwb+cAAApv6AAACiqC
AnsyAAAEb4IAAApv5gAACnLuNgBwb+cAAApv6AAACio6AigRAAAKAgN9MwAABCqWAnszAAAEb+kA
AApyFjcAcG/qAAAKKOsAAApv7AAACnQ7AAABKpYCezMAAARv6QAACnIuNwBwb+oAAAoo6wAACm/s
AAAKdDsAAAEqrn40AAAELR5yWDcAcNASAAACKO0AAApv7gAACnPvAAAKgDQAAAR+NAAABCoafjUA
AAQqHgKANQAABCoafjYAAAQqHgIo8AAACiouc5cAAAaANgAABCoAABMwAgAsAAAAFwAAEQIsJyDF
nRyBChYLKxQCB2/xAAAKBmEgkwEAAVoKBxdYCwcCb4sAAAoy4wYqQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAAXB4AACN+AADIHgAALB4AACNTdHJpbmdzAAAAAPQ8AADMNwAAI1VT
AMB0AAAQAAAAI0dVSUQAAADQdAAA7AcAACNCbG9iAAAAAAAAAAIAAAFXHaIJCR0AAAD6ATMAFgAA
AQAAAGcAAAAUAAAANgAAAJkAAACdAAAA8QAAAAkAAABsAAAAFwAAAA0AAAAwAAAATwAAABQAAAAB
AAAACgAAAAEAAAACAAAACwAAAAIAAAAAAFkSAQAAAAAABgDwD6EXBgCEEKEXBgAlDzYXDwAVGAAA
BgBSDywTBgC8DywTBgCdDywTBgBrECwTBgAQECwTBgApECwTBgBpDywTBgCED0QRBgC7GrISCgBE
EHcMBgBSAdMFDgCcExEFBgAbAdMFEgDYAEkXEgDuAEkXEgABAEkXEgCzAUkXEgAiAUkXEgBWA0kX
EgBfAUkXBgAqErISEgCKAUkXBgACAbISBgAZDLISDgDrCREFRwDiFgAAPwDiFgAABgBDAdMFBgA3
FLISBgA7ER8cBgANAdMFBgB+FAcTEgAvDUkXBgDtDqEXBgCdFR8cPwA+EwAAowDiFgAABgDMErIS
BgCRFuYDFgC7Eb4ZBgDZDywTCgDnFXcMGgDHFXcMCgCPFHcMCgA7G3cMHgB/ACYWBgAIDzYXBgD4
FcEXFgC2DkMSFgA5D0MSFgBIDfISDgCPE2IUFgBBG0MSBgA3C+YDBgChEbISEgDBAEkXBgAFFbIS
BgDpGbISBgCoG7ISDgAcExEFDgDLDs0EDgDhCWIUBgCBErISBgDgCrISIgAaAE4WBgCNFbISBgCA
GAcTJgBqDC0aBgD1E7ISBgARFLISBgA9AbISBgA8C7ISBgC9FrISFgAdErISFgD+CbISBgCEFuYD
BgDxEeYDBgC7ELISBgAJHbISBgCcFrISFgDdHL4ZBgCEAbISBgDTEbISBgDzCrISFgDzFL4ZFgBu
E74ZFgAnDb4ZBgAAArISKgDVCvkUBgAnFLISIgBDAE4WIgBmAE4WHgCYACYWHgAzACYWxwBMHAAA
HgCpACYWBgDZDLISBgD6CrISBgA7HSwTAAAAAM0BAAAAAAEAAQAAABAAFBsAADUAAQABAAEAEADi
EgAAPAABAAIAAQAQAIAOAAA1AAYADgABAQAAqgwAAKkACQAYAAEAEABkDgAANQASABgAgQEQACQY
AAA1ABcAJQABABAARgYAADUAFwAsAAEAEAAiDAAANQAbAEIAAQAQAHcWAAA1AB0ASwABABAAfgEA
ADUAHgBVAAEAEACrFQAAuQAtAHQAAQAQALkVAAC5AC0AegABABAA1hUAALkALQCAAAEAEAAdGwAA
xQAtAIYAAQAQAN0ZAAA1ADIAiwABABAAbxgAADUAMwCPAAAAEADIFzQYNQA0AJIAAAEQAKwZNBjd
ADYAlgAAAQAA1gEAADUANwCZAAEALgbiBAEA8xriBAEA7hTlBAEAeRjlBAEA7RLtBAEAuAnxBAEA
PAjHAAEA5Qj6BAYGxQT6BFaAwxL9BFaAGwb9BFaAdx39BFaAywX9BFaAAg79BFaAnQ39BFaAtRz9
BFaAIgX9BAEAIQjHAAEAXgj9BAEA/wj6BAEAygj6BAEAHgn6BAEAdAgBBQEAswjHAAEAVAkFBQEA
cwniBAEAlAgJBQEAlwkNBQEAPQkWBQEA0wbHAAEAqgfHAAEA9wbHAAEAfwbHAAEAxgfHAAEAigfH
AAEAtgbHAAEAZgfHAAEALgfHAAEAAQjHAAEA4wfHAAEAFAfHAAEAXQbHAAEAmwbHAAEATAfHAAYA
3RkbBQYAbxgfBQYAqxUjBQYAuRUnBQYA1hUrBQEAKxsvBQEAKxsvBREA0RI0BREAAg05BREAfwo+
BVAgAAAAAIYY7RYGAAEAWCAAAAAAxgCiEAYAAQBYJgAAAADGAK0QBgABAMQmAAAAAMYAixoGAAEA
BDgAAAAAlgAIEkIFAQAoOAAAAACWAMQYSQUCAFU4AAAAAIEAdwFUBQQAhTgAAAAAgQCjAWAFBwC4
OAAAAACBAAcOSgEKABg5AAAAAIEAzw1sBQsAWDkAAAAAgQClHHYFDAAUOgAAAACBAIEDdgUNAM86
AAAAAIYY7RYGAA4A1zoAAAAAhgimHX0FDgDfOgAAAACGCMIdhwUOAOg6AAAAAIYIpwscAA8A8DoA
AAAAhgi8CxAADwD5OgAAAACGCA0RfgEQAAE7AAAAAIYIGhEBABAACjsAAAAAhghhG34BEQAXOwAA
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
7RYGAJ0AilMAAAAAkRjzFu8DnQCYUwAAAACTAMERxwadAAAAAQD4BAAAAQAYFxAQAgDNGAAAAQA9
EgAAAgADBQAAAwAcFwAAAQA9EgAAAgADBQAAAwAkFwAAAQAYFwAAAQALCgAAAQAGCgAAAQAGCgAA
AQDhEAAAAQDhEAAAAQDhEAAAAQAnEQAAAgDRCwAAAQByDgAAAQDkGAAAAQDhEAAAAQDhEAAAAQDh
EAAAAQDhEAAAAQDhEAAAAQBgCwAAAgC0DAAAAwDnEwAABAADEQAABQCTFwAAAQBgCwAAAgC0DAAA
AwDnEwAABAADEQAAAQBgCwAAAgC0DAAAAwDnEwAABAADEQAABQCTFwAAAQCyEQAAAQDeGAAAAgDn
EQAAAwCPGAAABADkGAAAAQBiGQAAAQARFwAAAQB3HAAAAQD6GAAAAgDnEwAAAwABEgAABACwGwAA
AQD6GAAAAgDnEwAAAwABEgAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQAGGQAAAgByDgAAAQAG
GQAAAgCaDgAAAQDuGAAAAQDuGAAAAgCTFwAAAQDuGAAAAgCTFwAAAQDUEAAAAgCTFwAAAQDuGAAA
AQDuGAAAAQAJFwAAAQDuGAAAAgCTFwAAAQDuGAAAAgB1FAAAAQDuGAAAAQDhEAAAAQDhEAAAAQBg
CwAAAQCNDgAAAgAGGQAAAQAGGQAAAgCNDgAAAQAGGQAAAgCaDgAAAQDkGAAAAQDhEAAAAQBBGQAA
AgCNDgAAAQDYEQAAAgCNDgAAAQCNDgAAAgBBGQAAAQCNDgAAAgDYEQAAAQCNDgAAAgAGGQAAAQCN
DgAAAgBBGQAAAwA9DAAAAQDnEQAAAgCPGAAAAwDkGAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAA
AQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDhEAAAAQDh
EAAAAQDhEAAAAQCiAgAAAgApBAAAAwAOAwAABABAAgAABQBIBAAABgAHBAAABwB7AgAACADTAwAA
CQBJAwAACgCNBAAACwBpBAAADAArAwAADQAcAgAADgBdAgAADwCvAwAAAQDtFQAAAgCHGQAAAwCd
FAAAAQDhEAAAAQDhEAAAAQDtFQAAAgCHGQAAAwCdFAAAAQDhEAAAAQDhEAAAAQDtFQAAAgCHGQAA
AwCdFAAAAQDhEAAAAQDhEAAAAQCDGgAAAgAsFwAAAwAlGgAABACdFAAAAQBBGwAAAQBBGwAAAQDh
EAAAAQCdGgkA7RYBABEA7RYGABkA7RYKACkA7RYQADEA7RYQADkA7RYQAEEA7RYQAEkA7RYQAFEA
7RYQAFkA7RYQAGEA7RYQAHEA7RYGADEB7RYGAGkB7RYQAJkB7RYGALEB7RYVAGkA7RYGAIkBohAG
AJEBgBEcAIEA7RYQAMEB3RIGAAwA7RYGAAwA+AUnAIkBrRAGAMEBYA0GAMkBfw0GANEB2w4vANkB
nxqaABQA7RYGABwA7RYGANkBBB6uANkBnxq0ABQA+AUnANkBEB6uABwA+AW6AJEA7RYGAJkA7RYG
ACQA7RYGAKEA7RYGAOEB7RYGAKkA7RYGALEA7RYGALkA7RYGAKEAwALHAJkA9x3HANkBphrKAAwA
Kx3QAAwAoBLWANkB4RrdAKkATBXHAKEAjwrHAKkA3gvHAKEAagvHALkA6A7HAKEAZxXHAKkAtQLH
ANkB2RrkAJEAGBXHAKkAWxXHAKkAQRXHAJkA6wvHAJkA9AvHALEAfwvHALEA4xzHANkB4RrqANkB
MBH0ANkBqBH5AJkAXgzHAJkA/x3HAJkA1Q7HAJEAow7HAJkApArHAJkALhXHANkBHh7/AMEA7RYG
AMEAKxzHAPkBKBIEAckAihQKASwA7Ra6AKkAcgoVAZEAWwoKAaEA+BoVAZEA5Q0dARQAKx3QABQA
oBLWANEA7RYGANEAKxzHAKkAURTHAJEA9w0dAakAIgYdAZEAlQ0dAZEAsw0dAaEAvw0dAakAMhIV
AakAcRsVAaEAvgzHANkBJh7HAOkA7RYsAcEBrA42AREC9xsBABECChU8ARkC2xBAAWkAlREcAOEA
8RxFAeEAlRFKAcEA7gXHACECfw0GAKkA1w0dAakA2wLHAKkAvhLHAJkArwrHANkBnxpUAZEA5QLH
ADQA7Ra6AJEAqA0dAaEAigvHAKEA/AUdAZEAzQzHAJkAFx3HAJEAQRTHABQAVxt+ARwA3xaCATwA
SxuRATwAFhyWARQA3xaaAUQASxutAUwAwBDCARwAtRnQAEQAFhyWAYkB4gTHAQkBugocAAkBTAoc
ACkCyhbNAREBlAPeAREBOBHkAREBqBvrASQA+AW6AFQA+AW6ANkB9hF+AdkBoRv/ASEB7RYQAOEA
rRoTAlwA7RYGAFwA+AW6AEECXhEtAtkBMQo+AtkBOQr/ANkBHhYcAGQAVxt+AUkC7RYQAGQA7RYG
AAkB7RYQAGQA+AUnADkB7RYGAGQAaBldAmwA3xZyAnQASxvCATkB9wmHAnQAFhyWAdkBuRIcAFEC
7RYQANkBphqOAmECqRaVAmECVAwvAOEAkhxFAWECVAyoAnECahGuAtEBdhr/AIEC7Ra2AlkBVAwQ
AIkCmwu8AmECVAzBAlkClREcAPkBuRDZAtkBAx3lAtkB7RbqApkCch31AqEClREGAxEBnhETA6kC
uRGuALEChw0fA9kBqBEkA5kCjQ0tA6ECqgE0A6ECOwE7A7EClREcALkCmhxGA8EClREcAKkCuxFa
A8kCahqWAWEB/BliA9ECoBJoA9kCwBAcAFkChw1vA+EA7RZ0AyEBEg17A8kA7RaOA8kAlREcAHwA
oBLWAHwA7RYGAGQA3xaaAYQASxutAYwADx2RAWQAoBLWAHwA+AUnAIQAFhyWAXwAaBldApQA3xZy
ApwASxvCAXwAVxt+AZwAFhyWAeECwhrvA+ECURrvA+kCaxvzA9EBNBkEBKQA7RYGAGEC4g4vAKQA
+AW6AKQA+xwgBHEB7RYmBHEBqRIyBHEBmBIBAPEC7RYQAHEBnhwGAHEByhoGAHEBzRqWAYkB7RYG
AIkB7gI4BIkBmxlABCkCThNGBPkC/gtMBAEDCBZTBIkBYxhZBAkDoBJfBIkBZxxmBBEDOBxsBCkD
DAtzBCkDNx18BKEB7RaCBLkB7RYGANkBBxqPBAIADQDgBAgAKAC4BAgALAC9BAgAMADCBAgANADH
BAgAOADMBAgAPADRBAgAQADWBAgARADbBC4ACwAiBy4AEwArBy4AGwBKBy4AIwBTBy4AKwB8By4A
MwB8By4AOwB8By4AQwBTBy4ASwCCBy4AUwB8By4AWwCZB2MAYwC9BMEAawC9BOEAawC9BAEBawC9
BCMBcwDhB8ABawC9BOABawC9BAACawC9BCACawC9BEACawC9BEECawC9BEMCewC9BGACawC9BGEC
awC9BIECawC9BIMCawC9BKECawC9BMECawC9BOECawC9BAADawC9BAEDawC9BCADawC9BCEDawC9
BEADawC9BEEDawC9BGADawC9BGEDawC9BIADawC9BIEDawC9BKADawC9BKEDawC9BMADawC9BMED
awC9BOADawC9BOEDawC9BAAEawC9BAEEawC9BCAEawC9BCEEawC9BEEEawC9BGEEawC9BIEEawC9
BKEEawC9BMEEawC9BOEEawC9BAEFawC9BCEFawC9BEEFawC9BGEFawC9BIAFawC9BIEFawC9BKAF
awC9BMAFawC9BMkFgwBKB+AFawC9BOkFgwBKBwAGawC9BCAGawC9BIAGawC9BKAGawC9BMEGawC9
BEAIawC9BGAIawC9BIAIawC9BKAIawC9BGAJawC9BIAJawC9BKAKawC9BMAKawC9BOAKawC9BAAL
awC9BCALawC9BEALawC9BGALawC9BIALawC9BKALawC9BMALawC9BOALawC9BAAMawC9BCAMawC9
BEAMawC9BGAMawC9BIAMawC9BKAMawC9BMAMawC9BOAMawC9BAANawC9BCANawC9BEANawC9BGAN
awC9BIANawC9BKANawC9BMANawC9BOANawC9BAAOawC9BCAOawC9BEAOawC9BDQA2AEFAiICTAKc
AsgC0QLfAvACAgMMAxkDKQNCA0wDgQOXA5sDqQPMAwoEigQEAAEABgAFAAgACgAJABAACgATAAsA
FAAMACMADQAlAA4AJwAQACkAEQAsABIALgATADAAAADGHcwGAADAC9YGAAAeEdoGAABlG9oGAABW
C9YGAADZDN4GAADZE9oGAAD5ENoGAACFF9oGAAAuDuMGAADbENYGAAAmGegGAADKHNYGAAA3BdYG
AABfHe0GAABTDvEGAACWHfYGAACtEgAHAADYGAUHAACiAtYGAAApBNYGAAAOA9YGAABAAtYGAABI
BNYGAAAHBNYGAAB7AtYGAADTA9YGAABJA9YGAACNBNYGAABpBNYGAAArA9YGAAAcAtYGAABdAtYG
AACvA9YGAAD+BNYGAACMEu0GAAD+BNYGAACMEu0GAAD+BNYGAACMEu0GAACCEwsHAAD5AQsHAACv
EwsHAAAiC9YGAADiHdYGAAD4FREHAAAfDRcHAADrGh0HAgAOAAMAAQAPAAMAAgAQAAUAAQARAAUA
AgASAAcAAQATAAcAAgAUAAkAAgAYAAsAAQAZAAsAAgAaAA0AAQAbAA0AAgAcAA8AAQAdAA8AAgAe
ABEAAQAfABEAAgAgABMAAQAhABMAAgAsABUAAQAtABUAAgAuABcAAQAvABcAAgAwABkAAQAxABkA
AgAyABsAAgAzAB0AAgA0AB8AAQA1AB8AAgBCACEAAQBDACEAAgBEACMAAQBFACMAAgBGACUAAgBL
ACcAAQBMACcAAgBVACkAAQBWACkAAgBXACsAAQBYACsAAgBZAC0AAQBaAC0AAgBbAC8AAQBcAC8A
AgBdADEAAQBeADEAAgBfADMAAQBgADMAAgBhADUAAQBiADUAAgBjADcAAQBkADcAAgBlADkAAQBm
ADkAAgBnADsAAQBoADsAAgBpAD0AAQBqAD0AAgBrAD8AAQBsAD8AAgBtAEEAAQBuAEEAAgBvAEMA
AQBwAEMAAgBxAEUAAQByAEUAAQB1AEcAAQB2AEkAAQB7AEsAAQB8AE0AAQCBAE8AAQCCAFEAAgCM
AFMAAgCNAFUAAgCOAFcAAgCQAFkAAgCRAFsAAgCTAF0AAgCUAF8AAQCVAF8AAgCWAGEAIACgAKgA
wAAOASUBiwGlAbkB+AEmAkQCaQJ+AqEDuwPDA90D5gMZBASAAAABAAAAph6BjwAAAAAAAA0KAAAE
AAAAAAAAAAAAAACUBAgFAAAAAAsAAAAAAAAAAAAAAJ0EhBsAAAAABAAAAAAAAAAAAAAAlATNBAAA
AAABAAEAAAAAAAAAAACmBGYNAAAAAAQAAAAAAAAAAAAAAJQEshIAAAAACwAAAAAAAAAAAAAAnQTW
GwAAAAALAAAAAAAAAAAAAACdBKcUAAAAAAsAAAAAAAAAAAAAAJ0EyhQAAAAAAwACAAcAAAAAAAAA
rwQtGgAAAAAEAAAAAAAAAAAAAACUBN4MAAAAAAAAAAABAAAA0hcAAAAAAAAXAJoEAAAAABkAmgQY
AE8BFgBPARYAWwEWAGABFgBlARYAagEWAG8BFgB0ARYAeQEjATkCrQH/AwEAlQACAJUAAAAAUGxh
Y2VtZW50SW5mb3JtYXRpb25fMTAwAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFi
bGUxMDAASURUU1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbjEwMABJRFRTUnVudGltZUNvbm5l
Y3Rpb24xMDAASURUU0Nvbm5lY3Rpb25NYW5hZ2VyMTAwAElEVFNWYXJpYWJsZXMxMDAASURUU0V2
YWx1YXRvckNvbnRleHQxMDAAU2VnbWVudGF0aW9uU2NvcmVzXzExMABBY2NvdW50SW5mb3JtYXRp
b25fMTAAUGFydHlJbmZvcm1hdGlvbl8yMABOdWxsYWJsZWAxAElFbnVtZXJhYmxlYDEATGlzdGAx
AFJlc3BvbnNpYmxlUGFydHlJbmZvXzExMgBUb0ludDMyAEtleVZhbHVlUGFpcmAyAERpY3Rpb25h
cnlgMgBBY2NvdW50RnJlZUZvcm1UZXh0XzIwMwBhZGQyMDMAcmVjMDMASW50NjQAQ29uc3VtZXJG
cmVlRm9ybVRleHRfMjA1AGFkZDIwNQBUb1VJbnQxNgBSZXRhaWxDbHViSW5mb3JtYXRpb25fODA4
ADxNb2R1bGU+ADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPgBnZXRfQVJUSVZBAEdDAGdl
dF9JVEVNREFURUxBU1RQQUlEAHNldF9JVEVNREFURUxBU1RQQUlEAGdldF9DVVNUT01FUklEAHNl
dF9DVVNUT01FUklEAGdldF9QUk9EVUNUSUQAc2V0X1BST0RVQ1RJRABnZXRfT0xENkRJR0lUSUQA
c2V0X09MRDZESUdJVElEAGdldF9DT0xMRUNUSU9OQUdFTkNZSUQAc2V0X0NPTExFQ1RJT05BR0VO
Q1lJRABDdXN0b21lcklEAENyZWRpdG9ySW50ZXJuYWxDcmVkaXRvcklEAFByb2R1Y3RJRABDbGll
bnRJRABHZXRPdXRwdXRJRABnZXRfQ09VTlRSWUNPREUAc2V0X0NPVU5UUllDT0RFAGdldF9ERUJU
VFlQRQBzZXRfREVCVFRZUEUAZ2V0X1NISVBNRU5UREFURQBzZXRfU0hJUE1FTlREQVRFAEltcG9y
dGFudE5vdGVfSU5PVEUAQnl0ZUFycmF5SXNGdWxsT2ZfMHhGRgBBZGRQbGFjZW1lbnRSb3dOU0YA
Z2V0X0FTQ0lJAGdldF9ESVZJU0lPTgBzZXRfRElWSVNJT04AZ2V0X1BST0RVQ1RESVNDUklQVElP
TgBzZXRfUFJPRFVDVERJU0NSSVBUSU9OAFN5c3RlbS5JTwBnZXRfU0VRVUVOQ0VOVU1CRVIAc2V0
X1NFUVVFTkNFTlVNQkVSAGdldF9DT1JQTlVNQkVSAHNldF9DT1JQTlVNQkVSAGdldF9PUkRFUk5V
TUJFUgBzZXRfT1JERVJOVU1CRVIAZ2V0X1VOUEFJREFNT1VOVABzZXRfVU5QQUlEQU1PVU5UAGdl
dF9PUklHSVRFTUFNT1VOVABzZXRfT1JJR0lURU1BTU9VTlQAR2V0RmllbGROYW1lc0NTVgBHZXRQ
YXJzZWRGaWVsZFZhbHVlc0NTVgB2YWx1ZV9fAFN5c3RlbS5EYXRhAHNldF9EYXRhAGdldF9Db21w
b25lbnRNZXRhRGF0YQBlYmNkaWNEYXRhAGRhdGEAbXNjb3JsaWIAU3lzdGVtLkRhdGEuT2RiYwBT
b3VyY2VCeXRlc0luRGVjAGdldF9PcmlnaW5hbEJ5dGVzSW5EZWMAQ29udmVydEJ5dGVzVG9EZWMA
Q29udmVydE51bWVyaWNFYmNkaWMAQ29udmVydEFscGhhTnVtRWJjZGljAENvbnZlcnRQYWNrZWRE
YXRlU3RyRWJjZGljAENvbnZlcnREYXRlU3RyRWJjZGljAENvbnZlcnRCaW5hcnlFYmNkaWMATnVt
ZXJpYwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBBY2NvdW50SWQAQWRkAERhdGVMb2FkZWQA
TWFya091dHB1dHNGaW5pc2hlZABQYWNrZWQARGF0ZVNoaXBwZWQAX2V4Y2VwdGlvblJlcG9ydENy
ZWF0ZWQAUGFyc2VkRmllbGQAUGFyc2VGaWVsZAA8SVRFTURBVEVMQVNUUEFJRD5rX19CYWNraW5n
RmllbGQAPENVU1RPTUVSSUQ+a19fQmFja2luZ0ZpZWxkADxQUk9EVUNUSUQ+a19fQmFja2luZ0Zp
ZWxkADxPTEQ2RElHSVRJRD5rX19CYWNraW5nRmllbGQAPENPTExFQ1RJT05BR0VOQ1lJRD5rX19C
YWNraW5nRmllbGQAPENPVU5UUllDT0RFPmtfX0JhY2tpbmdGaWVsZAA8REVCVFRZUEU+a19fQmFj
a2luZ0ZpZWxkADxTSElQTUVOVERBVEU+a19fQmFja2luZ0ZpZWxkADxESVZJU0lPTj5rX19CYWNr
aW5nRmllbGQAPFBST0RVQ1RESVNDUklQVElPTj5rX19CYWNraW5nRmllbGQAPFNFUVVFTkNFTlVN
QkVSPmtfX0JhY2tpbmdGaWVsZAA8Q09SUE5VTUJFUj5rX19CYWNraW5nRmllbGQAPE9SREVSTlVN
QkVSPmtfX0JhY2tpbmdGaWVsZAA8VU5QQUlEQU1PVU5UPmtfX0JhY2tpbmdGaWVsZAA8T1JJR0lU
RU1BTU9VTlQ+a19fQmFja2luZ0ZpZWxkADxGaWVsZE5hbWU+a19fQmFja2luZ0ZpZWxkADxMaW5l
VGVtcGxhdGVOYW1lPmtfX0JhY2tpbmdGaWVsZAA8VHlwZT5rX19CYWNraW5nRmllbGQAPEZpZWxk
X1RlbXBsYXRlPmtfX0JhY2tpbmdGaWVsZAA8TGluZV9UZW1wbGF0ZT5rX19CYWNraW5nRmllbGQA
PFZhbHVlPmtfX0JhY2tpbmdGaWVsZAA8RmllbGRTaXplPmtfX0JhY2tpbmdGaWVsZAA8TGluZVNp
emU+a19fQmFja2luZ0ZpZWxkADxTdGFydFBvc2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVjaW1h
bFBsYWNlcz5rX19CYWNraW5nRmllbGQAPExpbmVzPmtfX0JhY2tpbmdGaWVsZAA8T3JpZ2luYWxC
eXRlcz5rX19CYWNraW5nRmllbGQAPFBhcnNlZFN1Y2Nlc3NmdWxseT5rX19CYWNraW5nRmllbGQA
PEZpZWxkRGljdGlvbmFyeT5rX19CYWNraW5nRmllbGQAPEZpZWxkVGVtcGxhdGVEaWN0aW9uYXJ5
PmtfX0JhY2tpbmdGaWVsZABEYkNvbW1hbmQAT2RiY0NvbW1hbmQAQXBwZW5kAFVyaUtpbmQAcmVj
b3JkAFNDXzYyZjJlN2FiNmM2NDQ1Y2NiZjAyN2VhNmFlMWFlZTZlAFJlcGxhY2UASXNOdWxsT3JX
aGl0ZVNwYWNlAGdldF9TdGFja1RyYWNlAFByaW5jaXBhbEluaXRhbEJhbGFuY2UAVG90YWxCYWxh
bmNlAGRlZmF1bHRJbnN0YW5jZQBMb2NhdGlvblByYWN0aWNlQ29kZQBQb3N0YWxDb2RlAFN0YXR1
c0NvZGUAZ2V0X01lc3NhZ2UAUmVhZEJ5dGVzUmFuZ2UARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBO
aWJibGUARG91YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9DdXJy
ZW50RmlsZQBDcmVhdGVDc3ZGaWxlAENvbnNvbGUAZ2V0X0ZpZWxkTmFtZQBzZXRfRmllbGROYW1l
AGZpZWxkTmFtZQBMb2NhdGlvblByYWN0aWNlTmFtZQBNaWRkbGVOYW1lAEluY29taW5nRmlsZU5h
bWUAR2V0RmlsZU5hbWUAZ2V0X0xpbmVUZW1wbGF0ZU5hbWUAc2V0X0xpbmVUZW1wbGF0ZU5hbWUA
dGVtcGxhdGVOYW1lAExvY2F0aW9uTmFtZQBMYXN0TmFtZQBGaXJzdE5hbWUAR2V0UnVudGltZUNv
bm5lY3Rpb25CeU5hbWUARGF0ZVRpbWUAUGFyc2VkTGluZQBQYXJzZVNpbmdsZUxpbmUAaXNTaW5n
bGVMaW5lAFBhcnNlTGluZQBXcml0ZUxpbmUAQWRkcmVzc0xpbmUAQ29tbW9uRW5naW5lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAGdldF9UeXBlAHNldF9UeXBlAEZpZWxkVHlwZQBm
aWVsZFR5cGUAQ29sbGVjdGlvblR5cGUAU09MQWdyZWVtZW50VHlwZQBTeXN0ZW0uQ29yZQBnZXRf
Q3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAZ2V0X0ludmFyaWFudEN1bHR1cmUA
Q2FwdHVyZQBHZW5lcmFsUHVycG9zZVJlY29yZEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
Q2xvc2UAUkdTLkFydGl2YUdlbmVyYWxQdXJwb3NlAERpc3Bvc2UAUGFyc2UAUmV2ZXJzZQBTT0xE
YXRlAFBhY2tlZERhdGUATGlzdGVkRGF0ZQBTZXJ2aWNlRGF0ZQBCS0VmZmVjdGl2ZURhdGUAZ2V0
RGF0ZQBMYXN0UmVtaXREYXRlAENsaWVudExhc3RQYXlEYXRlAERlbGlucXVlbmN5RGF0ZQBnZXRG
b3JtYXRlZGRhdGUAZ2V0X0ZpZWxkX1RlbXBsYXRlAHNldF9GaWVsZF9UZW1wbGF0ZQBnZXRfTGlu
ZV9UZW1wbGF0ZQBzZXRfTGluZV9UZW1wbGF0ZQBBZGRGaWVsZFRlbXBsYXRlAGZpZWxkVGVtcGxh
dGUATGluZVRlbXBsYXRlAGxpbmVUZW1wbGF0ZQB0ZW1wbGF0ZQBTT0xTdGF0ZQBnZXRfU3RhdGUA
RWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29ubmVjdGlvblN0YXRlAERlbGV0ZQBXcml0ZQBOb3RlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRy
aWJ1dGUARGVmYXVsdE1lbWJlckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0
ZQBUb0J5dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBudW1lcmljVmFsdWUAdmFsdWUAZ2V0X0ZpZWxk
U2l6ZQBzZXRfRmllbGRTaXplAGZpZWxkU2l6ZQBnZXRfTGluZVNpemUAc2V0X0xpbmVTaXplAGxp
bmVTaXplAEluZGV4T2YAR2V0RW5jb2RpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBXcml0
ZVN0cmluZwBJc1dlbGxGb3JtZWRVcmlTdHJpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAVG9TdHJp
bmcAR2V0U3RyaW5nAFN1YnN0cmluZwBlcnJNc2cASXNNYXRjaABDb21wdXRlU3RyaW5nSGFzaABN
YXRoAHNvdXJjZUZpbGVQYXRoAG91dHB1dEZpbGVQYXRoAGdldF9MZW5ndGgAbGVuZ3RoAENvbnZl
cnRFYmNkaWNUb0FzY2lpAFVyaQBVbnBhY2sAVG9EZWNpbWFsAE9yZGVyVG90YWwAbGFiZWwAU3lz
dGVtLkNvbXBvbmVudE1vZGVsAFNDXzYyZjJlN2FiNmM2NDQ1Y2NiZjAyN2VhNmFlMWFlZTZlLmRs
bABEQk51bGwAc2V0X0RhdGFfSXNOdWxsAFNldE51bGwAZ2V0X0l0ZW0Ac2V0X0l0ZW0AU3lzdGVt
AFRyaW0AUm9vbQBBbHBoYU51bQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBjb25u
AFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAE9kYmNUcmFuc2FjdGlv
bgBTeXN0ZW0uUmVmbGVjdGlvbgBWYWx1ZUNvbGxlY3Rpb24AZ2V0X1J1bnRpbWVDb25uZWN0aW9u
Q29sbGVjdGlvbgBHcm91cENvbGxlY3Rpb24AZ2V0X01UQ29ubmVjdGlvbgBEYkNvbm5lY3Rpb24A
T2RiY0Nvbm5lY3Rpb24AZ2V0X0V4Y2VwdGlvbkNvbm5lY3Rpb24AZ2V0X1N0YXJ0UG9zaXRpb24A
c2V0X1N0YXJ0UG9zaXRpb24Ac3RhcnRQb3NpdGlvbgBBcmd1bWVudE91dE9mUmFuZ2VFeGNlcHRp
b24AQXJndW1lbnROdWxsRXhjZXB0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24ARGVidERl
c2NyaXB0aW9uAEl0ZW1EZXNzY3JpcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAG5pYmJsZU5vAEN1
bHR1cmVJbmZvAFplcm8AT3V0cHV0TmFtZU1hcABPdXRwdXRNYXAATWljcm9zb2Z0LlNxbFNlcnZl
ci5EVFNSdW50aW1lV3JhcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1BpcGVsaW5lV3JhcABjb3Jw
AEdyb3VwAFN5c3RlbS5MaW5xAENoYXIARXhlY3V0ZVNjYWxhcgBDbGllbnRSZWZlcmVuY2VOdW1i
ZXIAUHJpbWFyeVBob25lTnVtYmVyAEl0ZW1OdW1iZXIATG9jYXRpb25OdW1iZXIAT3JkZXJOdW1i
ZXIAQ3JlZGl0b3JJbnRlcm5hbENvbnN1bWVyQWNjb3VudE51bWJlcgBJRm9ybWF0UHJvdmlkZXIA
U3RyaW5nQnVpbGRlcgBPdXRwdXQwQnVmZmVyAE91dHB1dDFCdWZmZXIAUGlwZWxpbmVCdWZmZXIA
RXhjZXB0aW9uc0J1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ29u
bmVjdGlvbk1hbmFnZXIAVG9VcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldy
YXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlcgBFYmNkaWNQYXJz
ZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAQml0Q29udmVydGVyAHNldF9Gb3JlZ3JvdW5kQ29s
b3IAQ29uc29sZUNvbG9yAEZpcmVFcnJvcgBQcmludEVycm9yAEdldEVudW1lcmF0b3IALmN0b3IA
LmNjdG9yAENvbnZlcnREYXRlU3RyAGRhdGVTdHIAaGV4U3RyAHN0cgByZWMyMDNzAHJlYzIwNXMA
T3V0cHV0SURzAFN5c3RlbS5EaWFnbm9zdGljcwBSR1MuQXJ0aXZhR2VuZXJhbFB1cnBvc2UuRGF0
YS5SZWNvcmRzAGdldF9EZWNpbWFsUGxhY2VzAHNldF9EZWNpbWFsUGxhY2VzAGRlY2ltYWxQbGFj
ZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzYy
ZjJlN2FiNmM2NDQ1Y2NiZjAyN2VhNmFlMWFlZTZlLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291
cmNlcwBEZWJ1Z2dpbmdNb2RlcwBQYXJzZXJVdGlsaXRpZXMAU0NfNjJmMmU3YWI2YzY0NDVjY2Jm
MDI3ZWE2YWUxYWVlNmUuUHJvcGVydGllcwBnZXRfUmVhZE9ubHlWYXJpYWJsZXMAdGl0bGVzAERh
dGVUaW1lU3R5bGVzAGluY2x1ZGVDb2x1bW5OYW1lcwBnZXRfTGluZXMAc2V0X0xpbmVzAFBhcnNl
QWxsTGluZXMAR2V0TGluZXMAcmVtb3ZlRW1wdHlMaW5lcwBsaW5lcwBhZGRRdW90ZXMAZWJjZGlj
Qnl0ZXMAc291cmNlQnl0ZXMAbGluZUJ5dGVzAGdldF9PcmlnaW5hbEJ5dGVzAHNldF9PcmlnaW5h
bEJ5dGVzAFJlYWRBbGxCeXRlcwBhbGxCeXRlcwBDb252ZXJ0SGV4U3RyaW5nVG9CeXRlcwBieXRl
cwBnZXRfVmFsdWVzAEFkanVzdERlY2ltYWxWYWx1ZXMAQnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRD
b2x1bW5JbmRleGVzAFNldHRpbmdzAENvbnRhaW5zAFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNz
aW9ucwBDb25uZWN0aW9ucwBTdHJpbmdTcGxpdE9wdGlvbnMAZ2V0X0dyb3VwcwBnZXRfQ2hhcnMA
UmVtb3ZlTm9uQXNjaWlDaGFycwBCdWZmZXJzAEZpbGVIZWxwZXJzAFZhbGlkYXRlSW5wdXRQYXJh
bWV0ZXJzAFdhaXRGb3JQZW5kaW5nRmluYWxpemVycwBnZXRfU3VjY2VzcwBFeGlzdHMARmluaXNo
T3V0cHV0cwBDcmVhdGVOZXdPdXRwdXRSb3dzAENvbmNhdABGb3JtYXQAVHJ5UGFyc2VFeGFjdABP
YmplY3QAQ29sbGVjdABTZXRFbmRPZlJvd3NldABQYWRMZWZ0AFNwbGl0AGdldF9EZWZhdWx0AGlz
bXQAUHJpbmNpcGFsQmFsYW5jZUF0UGxhY2VtZW50AFhFbGVtZW50AFVzZXJDb21wb25lbnQAUGFy
ZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABnZXRfQ3VycmVudABnZXRfQ291bnQAZ2V0X0Zp
ZWxkc0NvdW50AFRvdGFsUGFzdER1ZUFtb3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0
AEluc2VydABDb252ZXJ0AHRocm93RXhjZXB0aW9uSWZTb3VyY2VBcnJheUlzVG9vU2hvcnQATWlj
cm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAc2V0X0NvbW1hbmRUaW1lb3V0AFByaW1lT3V0
cHV0AE1vdmVOZXh0AFN5c3RlbS5UZXh0AEZyZWVGb3JtVGV4dABHZXRWYWx1ZVdpdGhDb250ZXh0
AFNjcmlwdENvbXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AENvbnZlcnRM
aW5lQXJyYXlUb0NzdgBnZXRfTm93AFBvdwBBZGRSb3cAQWRkUGxhY2VtZW50Um93AFNvdXJjZUJ5
dGVzSW5IZXgAZ2V0X09yaWdpbmFsQnl0ZXNJbkhleABSZWdleABDb250YWN0UHJlZml4AGdldF9U
b2RheQBUb0FycmF5AFRvQ2hhckFycmF5AGdldF9LZXkAUmVsYXRpb25zaGlwVHlwZUtleQBDb250
YWluc0tleQBnZXRfQXNzZW1ibHkAZ2V0X1BhcnNlZFN1Y2Nlc3NmdWxseQBzZXRfUGFyc2VkU3Vj
Y2Vzc2Z1bGx5AENvcHkAQmluYXJ5AGdldF9GaWVsZERpY3Rpb25hcnkAc2V0X0ZpZWxkRGljdGlv
bmFyeQBnZXRfRmllbGRUZW1wbGF0ZURpY3Rpb25hcnkAc2V0X0ZpZWxkVGVtcGxhdGVEaWN0aW9u
YXJ5AGdldF9GdWxsSW5ib3VuZERpcmVjdG9yeQBDb3VudHJ5AENpdHkAb3BfRXF1YWxpdHkAb3Bf
SW5lcXVhbGl0eQBJc051bGxPckVtcHR5AAAFMAAxAACA+1QAaABlACAAQgByAGEAZABmAG8AcgBk
ACAARQB4AGMAaABhAG4AZwBlACwAIABMAHQAZAA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgA
YQBuAGcAZQA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAgAFAATwAgAEIAbwB4
ACAAOAAzADYAIABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYAMAAwADUAMwA6ADEA
KAA4ADAAMAApADMAMgAzAC0ANQA1ADcANwCgADoAQgBCAEUATAAwADEAOgBCAEIARQBDADAAMQAB
BTAAMwAAgQVUAGgAZQAgAEEAcwBoAHQAbwBuACAARAByAGEAawBlACAARwBhAGwAbABlAHIAaQBl
AHMALAAgAEwAdABkADoAQQBzAGgAdABvAG4AIABEAHIAYQBrAGUAIABHAGEAbABsAGUAcgBpAGUA
cwA6AEEAcwBoAHQAbwBuACAARAByAGEAawBlACAAUABPACAAQgBvAHgAIAA4ADUANQAgAE0AbwBy
AHQAbwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkANgAzADQA
LQA1ADEANgA0AKAAOgBCAEEARwBMADAAMwA6AEIAQQBHAEMAMAAzAAEFMAA3AACBB0EAcgBkAGwA
ZQBpAGcAaAAgAEUAbABsAGkAbwB0AHQAIAAmACAAUwBvAG4AcwAsACAATABpAG0AaQB0AGUAZAA6
AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQA6AEIAcgBhAGQAZgBvAHIAZAAgAEUA
eABjAGgAYQBuAGcAZQAgAFAATwAgAEIAbwB4ACAAOAAzADYAIABNAG8AcgB0AG8AbgAgAEcAcgBv
AHYAZQAgAEkATAAgADYAMAAwADUAMwA6ADEAKAA4ADAAMAApADMAMgAzAC0ANQA1ADcANwCgADoA
QgBBAFMATAAwADcAOgBCAEEAUwBDADAANwABBTAAOQAAgQ9UAGgAZQAgAEgAYQBtAGkAbAB0AG8A
bgAgAEMAbwBsAGwAZQBjAHQAaQBvAG4ALAAgAEkAbgBjAC4AOgBUAGgAZQAgAEgAYQBtAGkAbAB0
AG8AbgAgAEMAbwBsAGwAZQBjAHQAaQBvAG4AOgBIAGEAbQBpAGwAdABvAG4AIABDAG8AbABsAGUA
YwB0AGkAbwBuACAAUABPACAAQgBvAHgAIAA4ADQAMgAgAE0AbwByAHQAbwBuACAARwByAG8AdgBl
ACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkANQA0ADUALQAyADAANwA3ADoAQgBIAEMA
TAAwADkAOgBCAEgAQwBDADAAOQABBTEAMAAAgPNIAGEAbQBpAGwAdABvAG4AIABBAHUAdABoAGUA
bgB0AGkAYwBhAHQAZQBkADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgBy
AGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0A
bwByAHQAbwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAy
ADMALQA1ADUANwA3AKAAOgBCAEgAQQBMADEAMAA6AEIASABBAEMAMQAwAAEFMQAxAACA9VYAYQBu
ACAASAB5AGcAYQBuACAAJgAgAFMAbQB5AHQAaABlACwAIABJAG4AYwA6AEIAcgBhAGQAZgBvAHIA
ZAAgAEUAeABjAGgAYQBuAGcAZQA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAg
AFAATwAgAEIAbwB4ACAAOAAzADYAIABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYA
MAAwADUAMwA6ADEAKAA4ADAAMAApADMAMgAzAC0ANQA1ADcANwCgADoAQgBWAFMATAAxADEAOgBC
AFYAUwBDADEAMQABBTEAMgAAgOFCAHIAZQBlAGQAIABQAGUAcgBmAGUAYwB0ADoAQgByAGEAZABm
AG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4A
ZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8AdgBlACAASQBM
ACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBCAEIAUABMADEA
MgA6AEIAQgBQAEMAMQAyAAEFMQA0AACA8UgAYQB3AHQAaABvAHIAbgBlACAAQQByAGMAaABpAHQA
ZQBjAHQAdQByAGEAbAAgAFIAZQBnAGkAcwB0AGUAcgAsACAATAB0AGQAOgBIAGEAdwB0AGgAbwBy
AG4AZQA6AEgAYQB3AHQAaABvAHIAbgBlACAAUABPACAAQgBvAHgAIAA4ADgANgAgAE0AbwByAHQA
bwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAoAAxACgAOAAwADAAKQA3ADcAMgAt
ADQAMgA3ADcAOgBCAEgAQQBMADEANAA6AEIASABBAEMAMQA0AAEFMQA1AACA6UIAcgBhAGQAZgBv
AHIAZAAgAEUAZABpAHQAaQBvAG4AcwA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcA
ZQA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAgAFAATwAgAEIAbwB4ACAAOAAz
ADYAIABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYAMAAwADUAMwA6ADEAKAA4ADAA
MAApADMAMgAzAC0ANQA1ADcANwCgADoAQgBCAEUATAAxADUAOgBCAEIARQBDADEANQABBTEANgAA
gQVDAG8AbABsAGUAYwB0AGkAYgBsAGUAcwAgAFQAbwBkAGEAeQAgAE4AZQB0AHcAbwByAGsALAAg
AEwAdABkADoAQgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8A
cgBkACAARQB4AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBu
ACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUA
NwA3AKAAOgBCAEMATgBMADEANgA6AEIAQwBOAEMAMQA2AAEFMQA3AACBG0IAcgBhAGQAZgBvAHIA
ZAAgAEEAdQB0AGgAZQBuAHQAaQBjAGEAdABlAGQAOgBCAHIAYQBkAGYAbwByAGQAIABBAHUAdABo
AGUAbgB0AGkAYwBhAHQAZQBkAC8ATQBpAG4AdAA6AEIAcgBhAGQAZgBvAHIAZAAgAEEAdQB0AGgA
ZQBuAHQAaQBjAGEAdABlAGQALwBNAGkAbgB0ACAAUABPACAAQgBvAHgAIAA4ADUAOAAgAE0AbwBy
AHQAbwBuACAARwByAG8AdgBlACAASQBMACAANgAwADAANQAzADoAIAAxACgAOAAwADAAKQAzADIA
MwAtADgAMQAwADUAOgBCAEIAQQBMADEANwA6AEIAQgBBAEMAMQA3AAEFMQA4AACBF1QAaABlACAA
QgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlACAAQwBoAGUAYwBrACAAQwBvAG0AcABh
AG4AeQAsACAATAB0AGQAOgBCAHIAYQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAOgBCAHIA
YQBkAGYAbwByAGQAIABFAHgAYwBoAGEAbgBnAGUAIABQAE8AIABCAG8AeAAgADgAMwA2ACAATQBv
AHIAdABvAG4AIABHAHIAbwB2AGUAIABJAEwAIAA2ADAAMAA1ADMAOgAxACgAOAAwADAAKQAzADIA
MwAtADUANQA3ADcAoAA6AEIAQgBDAEwAMQA4ADoAQgBCAEMAQwAxADgAAQUxADkAAIDhUwB0AHUA
ZABpAG8AIABIAHUAbQBtAGUAbAA6AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQA6
AEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAgAFAATwAgAEIAbwB4ACAAOAAzADYA
IABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYAMAAwADUAMwA6ADEAKAA4ADAAMAAp
ADMAMgAzAC0ANQA1ADcANwCgADoAQgBTAEgATAAxADkAOgBCAFMASABDADEAOQABBTQAMAAAgP9U
AGgAZQAgAEIAcgBhAGQAZgBvAHIAZAAgAEUAeABjAGgAYQBuAGcAZQAgAE8AbgBsAGkAbgBlADoA
QgByAGEAZABmAG8AcgBkACAARQB4AGMAaABhAG4AZwBlADoAQgByAGEAZABmAG8AcgBkACAARQB4
AGMAaABhAG4AZwBlACAAUABPACAAQgBvAHgAIAA4ADMANgAgAE0AbwByAHQAbwBuACAARwByAG8A
dgBlACAASQBMACAANgAwADAANQAzADoAMQAoADgAMAAwACkAMwAyADMALQA1ADUANwA3AKAAOgBC
AEIATwBMADQAMAA6AEIAQgBPAEMANAAwAAEFNAAxAACBCVQAaABlACAAQQBzAGgAdABvAG4AIABE
AHIAYQBrAGUAIABHAGEAbABsAGUAcgBpAGUAcwAgAE8AbgBsAGkAbgBlADoAQQBzAGgAdABvAG4A
IABEAHIAYQBrAGUAIABHAGEAbABsAGUAcgBpAGUAcwA6AEEAcwBoAHQAbwBuACAARAByAGEAawBl
ACAAUABPACAAQgBvAHgAIAA4ADUANQAgAE0AbwByAHQAbwBuACAARwByAG8AdgBlACAASQBMACAA
NgAwADAANQAzADoAMQAoADgAMAAwACkANgAzADQALQA1ADEANgA0AKAAOgBCAEEATwBMADQAMQA6
AEIAQQBPAEMANAAxAAEFNAAyAACBEVQAaABlACAASABhAG0AaQBsAHQAbwBuACAAQwBvAGwAbABl
AGMAdABpAG8AbgAgAE8AbgBsAGkAbgBlADoAVABoAGUAIABIAGEAbQBpAGwAdABvAG4AIABDAG8A
bABsAGUAYwB0AGkAbwBuADoASABhAG0AaQBsAHQAbwBuACAAQwBvAGwAbABlAGMAdABpAG8AbgAg
AFAATwAgAEIAbwB4ACAAOAA0ADIAIABNAG8AcgB0AG8AbgAgAEcAcgBvAHYAZQAgAEkATAAgADYA
MAAwADUAMwA6ADEAKAA4ADAAMAApADUANAA1AC0AMgAwADcANwA6AEIASABPAEwANAAyADoAQgBI
AE8AQwA0ADIAAQ1NAGkAcwB0AGUAcgAABTAAMgAACU0AcgBzAC4AAAlNAGkAcwBzAAAFMAA0AAAN
RABvAGMAdABvAHIAAAUwADUAABFSAGUAdgBlAHIAZQBuAGQAAAUwADYAAAdNAHMALgAAEUEAZABq
AHUAdABhAG4AdAAABTAAOAAAIUEAZABqAHUAdABhAG4AdAAgAEcAZQBuAGUAcgBhAGwAAA9BAGQA
bQBpAHIAYQBsAAANQQBpAHIAbQBhAG4AACFBAGkAcgBtAGEAbgAgADEAcwB0ACAAQwBsAGEAcwBz
AAAhQQBpAHIAbQBhAG4AIAAyAG4AZAAgAEMAbABhAHMAcwAABTEAMwAAIUEAaQByAG0AYQBuACAA
MwByAGQAIABDAGwAYQBzAHMAACFBAHQAdABvAHIAbgBlAHkAIABHAGUAbgBlAHIAYQBsAAAjQgBy
AGkAZwBhAGQAaQBlAHIAIABHAGUAbgBlAHIAYQBsAAAPQgByAG8AdABoAGUAcgAAC0MAYQBkAGUA
dAAAD0MAYQBwAHQAYQBpAG4AAAUyADEAABFDAGgAYQBwAGwAYQBpAG4AAAUyADIAACdDAGgAaQBl
AGYAIABQAGUAdAB0AHkAIABPAGYAZgBpAGMAZQByAAAFMgAzAAArQwBoAGkAZQBmACAAVwBhAHIA
cgBhAG4AdAAgAE8AZgBmAGkAYwBlAHIAAAUyADQAAA9DAG8AbABvAG4AZQBsAAAFMgA1AAAVQwBv
AG0AbQBhAG4AZABhAG4AdAAABTIANgAAE0MAbwBtAG0AYQBuAGQAZQByAAAFMgA4AAARQwBvAHIA
cABvAHIAYQBsAAAFMwAwAAANRQBuAHMAaQBnAG4AAAUzADEAAA1GAGEAdABoAGUAcgAABTMAMgAA
IUYAaQByAHMAdAAgAEwAaQBlAHUAdABlAG4AYQBuAHQAAAUzADMAAB1GAGkAcgBzAHQAIABTAGEA
cgBnAGUAYQBuAHQAAAUzADQAACFGAGwAZQBlAHQAIABMAGkAZQB1AHQAZQBuAGEAbgB0AAAFMwA1
AAAPRwBlAG4AZQByAGEAbAAABTMANgAAEUcAbwB2AGUAcgBuAG8AcgAABTMANwAAG0cAcgBvAHUA
cAAgAEMAYQBwAHQAYQBpAG4AAAUzADgAABNIAG8AbgBvAHIAYQBiAGwAZQAAFUwAaQBlAHUAdABl
AG4AYQBuAHQAACVMAGkAZQB1AHQAZQBuAGEAbgB0ACAAQwBvAGwAbwBuAGUAbAAAKUwAaQBlAHUA
dABlAG4AYQBuAHQAIABDAG8AbQBtAGEAbgBkAGUAcgAABTQAMwAAJUwAaQBlAHUAdABlAG4AYQBu
AHQAIABHAGUAbgBlAHIAYQBsAAAFNAA0AAAnTABpAGUAdQB0AGUAbgBhAG4AdAAgAEcAbwB2AGUA
cgBuAG8AcgAABTQANQAAL0wAaQBlAHUAdABlAG4AYQBuAHQAIABKAHUAbgBpAG8AcgAgAEcAcgBh
AGQAZQAABTQANgAAIUwAaQBlAHUAdABlAG4AYQBuAHQAIABNAGEAagBvAHIAAAU0ADcAAAtNAGEA
agBvAHIAAAU0ADgAABtNAGEAagBvAHIAIABHAGUAbgBlAHIAYQBsAAAFNAA5AAANTQBhAHMAdABl
AHIAAAU1ADAAAB9NAGEAcwB0AGUAcgAgAFMAZQByAGcAZQBhAG4AdAAABTUAMQAAC00AYQB5AG8A
cgAABTUAMgAAFU0AaQBkAHMAaABpAHAAbQBhAG4AAAU1ADQAABNNAG8AbgBzAGkAZwBuAG8AcgAA
BTUANQAAG00AbwBzAHQAIABSAGUAdgBlAHIAZQBuAGQAAAU1ADYAAA1NAG8AdABoAGUAcgAABTUA
NwAAG1AAZQB0AHQAeQAgAE8AZgBmAGkAYwBlAHIAAAU1ADgAAA9QAHIAaQB2AGEAdABlAAAFNQA5
AAAnUAByAGkAdgBhAHQAZQAgAEYAaQByAHMAdAAgAEMAbABhAHMAcwAABTYAMAAAE1AAcgBvAGYA
ZQBzAHMAbwByAAAFNgAxAAALUgBhAGIAYgBpAAAFNgAyAAAZUgBlAGEAcgAgAEEAZABtAGkAcgBh
AGwAAAU2ADMAAB9SAGUAdgBlAHIAZQBuAGQAIABNAG8AdABoAGUAcgAABTYANAAAMVIAZQB2AGUA
cgBlAG4AZAAgAE0AbwB0AGgAZQByACAAUwB1AHAAZQByAGkAbwByAAAFNgA1AAAdUgBpAGcAaAB0
ACAAUgBlAHYAZQByAGUAbgBkAAAFNgA2AAANUwBlAGEAbQBhAG4AAAU2ADcAACVTAGUAYQBtAGEA
bgAgAEYAaQByAHMAdAAgAEMAbABhAHMAcwAABTYAOAAAJ1MAZQBhAG0AYQBuACAAUwBlAGMAbwBu
AGQAIABDAGwAYQBzAHMAAAU2ADkAAA9TAGUAbgBhAHQAbwByAAAFNwAwAAARUwBlAHIAZwBlAGEA
bgB0AAAFNwAxAAAdUwBlAHIAZwBlAGEAbgB0ACAATQBhAGoAbwByAAAFNwAyAAANUwBpAHMAdABl
AHIAAAU3ADMAAC1TAHAAZQBjAGkAYQBsAGkAcwB0ACAARgBpAHIAcwB0ACAAQwBsAGEAcwBzAAAF
NwA0AAAvUwBwAGUAYwBpAGEAbABpAHMAdAAgAEYAbwB1AHIAdABoACAAQwBsAGEAcwBzAAAFNwA1
AAAvUwBwAGUAYwBpAGEAbABpAHMAdAAgAFMAZQBjAG8AbgBkACAAQwBsAGEAcwBzAAAFNwA2AAAt
UwBwAGUAYwBpAGEAbABpAHMAdAAgAFQAaABpAHIAZAAgAEMAbABhAHMAcwAABTcANwAAHVMAdABh
AGYAZgAgAFMAZQByAGcAZQBhAG4AdAAABTcAOAAAJVQAZQBjAGgAbgBpAGMAYQBsACAAUwBlAHIA
ZwBlAGEAbgB0AAAFNwA5AAAbVgBlAHIAeQAgAFIAZQB2AGUAcgBlAG4AZAAABTgAMAAAGVYAaQBj
AGUAIABBAGQAbQBpAHIAYQBsAAAFOAAxAAAfVwBhAHIAcgBhAG4AdAAgAE8AZgBmAGkAYwBlAHIA
ABFSAGUAYwBvAHIAZAAwADMAAClDAE8ATABMAEUAQwBUAEkATwBOACAAQQBHAEUATgBDAFkAIABJ
AEQAABdSAEUAQwBPAFIARAAgAFQAWQBQAEUAABtTAE8AVQBSAEMARQAgAFMAWQBTAFQARQBNAAAZ
QwBPAFUATgBUAFIAWQAgAEMATwBEAEUAABdDAE8AUgBQACAATgBVAE0AQgBFAFIAABdDAFUAUwBU
AE8ATQBFAFIAIABJAEQAAA1GAEkATABMAEUAUgAAGU8AUgBEAEUAUgAgAE4AVQBNAEIARQBSAAAf
UwBFAFEAVQBFAE4AQwBFACAATgBVAE0AQgBFAFIAAB1PAEwARAAgADYAIABEAEkARwBJAFQAIABJ
AEQAACdQAFIATwBEAFUAQwBUACAARABJAFMAQwBSAEkAUABUAEkATwBOAAAbUwBIAEkAUABNAEUA
TgBUACAARABBAFQARQAAIU8AUgBJAEcAIABJAFQARQBNACAAQQBNAE8AVQBOAFQAABtVAE4AUABB
AEkARAAgAEEATQBPAFUATgBUAAATRABFAEIAVAAgAFQAWQBQAEUAACdJAFQARQBNACAARABBAFQA
RQAgAEwAQQBTAFQAIABQAEEASQBEAAAPRgBJAEwATABFAFIAMgAAFVAAUgBPAEQAVQBDAFQAIABJ
AEQAABFEAEkAVgBJAFMASQBPAE4AAA9GAEkATABMAEUAUgAzAAARUgBlAGMAbwByAGQAMAAyAAAl
QwBVAFMAVABPAE0ARQBSACAATABBAFMAVAAgAE4AQQBNAEUAACdDAFUAUwBUAE8ATQBFAFIAIABG
AEkAUgBTAFQAIABOAEEATQBFAAAvQwBVAFMAVABPAE0ARQBSACAATQBJAEQARABMAEUAIABJAE4A
SQBUAEkAQQBMAAAdQwBVAFMAVABPAE0ARQBSACAAVABJAFQATABFAAAhQwBVAFMAVABPAE0ARQBS
ACAAQQBEAEQAUgBFAFMAUwAAGUMAVQBTAFQATwBNAEUAUgAgAFoASQBQAAAfQwBVAFMAVAAgAFQA
RQBMACAATgBVAE0AQgBFAFIAAB9DAFUAUwBUAE8ATQBFAFIAIABTAFQAQQBUAFUAUwAAKUMAVQBT
AFQATwBNAEUAUgAgAFQATwBUAEEATAAgAE8AVwBJAE4ARwAAL0MAVQBTAFQATwBNAEUAUgAgAEQA
QQBUAEUAIABMAEEAUwBUACAAUABBAEkARAAAJ00AQQBJAEwASQBOAEcAIABTAFQAQQBUAFUAUwAg
AEMATwBEAEUAAAEABTkAOQAABTAAMAAABVUAUwAAgI1FAHIAcgBvAHIAZQBkACAAZAB1AGUAIAB0
AG8AIABOAG8AbgAgAFUAUwAgAGEAYwBjAG8AdQBuAHQAIABiAGEAcwBlAGQAIABvAG4AIABDAG8A
dQBuAHQAcgB5ACAAQwBvAGQAZQAuACAATwByAGQAZQByACAATgB1AG0AYgBlAHIAOgAgAHsAMAB9
AABbYQB1AHQAbwBtAGEAdABlAGQAIABiAGkAbABsACAAcABhAHkAIABwAGgAbwBuAGUAIABuAHUA
bQBiAGUAcgAgAGYAbwByACAAYwBsAGkAZQBuAHQAIAA6ACAAAAUgACAAAEFDAGwAaQBlAG4AdAAg
AHMAdABhAHQAdQBzACAAZgBvAHIAIAB0AGgAZQAgAEMAbwBuAHMAdQBtAGUAcgA6ACAAAD9DAGwA
aQBlAG4AdAAgAGYAaQBsAGUAIABmAGkAbABlAGQAIABNAGEAaQBsACAAUwB0AGEAdAB1AHMAOgAg
AAA/QwBsAGkAZQBuAHQAIABPAGwAZAAgAGMAdQBzAHQAbwBtAGUAcgAgAEkARAAgAG4AdQBtAGIA
ZQByADoAIAAAgJtOAG8AIABEAGEAdABlACAAaQBuACAAZgBpAGwAZQAgAGYAbwByACAATQBhAG4A
ZABhAHQAbwByAHkAIABkAGEAdABlAHMALAAgAGEAYwBjAG8AdQBuAHQAIAB7ADAAfQAgAG8AbgAg
AHMAdABhAHQAdQBzACAAPQBOAG8AIABzAG8AbAAgAGQAYQB0AGUAIABoAG8AbABkAC4AAICPQQBj
AGMAbwB1AG4AdAAgAHsAMAB9ACAAaABhAGQAIABuAG8AIABzAGgAaQBwAG0AZQBuAHQAIABkAGEA
dABlAC4AIABDAHUAcwB0AG8AbQBlAHIAIABsAGEAcwB0ACAAcABhAGkAZAAgAGQAYQB0AGUAIAB1
AHMAZQBkACAAaQBuAHMAdABlAGEAZAAuAAAPcgBlAGcAdQBsAGEAcgAAgykgAFMARQBMAEUAQwBU
ACAAYQBjAGMAbwB1AG4AdAAuAEEAUgBBAEMASQBEACAARgBSAE8ATQAgACUAUwBUAEEAUgBUAFQA
QQBCAEwARQAgAEEAUgBDAEwASQBFAE4AVAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIABBAFIAQQBD
AEMATwBVAE4AVAAgAGEAYwBjAG8AdQBuAHQAIABvAG4AIABBAFIAQwBMAEkARAAgAD0AIABBAFIA
QQBDAEMATABUAEkARAAgAEEATgBEACAAQQBSAEMATABJAEQAIABJAE4AIAAoACcAQgBCAEUATAAw
ADEAJwAsACcAQgBBAEcATAAwADMAJwAsACcAQgBBAFMATAAwADcAJwAsACcAQgBIAEMATAAwADkA
JwAsACcAQgBIAEEATAAxADAAJwAsACcAQgBWAFMATAAxADEAJwAsACcAQgBCAFAATAAxADIAJwAs
ACAAJwBCAEgAQQBMADEANAAnACwAIAAnAEIAQgBFAEwAMQA1ACcALAAgACcAQgBDAE4ATAAxADYA
JwAsACAAJwBCAEIAQQBMADEANwAnACwAIAAnAEIAQgBDAEwAMQA4ACcALAAnAEIAUwBIAEwAMQA5
ACcALAAgACcAQgBCAE8ATAA0ADAAJwAsACAAJwBCAEEATwBMADQAMQAnACwAIAAnAEIASABPAEwA
NAAyACcAKQAgAEoATwBJAE4AIABBAFIARQBOAFQASQBUAFkAIABlAG4AdAAgAE8ATgAgAGEAYwBj
AG8AdQBuAHQALgBBAFIAQQBDAFIAUABJAEQAIAA9ACAAZQBuAHQALgBBAFIARQBOAEkARAAgAEoA
TwBJAE4AIABaAFoAUgBFAFQAQQBJAEwAQwBMAFUAQgAgAHoAegAgAE8ATgAgAHoAegAuAFoAWgBS
AEMAQQBDAEkARAAgAD0AIABhAGMAYwBvAHUAbgB0AC4AQQBSAEEAQwBJAEQAIABXAEgARQBSAEUA
IABhAGMAYwBvAHUAbgB0AC4AQQBSAEEAQwBDAEwAQQBDAEMAVAAgAD0AIAAnAHsAMAB9ACcAAUtO
AG8AIABhAHIAdABpAHYAYQAgAGEAYwBjAG8AdQBuAHQAIABmAG8AdQBuAGQAIABmAG8AcgAgAE8A
cgBkAGUAcgAgAHsAMAB9AABvTgBTAEYAIAAwADMAIAByAGUAYwBvAHIAZAAgAHIAZQBjAGUAaQB2
AGUAZAAgAGYAbwByACAAdABoAGkAcwAgAGEAYwBjAG8AdQBuAHQAIABmAHIAbwBtACAAQwBsAGkA
ZQBuAHQAIABvAG4AIAAAEW0AbQBkAGQAeQB5AHkAeQAAEyAAaQBuACAAZgBpAGwAZQAgAACAvS4A
IABOAFMARgAgAGEAbQBvAHUAbgB0ACAAZwBvAGUAcwAgAHQAbwAgAGEAbgBvAHQAaABlAHIAIABh
AGcAZQBuAGMAeQAuACAAQgBhAGwAYQBuAGMAZQAgAHcAaQBsAGwAIABuAG8AdAAgAGIAZQAgAHUA
cABkAGEAdABlAGQAIABkAHUAZQAgAHQAbwAgAHIAZQBjAG8AcgBkACAAYgBlAGkAbgBnACAAcgBl
AGMAZQBpAHYAZQBkAC4AAA9sAGEAYgBlAGwAOgAgAAAJSABPAEwARAAAb2wAYQBiAGUAbAA6ACAA
TwBuAGwAeQAgAHIAZQBjAG8AcgBkACAAdAB5AHAAZQAgADAAMgAgAGYAbwB1AG4AZAAgAGYAbwBy
ACAAdABoAGkAcwAgAG8AcgBkAGUAcgAgAG4AdQBtAGIAZQByACAAAFsgAGwAbwBhAGQAZQBkACAA
ZABhAHQAYQAgAGYAcgBvAG0AIAB0AGgAYQB0ACAAcgBlAGMAbwByAGQALgBhAGMAYwBvAHUAbgB0
ACAAbwBuACAAaABvAGwAZAAAXU4AbwAgAFIAZQBjAG8AcgBkACAAdAB5AHAAZQAgADMAIAByAGUA
YwBpAGUAdgBlAGQAIABhAGMAYwBvAHUAbgB0ACAAewAwAH0AIABvAG4AIABoAG8AbABkAC4AAAlP
AFAARQBOAAAJUABSAEkATQAAAyAAAIDfSQBuAGMAbwByAHIAZQBjAHQAIAByAGUAYwBvAHIAZAAg
AHQAeQBwAGUAIABjAG8AdQBsAGQAIABuAG8AdAAgAGwAbwBhAGQALAAgAFIAZQBjAG8AcgBkACAA
ewAwAH0AIABzAGUAbgB0ACAAYgB5ACAAYwBsAGkAZQBuAHQAIABiAHUAdAAgAGMAbwB1AGwAZAAg
AG4AbwB0ACAAYgBlACAAbABvAGEAZABlAGQAIABkAHUAZQAgAHQAbwAgAHUAbgBlAHgAcABlAGMA
dABlAGQAIAB2AGEAbAB1AGUAAIEBSQBuAGMAbwByAHIAZQBjAHQAIAByAGUAYwBvAHIAZAAgAHQA
eQBwAGUAcwAgAGMAbwB1AGwAZAAgAG4AbwB0ACAAbABvAGEAZAAuACAAUgBlAGMAbwByAGQAKAB1
AG4AZQB4AHAAZQBjAHQAZQBkACAAdgBhAGwAdQBlACkAIABzAGUAbgB0ACAAYgB5ACAAYwBsAGkA
ZQBuAHQAIABiAHUAdAAgAGMAbwB1AGwAZAAgAG4AbwB0ACAAYgBlACAAbABvAGEAZABlAGQAIABk
AHUAZQAgAHQAbwAgAHUAbgBlAHgAcABlAGMAdABlAGQAIAB2AGEAbAB1AGUAcwAuAACAhU8AbgBs
AHkAIAByAGUAYwBvAHIAZAAgAHQAeQBwAGUAIAAwADMAIABmAG8AdQBuAGQAIABmAG8AcgAgAHQA
aABpAHMAIABvAHIAZABlAHIAIABuAHUAbQBiAGUAcgAgAHsAMAB9ACAAYwBvAHUAbABkACAAbgBv
AHQAIABsAG8AYQBkAAAdUAByAG8AYwBlAHMAcwAgAFYAYQBsAHUAZQBzAAAFQABAAAANSQBCAE0A
MAAzADcAAAUNAAoAAAMNAAADCgAAAzAAAAtlAG4ALQBVAFMAARF5AHkAeQB5AE0ATQBkAGQAAAtD
AE8ATQBBAEsAAAMsAAADLgAAAy8AAANOAABLbABpAG4AZQAgAGwAZQBuAGcAdABoACAAbQB1AHMA
dAAgAGIAZQAgAGcAcgBlAGEAdABlAHIAIAB0AGgAYQBuACAAegBlAHIAbwAAQ0YAaQBlAGwAZAAg
ACIAewAwAH0AIgAgAGUAeABjAGUAZQBkAHMAIABsAGkAbgBlACAAYgBvAHUAbgBkAGEAcgB5AAAD
IgAAS0YAaQBlAGwAZAAgAG4AYQBtAGUAIABpAHMAIAByAGUAcQB1AGkAcgBlAGQAIABmAG8AcgAg
AGEAIAB0AGUAbQBwAGwAYQB0AGUAAHlTAHQAYQByAHQAIABwAG8AcwBpAHQAaQBvAG4AIABjAGEA
bgBuAG8AdAAgAGIAZQAgAG4AZQBnAGEAdABpAHYAZQAgAGYAbwByACAAYQAgAGYAaQBlAGwAZAAg
AHQAZQBtAHAAbABhAHQAZQAgACIAewAwAH0AIgAAf0YAaQBsAGUAZAAgAHMAaQB6AGUAIABtAHUA
cwB0ACAAYgBlACAAZwByAGUAYQB0AGUAcgAgAHQAaABhAG4AIAB6AGUAcgBvACAAZgBvAHIAIABh
ACAAZgBpAGUAbABkACAAdABlAG0AcABsAGEAdABlACAAIgB7ADAAfQAiAACAk0kAbgBjAG8AcgBy
AGUAYwB0ACAAbgB1AG0AYgBlAHIAIABvAGYAIABiAHkAdABlAHMAIABwAHIAbwB2AGkAZABlAGQA
IABmAG8AcgAgAGEAIABiAGkAbgBhAHIAeQAgAGYAaQBlAGwAZAAgAHQAZQBtAHAAbABhAHQAZQAg
ACIAewAwAH0AIgA6ACAAewAxAH0AAICNTgB1AG0AYgBlAHIAIABvAGYAIABkAGUAYwBpAG0AYQBs
ACAAcABsAGEAYwBlAHMAIABjAGEAbgBuAG8AdAAgAGIAZQAgAG4AZQBnAGEAdABpAHYAZQAgAGYA
bwByACAAYQAgAGYAaQBlAGwAZAAgAHQAZQBtAHAAbABhAHQAZQAgACIAewAwAH0AIgAAgINOAHUA
bQBiAGUAcgAgAG8AZgAgAGQAZQBjAGkAbQBhAGwAIABwAGwAYQBjAGUAcwAgAGUAeABjAGUAZQBk
AHMAIABsAGkAbQBpAHQAIABmAG8AcgAgAGEAIABmAGkAZQBsAGQAIAB0AGUAbQBwAGwAYQB0AGUA
IAAiAHsAMAB9ACIAADd7ADAAfQA6ACAAVwByAGkAdABpAG4AZwAgAG8AdQB0AHAAdQB0ACAAZgBp
AGwAZQAuAC4ALgAAO08AdQB0AHAAdQB0ACAAZgBpAGwAZQAgAHAAYQB0AGgAIABpAHMAIABuAG8A
dAAgAHYAYQBsAGkAZAAAIU4AbwB0AGgAaQBuAGcAIAB0AG8AIAB3AHIAaQB0AGUAADl7ADEAfQA6
ACAATwB1AHQAcAB1AHQAIABmAGkAbABlACAAYwByAGUAYQB0AGUAZAAgAHsAMAB9AAAlSQBuAHYA
YQBsAGkAZAAgAGgAZQB4ACAAcwB0AHIAaQBuAGcAAC1JAG4AdgBhAGwAaQBkACAAYQByAHIAYQB5
ACAAbABlAG4AZwB0AGgAOgAgAAAxSQBuAHYAYQBsAGkAZAAgAHMAdABhAHIAdAAgAHAAbwBzAGkA
dABpAG8AbgA6ACAAAFNTAHQAYQByAHQAIABwAG8AcwBpAHQAaQBvAG4AIABpAHMAIABvAHUAdABz
AGkAZABlACAAbwBmACAAYQByAHIAYQB5ACAAYgBvAHUAbgBkAHMAAE9FAG4AZAAgAHAAbwBzAGkA
dABpAG8AbgAgAGkAcwAgAG8AdQB0AHMAaQBkAGUAIABvAGYAIABhAHIAcgBhAHkAIABiAG8AdQBu
AGQAcwAAN0wAaQBuAGUAIABiAHkAdABlAHMAIABpAHMAIABuAHUAbABsACAAbwByACAAZQBtAHAA
dAB5AABhRgBpAGUAbABkACAAIgB7ADAAfQAiACAAbABlAG4AZwB0AGgAIABmAGEAbABsAHMAIABv
AHUAdABzAGkAZABlACAAdABoAGUAIABsAGkAbgBlACAAbABlAG4AZwB0AGgAAGlVAG4AYQBiAGwA
ZQAgAHQAbwAgAHAAYQByAHMAZQAgAGYAaQBlAGwAZAAgACIAewAwAH0AIgAuACAAVQBuAGsAbgBv
AHcAbgAgAGYAaQBlAGwAZAAgAHQAeQBwAGUAOgAgAHsAMQB9AAALXgBcAGQAKwAkAAAZXgBcAGQA
KwBbAEEALQBSAHsAfQBdACQAAQN7AAADQQAAA0IAAANDAAADRAAAA0UAAANGAAADRwAAA0gAAANJ
AAADfQAAA0oAAANLAAADTAAAA00AAANPAAADUAAAA1EAAANSAAADMQAAAzIAAAMzAAADNAAAAzUA
AAM2AAADNwAAAzgAAAM5AAADLQABdUkAbgBjAG8AcgByAGUAYwB0ACAAbgB1AG0AYgBlAHIAIABv
AGYAIABiAHkAdABlAHMAIABwAHIAbwB2AGkAZABlAGQAIABmAG8AcgAgAGEAIABiAGkAbgBhAHIA
eQAgAGYAaQBlAGwAZAA6ACAAewAxAH0AAA8wADAAMAAwADAAMAAwAAAPOQA5ADkAOQA5ADkAOQAA
E14AXABkAHsAMwAsADUAfQAkAABzXgAoAD8APABZAGUAYQByAD4AXABkAHsAMwB9ACkAKAA/ADwA
TQBvAG4AdABoAD4AXABkAHsAMgB9ACkACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAoAD8APABE
AGEAeQA+AFwAZAB7ADIAfQApACQAAAlZAGUAYQByAAALTQBvAG4AdABoAAAHRABhAHkAABV5AHkA
eQB5AC0ATQBNAC0AZABkAAEPXgBcAGQAewA2AH0AJAAADXkAeQBNAE0AZABkAAAnTABpAG4AZQAg
AGIAeQB0AGUAcwAgAHIAZQBxAHUAaQByAGUAZAAAR0IAeQB0AGUAcwAgAHAAcgBvAHYAaQBkAGUA
ZAA6ACAAewAwAH0ALAAgAGwAaQBuAGUAIABzAGkAegBlADoAIAB7ADEAfQAAM2wAaQBuAGUAIAB0
AGUAbQBwAGwAYQB0AGUAIABpAHMAIAByAGUAcQB1AGkAcgBlAGQAAHVGAGkAZQBsAGQAIAB0AGUA
bQBwAGwAYQB0AGUAcwAgAGgAYQB2AGUAIABuAG8AdAAgAGIAZQBlAG4AIABkAGUAZgBpAG4AZQBk
ACAAaQBuACAAdABoAGUAIABsAGkAbgBlACAAdABlAG0AcABsAGEAdABlAAApewAwAH0AOgAgAFAA
YQByAHMAaQBuAGcAIABzAHQAYQByAHQAZQBkAABBewAxAH0AOgAgAEwAaQBuAGUAIABjAG8AdQBu
AHQAIABlAHMAdAAgAHsAMAA6ACMALAAjACMAIwAuADAAMAB9AABDewAxAH0AOgAgAHsAMAB9ACAA
bABpAG4AZQAoAHMAKQAgAGgAYQB2AGUAIABiAGUAZQBuACAAcABhAHIAcwBlAGQAADdFAGIAYwBk
AGkAYwAgAGQAYQB0AGEAIABpAHMAIABuAG8AdAAgAHAAcgBvAHYAaQBkAGUAZAAAO0wAaQBuAGUA
IAB0AGUAbQBwAGwAYQB0AGUAIABpAHMAIABuAG8AdAAgAHAAcgBvAHYAaQBkAGUAZAAAW0wAaQBu
AGUAIAB0AGUAbQBwAGwAYQB0AGUAIABtAHUAcwB0ACAAYwBvAG4AdABhAGkAbgAgAGEAdAAgAGwA
ZQBhAHMAdAAgAG8AbgBlACAAZgBpAGUAbABkAABTRABhAHQAYQAgAGwAZQBuAGcAdABoACAAaQBz
ACAAcwBoAG8AcgB0AGUAcgAgAHQAaABhAG4AIAB0AGgAZQAgAGwAaQBuAGUAIABzAGkAegBlAABN
QgB5AHQAZQBzACAAYwBvAHUAbgB0ACAAZABvAGUAcwBuACcAdAAgAGUAcQB1AGEAbAAgAHQAbwAg
AGwAaQBuAGUAIABzAGkAegBlAAGAh0UAeABwAGUAYwB0AGUAZAAgAG4AdQBtAGIAZQByACAAbwBm
ACAAcgBvAHcAcwAgAGkAcwAgAG4AbwB0ACAAYQAgAHcAaABvAGwAZQAgAG4AdQBtAGIAZQByAC4A
IABDAGgAZQBjAGsAIABsAGkAbgBlACAAdABlAG0AcABsAGEAdABlAC4AADNOAG8AIABsAGkAbgBl
AHMAIABoAGEAdgBlACAAYgBlAGUAbgAgAHAAYQByAHMAZQBkAACAm0kAcwBOAHUAbABsACAAcABy
AG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMA
ZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1
AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAEU8AdQB0AHAAdQB0ACAAMAAAEU8AdQB0AHAAdQB0ACAA
MQAAFUUAeABjAGUAcAB0AGkAbwBuAHMAABlNAFQAQwBvAG4AbgBlAGMAdABpAG8AbgAADUEAUgBU
AEkAVgBBAAAnRQB4AGMAZQBwAHQAaQBvAG4AQwBvAG4AbgBlAGMAdABpAG8AbgAAF0MAdQByAHIA
ZQBuAHQARgBpAGwAZQAAKUYAdQBsAGwASQBuAGIAbwB1AG4AZABEAGkAcgBlAGMAdABvAHIAeQAA
cVMAQwBfADYAMgBmADIAZQA3AGEAYgA2AGMANgA0ADQANQBjAGMAYgBmADAAMgA3AGUAYQA2AGEA
ZQAxAGEAZQBlADYAZQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA
AAAOYissQA/5SrxRNtTYQHKjAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGA1QMgAA4GFRI9Ag4O
ByACARMAEwEEAAEBDmUHKBIQEhASKAIdDhUSPQIOEiwVEkUBDhUSRQEODh0SJAgSJBIkEkkSTRJR
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
AAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEA
VA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAkBAARJdGVtAAAAtAAAAM7K
774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVy
c2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkz
NGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQ
QURQtAAAAGzRAAAAAAAAAAAAAIbRAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB40QAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAA
AAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWOAAABoEAAAAAAAAAAAAABoE
NAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQCBj6YeAAAB
AIGPph4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4A
ZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBp
AG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8A
bQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAk
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADYAMgBmADIAZQA3AGEA
YgA2AGMANgA0ADQANQBjAGMAYgBmADAAMgA3AGUAYQA2AGEAZQAxAGEAZQBlADYAZQAAAD4ADwAB
AEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADgANAA2AC4AMwA2ADcAMwA3AAAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADYAMgBmADIAZQA3AGEAYgA2
AGMANgA0ADQANQBjAGMAYgBmADAAMgA3AGUAYQA2AGEAZQAxAGEAZQBlADYAZQAuAGQAbABsAAAA
SAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAA
AAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8ANgAyAGYAMgBl
ADcAYQBiADYAYwA2ADQANAA1AGMAYwBiAGYAMAAyADcAZQBhADYAYQBlADEAYQBlAGUANgBlAC4A
ZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfADYAMgBmADIAZQA3
AGEAYgA2AGMANgA0ADQANQBjAGMAYgBmADAAMgA3AGUAYQA2AGEAZQAxAGEAZQBlADYAZQAAAEIA
DwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA4ADQANgAuADMANgA3
ADMANwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwA4ADQANgAuADMANgA3ADMANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAwAAACYMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_62f2e7ab6c6445ccbf027ea6ae1aee6e</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages, Microsoft.SqlServer.VSTAScriptingLib, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">User::CurrentFile,User::FullInboundDirectory</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">cf77f895deba45b1aea775992547051d</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">f4ba426cc54ab8d7d492084c7de83b6c54acb5e8</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.SqlServer.Dts.Pipeline.ScriptComponentHost, Microsoft.SqlServer.TxScript, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Connections[MTConnection]"
                      connectionManagerID="Package.ConnectionManagers[ArtivaMT]"
                      connectionManagerRefId="Package.ConnectionManagers[ArtivaMT]"
                      name="MTConnection" />
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Connections[ARTIVA]"
                      connectionManagerID="Package.ConnectionManagers[ARTIVA]"
                      connectionManagerRefId="Package.ConnectionManagers[ARTIVA]"
                      name="ARTIVA" />
                    <connection
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Connections[ExceptionConnection]"
                      connectionManagerID="Package.ConnectionManagers[Exceptions]"
                      connectionManagerRefId="Package.ConnectionManagers[Exceptions]"
                      name="ExceptionConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0]"
                      hasSideEffects="true"
                      name="Output 0">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1]"
                      hasSideEffects="true"
                      name="Output 1">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions]"
                      hasSideEffects="true"
                      name="Exceptions">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions].Columns[Data]"
                          name="Data" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Exceptions]"
                  endId="Package\Foreach Loop Container\Data Flow Task\Exceptions.Inputs[Flat File Destination Input]"
                  name="Exceptions"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Exceptions]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Output 0]"
                  endId="Package\Foreach Loop Container\Data Flow Task\ArtivaNB.Inputs[Flat File Destination Input]"
                  name="Output 0"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 0]" />
                <path
                  refId="Package\Foreach Loop Container\Data Flow Task.Paths[Output 1]"
                  endId="Package\Foreach Loop Container\Data Flow Task\ArtivaMT.Inputs[Flat File Destination Input]"
                  name="Output 1"
                  startId="Package\Foreach Loop Container\Data Flow Task\Script Component.Outputs[Output 1]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\File System Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="File System Task"
          DTS:DTSID="{C3ADB567-DC72-4E48-9206-F3C8C74DFA47}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="File System Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="RenameFile"
              TaskOverwriteDestFile="True"
              TaskSourcePath="User::RenameSrc"
              TaskIsSourceVariable="True"
              TaskDestinationPath="User::RenameDst"
              TaskIsDestinationVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{91816D5A-1D2D-4516-8019-9265CC8B1FF4}"
          DTS:From="Package\Foreach Loop Container\Data Flow Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\File System Task" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{8B01465A-112E-4BDE-BBAE-CF3CF74F835B}"
          DTS:ObjectName="{8B01465A-112E-4BDE-BBAE-CF3CF74F835B}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::CurrentFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="150.666666666667,42"
          Id="Package\Foreach Loop Container\Data Flow Task"
          TopLeft="55,24" />
        <NodeLayout
          Size="158,42"
          Id="Package\Foreach Loop Container\File System Task"
          TopLeft="53,92" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="131.25,66">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,26"
              Start="0,0"
              End="0,18.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="253.333333333334,189.333333333334"
          Size="253.333333333334,232"
          Id="Package\Foreach Loop Container"
          TopLeft="327,116" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="129.333333333334,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Exceptions"
          TopLeft="471,198" />
        <NodeLayout
          Size="162.666666666667,42"
          Id="Package\Foreach Loop Container\Data Flow Task\Script Component"
          TopLeft="367,79" />
        <NodeLayout
          Size="120,42"
          Id="Package\Foreach Loop Container\Data Flow Task\ArtivaNB"
          TopLeft="221,197" />
        <NodeLayout
          Size="121.333333333334,42"
          Id="Package\Foreach Loop Container\Data Flow Task\ArtivaMT"
          TopLeft="698,194" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Output 1]"
          TopLeft="487.25,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="271.25,73"
              Start="0,0"
              End="271.25,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.1167002012072" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.1167002012072"
                    Point2="0,25.1167002012072"
                    Point3="4,25.1167002012072" />
                  <mssgle:LineSegment
                    End="267.25,25.1167002012072" />
                  <mssgle:CubicBezierSegment
                    Point1="267.25,25.1167002012072"
                    Point2="271.25,25.1167002012072"
                    Point3="271.25,29.1167002012072" />
                  <mssgle:LineSegment
                    End="271.25,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="115.6719140625,30.1167002012072,39.906171875,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Output 0]"
          TopLeft="448.5,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-167.5,76"
              Start="0,0"
              End="-167.5,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34"
                    Point2="0,38"
                    Point3="-4,38" />
                  <mssgle:LineSegment
                    End="-163.5,38" />
                  <mssgle:CubicBezierSegment
                    Point1="-163.5,38"
                    Point2="-167.5,38"
                    Point3="-167.5,42" />
                  <mssgle:LineSegment
                    End="-167.5,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-103.90572265625,43,40.3114453125,11.43359375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Data Flow Task.Paths[Exceptions]"
          TopLeft="474.333333333333,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="61.1666666666667,77"
              Start="0,0"
              End="61.1666666666667,69.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.2490886998785" />
                  <mssgle:CubicBezierSegment
                    Point1="0,27.2490886998785"
                    Point2="0,31.2490886998785"
                    Point3="4,31.2490886998785" />
                  <mssgle:LineSegment
                    End="57.1666666666667,31.2490886998785" />
                  <mssgle:CubicBezierSegment
                    Point1="57.1666666666667,31.2490886998785"
                    Point2="61.1666666666667,31.2490886998785"
                    Point3="61.1666666666667,35.2490886998785" />
                  <mssgle:LineSegment
                    End="61.1666666666667,69.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="6.51575520833334,36.2490886998785,48.13515625,11.3310546875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>